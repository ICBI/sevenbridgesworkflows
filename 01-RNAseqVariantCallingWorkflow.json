{
  "inputs": [
    {
      "label": "input_bam_file",
      "sbg:x": -201.29412906323932,
      "sbg:y": 457.3496257181362,
      "sbg:fileTypes": "BAM, SAM",
      "batchType": "item",
      "id": "#input_bam_file",
      "type": [
        "File"
      ]
    },
    {
      "label": "reference",
      "sbg:x": 119.94119286186601,
      "sbg:y": 64.99653019944748,
      "sbg:fileTypes": "FASTA, FA",
      "id": "#reference",
      "type": [
        "File"
      ]
    },
    {
      "label": "database",
      "sbg:x": 1632.9409873647626,
      "sbg:y": 198.82353020951743,
      "sbg:fileTypes": "ZIP",
      "id": "#database",
      "type": [
        "File"
      ]
    }
  ],
  "outputs": [
    {
      "label": "filtered_vcf",
      "sbg:x": 1478.0593361558624,
      "sbg:y": 86.29414753579968,
      "source": [
        "#GATK_VariantFiltration.filtered_vcf"
      ],
      "sbg:fileTypes": "VCF",
      "sbg:includeInPorts": true,
      "id": "#filtered_vcf",
      "required": true,
      "type": [
        "File"
      ]
    },
    {
      "label": "flagstat_metrics",
      "sbg:x": 1447.0589872550586,
      "sbg:y": 559.9999677059641,
      "source": [
        "#Samtools_flagstat.flagstat_metrics"
      ],
      "sbg:fileTypes": "TXT",
      "sbg:includeInPorts": true,
      "id": "#flagstat_metrics",
      "required": false,
      "type": [
        "null",
        "File"
      ]
    },
    {
      "label": "vcf_output",
      "sbg:x": 1481.176607328307,
      "sbg:y": 380.0000991769115,
      "source": [
        "#GATK_HaplotypeCaller.vcf_output"
      ],
      "sbg:fileTypes": "VCF",
      "sbg:includeInPorts": true,
      "id": "#vcf_output",
      "required": false,
      "type": [
        "null",
        {
          "items": "File",
          "name": "vcf_output",
          "type": "array"
        }
      ]
    },
    {
      "label": "n_cigar_split_bam",
      "sbg:x": 935.2942596463639,
      "sbg:y": 651.7647113041043,
      "source": [
        "#GATK_SplitNCigarReads.n_cigar_split_bam"
      ],
      "sbg:fileTypes": "CRAM, BAM",
      "sbg:includeInPorts": true,
      "id": "#n_cigar_split_bam",
      "required": false,
      "type": [
        "null",
        "File"
      ]
    },
    {
      "label": "summary_text",
      "sbg:x": 2134.1174132916894,
      "sbg:y": 111.76469693347444,
      "source": [
        "#SnpEff.summary_text"
      ],
      "sbg:fileTypes": "TXT",
      "sbg:includeInPorts": true,
      "id": "#summary_text",
      "required": false,
      "type": [
        "null",
        "File"
      ]
    },
    {
      "label": "summary",
      "sbg:x": 2084.705647058876,
      "sbg:y": 269.4117532904234,
      "source": [
        "#SnpEff.summary"
      ],
      "sbg:fileTypes": "HTML, CSV",
      "sbg:includeInPorts": true,
      "id": "#summary",
      "required": false,
      "type": [
        "null",
        "File"
      ]
    },
    {
      "label": "annotated",
      "sbg:x": 2047.0585897622775,
      "sbg:y": 476.47057141684917,
      "source": [
        "#SnpEff.annotated"
      ],
      "sbg:fileTypes": "VCF, TXT, GATK, BED, BEDANN",
      "sbg:includeInPorts": true,
      "id": "#annotated",
      "required": false,
      "type": [
        "null",
        "File"
      ]
    }
  ],
  "sbg:canvas_zoom": 1,
  "description": "RNA seq variant calling using GATK",
  "sbg:projectName": "Liver Cancer immuno-oncology Georgetown",
  "label": "RNAseqVariantCallingBatch-v3",
  "class": "Workflow",
  "sbg:image_url": "https://cgc.sbgenomics.com/ns/brood/images/YUGUSEV/liver-cancer-immuno-oncology-georgetown/whole-exome-sequencing-gatk-2-3-9-lite-b-batch-b-v3/0.png",
  "sbg:batchBy": {
    "type": "item"
  },
  "sbg:canvas_x": -285,
  "requirements": [],
  "steps": [
    {
      "inputs": [
        {
          "id": "#GATK_HaplotypeCaller.write_to_bam"
        },
        {
          "id": "#GATK_HaplotypeCaller.variant_index_type"
        },
        {
          "id": "#GATK_HaplotypeCaller.variant_index_parameter"
        },
        {
          "id": "#GATK_HaplotypeCaller.validation_strictness"
        },
        {
          "id": "#GATK_HaplotypeCaller.use_original_qualities"
        },
        {
          "id": "#GATK_HaplotypeCaller.use_filtered_reads"
        },
        {
          "id": "#GATK_HaplotypeCaller.use_allele_trigger"
        },
        {
          "id": "#GATK_HaplotypeCaller.unsafe"
        },
        {
          "id": "#GATK_HaplotypeCaller.threads_per_job"
        },
        {
          "id": "#GATK_HaplotypeCaller.tag"
        },
        {
          "id": "#GATK_HaplotypeCaller.standard_min_confidence_threshold_for_emitting",
          "default": 20
        },
        {
          "id": "#GATK_HaplotypeCaller.standard_min_confidence_threshold_for_calling",
          "default": 20
        },
        {
          "id": "#GATK_HaplotypeCaller.sites_only"
        },
        {
          "id": "#GATK_HaplotypeCaller.simplify_bam"
        },
        {
          "id": "#GATK_HaplotypeCaller.show_bam_list"
        },
        {
          "id": "#GATK_HaplotypeCaller.sample_rename_mapping_file"
        },
        {
          "id": "#GATK_HaplotypeCaller.sample_ploidy"
        },
        {
          "id": "#GATK_HaplotypeCaller.sample_name"
        },
        {
          "id": "#GATK_HaplotypeCaller.remove_program_records"
        },
        {
          "source": [
            "#SBG_FASTA_Indices.fasta_reference"
          ],
          "id": "#GATK_HaplotypeCaller.reference"
        },
        {
          "id": "#GATK_HaplotypeCaller.refactor_NDN_cigar_string"
        },
        {
          "source": [
            "#Sambamba_Index_1.indexed_bam"
          ],
          "id": "#GATK_HaplotypeCaller.reads"
        },
        {
          "id": "#GATK_HaplotypeCaller.read_group_black_list"
        },
        {
          "id": "#GATK_HaplotypeCaller.read_filter"
        },
        {
          "id": "#GATK_HaplotypeCaller.quantize_equals"
        },
        {
          "id": "#GATK_HaplotypeCaller.prob_threshold"
        },
        {
          "id": "#GATK_HaplotypeCaller.preserve_qscores_less_than"
        },
        {
          "id": "#GATK_HaplotypeCaller.phone_home"
        },
        {
          "id": "#GATK_HaplotypeCaller.performance_log"
        },
        {
          "id": "#GATK_HaplotypeCaller.pedigree_validation_type"
        },
        {
          "id": "#GATK_HaplotypeCaller.pedigree_string"
        },
        {
          "id": "#GATK_HaplotypeCaller.pedigree"
        },
        {
          "id": "#GATK_HaplotypeCaller.pcr_indel_model"
        },
        {
          "id": "#GATK_HaplotypeCaller.output_raw_activity"
        },
        {
          "id": "#GATK_HaplotypeCaller.out_mode"
        },
        {
          "id": "#GATK_HaplotypeCaller.num_bam_file_handles"
        },
        {
          "id": "#GATK_HaplotypeCaller.non_deterministic_random_seed"
        },
        {
          "id": "#GATK_HaplotypeCaller.no_soft_clipped",
          "default": true
        },
        {
          "id": "#GATK_HaplotypeCaller.no_active_region_trim"
        },
        {
          "id": "#GATK_HaplotypeCaller.never_trim_vcf_format_field"
        },
        {
          "id": "#GATK_HaplotypeCaller.monitor_thread_efficiency"
        },
        {
          "id": "#GATK_HaplotypeCaller.mismapping_rate"
        },
        {
          "id": "#GATK_HaplotypeCaller.min_reads_per_algn"
        },
        {
          "id": "#GATK_HaplotypeCaller.min_pruning_threshold"
        },
        {
          "id": "#GATK_HaplotypeCaller.min_length"
        },
        {
          "id": "#GATK_HaplotypeCaller.min_graph_pruning"
        },
        {
          "id": "#GATK_HaplotypeCaller.min_base_q_scores"
        },
        {
          "id": "#GATK_HaplotypeCaller.memory_per_job"
        },
        {
          "id": "#GATK_HaplotypeCaller.memory_overhead_per_job"
        },
        {
          "id": "#GATK_HaplotypeCaller.max_runtime_units"
        },
        {
          "id": "#GATK_HaplotypeCaller.max_runtime"
        },
        {
          "id": "#GATK_HaplotypeCaller.max_reads_active_reg"
        },
        {
          "id": "#GATK_HaplotypeCaller.max_haplotypes"
        },
        {
          "id": "#GATK_HaplotypeCaller.max_alternate_alleles"
        },
        {
          "id": "#GATK_HaplotypeCaller.max_active_region_size"
        },
        {
          "id": "#GATK_HaplotypeCaller.kmer_size"
        },
        {
          "id": "#GATK_HaplotypeCaller.keep_program_records"
        },
        {
          "id": "#GATK_HaplotypeCaller.intervals_string"
        },
        {
          "id": "#GATK_HaplotypeCaller.intervals_file"
        },
        {
          "id": "#GATK_HaplotypeCaller.interval_set_rule"
        },
        {
          "id": "#GATK_HaplotypeCaller.interval_padding"
        },
        {
          "id": "#GATK_HaplotypeCaller.interval_merging"
        },
        {
          "id": "#GATK_HaplotypeCaller.input_prior"
        },
        {
          "id": "#GATK_HaplotypeCaller.indel_size"
        },
        {
          "id": "#GATK_HaplotypeCaller.indel_heterozygosity"
        },
        {
          "id": "#GATK_HaplotypeCaller.heterozygosity"
        },
        {
          "id": "#GATK_HaplotypeCaller.graph_file"
        },
        {
          "id": "#GATK_HaplotypeCaller.gq_threshold"
        },
        {
          "id": "#GATK_HaplotypeCaller.global_q_score_prior"
        },
        {
          "id": "#GATK_HaplotypeCaller.genotyping_mode"
        },
        {
          "id": "#GATK_HaplotypeCaller.generate_md5"
        },
        {
          "id": "#GATK_HaplotypeCaller.gatk_key"
        },
        {
          "id": "#GATK_HaplotypeCaller.gap_penalty"
        },
        {
          "id": "#GATK_HaplotypeCaller.force_active"
        },
        {
          "id": "#GATK_HaplotypeCaller.fix_misencoded_quals"
        },
        {
          "id": "#GATK_HaplotypeCaller.exclude_intervals"
        },
        {
          "id": "#GATK_HaplotypeCaller.exclude_ann"
        },
        {
          "id": "#GATK_HaplotypeCaller.emit_ref_confidence"
        },
        {
          "id": "#GATK_HaplotypeCaller.emit_original_quals"
        },
        {
          "id": "#GATK_HaplotypeCaller.downsampling_type"
        },
        {
          "id": "#GATK_HaplotypeCaller.downsample_to_fraction"
        },
        {
          "id": "#GATK_HaplotypeCaller.downsample_to_coverage"
        },
        {
          "id": "#GATK_HaplotypeCaller.dont_increase_kmers"
        },
        {
          "id": "#GATK_HaplotypeCaller.disable_read_filter"
        },
        {
          "id": "#GATK_HaplotypeCaller.disable_phasing"
        },
        {
          "id": "#GATK_HaplotypeCaller.disable_opt"
        },
        {
          "id": "#GATK_HaplotypeCaller.disable_indel_quals"
        },
        {
          "id": "#GATK_HaplotypeCaller.disable_bam_indexing"
        },
        {
          "id": "#GATK_HaplotypeCaller.disable_auto_index"
        },
        {
          "id": "#GATK_HaplotypeCaller.default_base_qualities"
        },
        {
          "id": "#GATK_HaplotypeCaller.debug"
        },
        {
          "id": "#GATK_HaplotypeCaller.db_snp"
        },
        {
          "id": "#GATK_HaplotypeCaller.cpu_per_job"
        },
        {
          "id": "#GATK_HaplotypeCaller.contamination_fraction"
        },
        {
          "id": "#GATK_HaplotypeCaller.contamination_file"
        },
        {
          "id": "#GATK_HaplotypeCaller.consensus_mode"
        },
        {
          "id": "#GATK_HaplotypeCaller.comp_vcf"
        },
        {
          "id": "#GATK_HaplotypeCaller.bqsr"
        },
        {
          "id": "#GATK_HaplotypeCaller.baq_gap_open_penalty"
        },
        {
          "id": "#GATK_HaplotypeCaller.baq"
        },
        {
          "id": "#GATK_HaplotypeCaller.band_pass"
        },
        {
          "id": "#GATK_HaplotypeCaller.bam_out"
        },
        {
          "id": "#GATK_HaplotypeCaller.bam_compression"
        },
        {
          "id": "#GATK_HaplotypeCaller.annotation_groups"
        },
        {
          "id": "#GATK_HaplotypeCaller.annotation"
        },
        {
          "id": "#GATK_HaplotypeCaller.annotate_nda"
        },
        {
          "id": "#GATK_HaplotypeCaller.annotate_all_sites_PLs"
        },
        {
          "id": "#GATK_HaplotypeCaller.allow_potentailly_misencoded_quals"
        },
        {
          "id": "#GATK_HaplotypeCaller.allow_non_unique_kmers"
        },
        {
          "id": "#GATK_HaplotypeCaller.alleles"
        },
        {
          "id": "#GATK_HaplotypeCaller.all_sites"
        },
        {
          "id": "#GATK_HaplotypeCaller.active_region_list"
        },
        {
          "id": "#GATK_HaplotypeCaller.active_reg_output_file_name"
        },
        {
          "id": "#GATK_HaplotypeCaller.active_reg_ext"
        }
      ],
      "outputs": [
        {
          "id": "#GATK_HaplotypeCaller.vcf_output"
        }
      ],
      "sbg:x": 1143.764780750738,
      "run": {
        "sbg:modifiedBy": "elehnert",
        "inputs": [
          {
            "label": "Write haplotypes to BAM",
            "sbg:altPrefix": "-bamWriterType",
            "description": "Which haplotypes should be written to the BAM (ALL_POSSIBLE_HAPLOTYPES|CALLED_HAPLOTYPES)",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--bamWriterType"
            },
            "id": "#write_to_bam",
            "required": false,
            "type": [
              "null",
              {
                "symbols": [
                  "ALL_POSSIBLE_HAPLOTYPES",
                  "CALLED_HAPLOTYPES"
                ],
                "name": "write_to_bam",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Variant index type",
            "sbg:altPrefix": "-variant_index_type",
            "description": "Type of IndexCreator to use for VCF/BCF indices.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--variant_index_type",
              "itemSeparator": null
            },
            "id": "#variant_index_type",
            "required": false,
            "type": [
              "null",
              {
                "symbols": [
                  "DYNAMIC_SEEK",
                  "DYNAMIC_SIZE",
                  "LINEAR",
                  "INTERVAL"
                ],
                "name": "variant_index_type",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "-1",
            "label": "Variant index parameter",
            "sbg:altPrefix": "-variant_index_parameter",
            "description": "Parameter to pass to the VCF/BCF IndexCreator.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--variant_index_parameter",
              "itemSeparator": null
            },
            "id": "#variant_index_parameter",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "SILENT",
            "label": "Validation Strictness",
            "sbg:altPrefix": "-S",
            "description": "How strict should we be with validation.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--validation_strictness",
              "itemSeparator": null
            },
            "id": "#validation_strictness",
            "required": false,
            "type": [
              "null",
              {
                "symbols": [
                  "SILENT",
                  "LENIENT",
                  "STRICT"
                ],
                "name": "validation_strictness",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Use Original Qualities",
            "sbg:altPrefix": "-OQ",
            "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--useOriginalQualities",
              "itemSeparator": null
            },
            "id": "#use_original_qualities",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Use filtered reads",
            "sbg:altPrefix": "-useFilteredReadsForAnnotations",
            "description": "Use the contamination-filtered read maps for the purposes of annotating variants",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--useFilteredReadsForAnnotations"
            },
            "id": "#use_filtered_reads",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Use alleles trigger",
            "sbg:altPrefix": "-allelesTrigger",
            "description": "Use additional trigger on variants found in an external alleles file",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--useAllelesTrigger"
            },
            "id": "#use_allele_trigger",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Unsafe",
            "sbg:altPrefix": "-U",
            "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--unsafe",
              "itemSeparator": null
            },
            "id": "#unsafe",
            "required": false,
            "type": [
              "null",
              {
                "symbols": [
                  "ALLOW_N_CIGAR_READS",
                  "ALLOW_UNINDEXED_BAM",
                  "ALLOW_UNSET_BAM_SORT_ORDER",
                  "NO_READ_ORDER_VERIFICATION",
                  "ALLOW_SEQ_DICT_INCOMPATIBILITY",
                  "LENIENT_VCF_PROCESSING",
                  "ALL"
                ],
                "name": "unsafe",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "0",
            "label": "Threads per job (nct)",
            "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used. Set to 0 for auto-detect (use with caution,as auto-detect will find the optimal value in most cases).",
            "sbg:category": "Execution",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-nct"
            },
            "id": "#threads_per_job",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Tag",
            "sbg:altPrefix": "-tag",
            "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--tag",
              "itemSeparator": null
            },
            "id": "#tag",
            "required": false,
            "type": [
              "null",
              "string"
            ]
          },
          {
            "sbg:toolDefaultValue": "30.0",
            "label": "Standard emit confidence",
            "sbg:altPrefix": "-stand_emit_conf",
            "description": "The minimum phred-scaled confidence threshold at which variants should be emitted (and filtered with LowQual if less than the calling threshold). The minimum phred-scaled Qscore threshold to separate high confidence from low confidence calls. Only genotypes with confidence >= this threshold are emitted as called sites. A reasonable threshold is 30 for high-pass calling (this is the default).",
            "sbg:category": "Genotype GVCFs",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--standard_min_confidence_threshold_for_emitting",
              "itemSeparator": null
            },
            "id": "#standard_min_confidence_threshold_for_emitting",
            "required": false,
            "type": [
              "null",
              "float"
            ]
          },
          {
            "sbg:toolDefaultValue": "30.0",
            "label": "Standard call confidence",
            "sbg:altPrefix": "-stand_call_conf",
            "description": "The minimum phred-scaled confidence threshold at which variants should be called. The minimum phred-scaled Qscore threshold to separate high confidence from low confidence calls. Only genotypes with confidence >= this threshold are emitted as called sites. A reasonable threshold is 30 for high-pass calling (this is the default).",
            "sbg:category": "Genotype GVCFs",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--standard_min_confidence_threshold_for_calling",
              "itemSeparator": null
            },
            "id": "#standard_min_confidence_threshold_for_calling",
            "required": false,
            "type": [
              "null",
              "float"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Siteslo only",
            "sbg:altPrefix": "-sites_only",
            "description": "Just output sites without genotypes (i.e. only the first 8 columns of the VCF).",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--sites_only",
              "itemSeparator": null
            },
            "id": "#sites_only",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Simplify bam",
            "sbg:altPrefix": "-simplifyBAM",
            "description": "If provided, output BAM files will be simplified to include just key reads for downstream variation discovery analyses (removing duplicates, PF-, non-primary reads), as well stripping all extended tags from the kept reads except the read group identifier.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--simplifyBAM",
              "itemSeparator": null
            },
            "id": "#simplify_bam",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "BAM list log entry",
            "sbg:altPrefix": "",
            "description": "Emit a log entry (level INFO) containing the full list of sequence data files to be includedin the analysis (including files inside .bam.list files).",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--showFullBamList",
              "itemSeparator": null
            },
            "id": "#show_bam_list",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Sample rename mapping file",
            "sbg:altPrefix": "-sample_rename_mapping_file",
            "description": "Rename sample IDs on-the-fly at runtime using the provided mapping file.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--sample_rename_mapping_file",
              "itemSeparator": null
            },
            "id": "#sample_rename_mapping_file",
            "required": false,
            "type": [
              "null",
              "string"
            ]
          },
          {
            "sbg:toolDefaultValue": "2",
            "label": "Sample Ploidy",
            "sbg:altPrefix": "-ploidy",
            "description": "Plody (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy).",
            "sbg:category": "Genotype GVCFs",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--sample_ploidy",
              "itemSeparator": null
            },
            "id": "#sample_ploidy",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Sample name",
            "sbg:altPrefix": "-sn",
            "description": "Name of single sample to use from a multi-sample bam",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--sample_name"
            },
            "id": "#sample_name",
            "required": false,
            "type": [
              "null",
              "string"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Remove Program Records",
            "sbg:altPrefix": "-rpr",
            "description": "Should we override the Walker's default and remove program records from the SAM header.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--remove_program_records",
              "itemSeparator": null
            },
            "id": "#remove_program_records",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Reference Genome",
            "sbg:altPrefix": "-R",
            "description": "Reference Genome in FASTA format.",
            "sbg:category": "Input Files",
            "sbg:fileTypes": "FASTA, FA",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--reference_sequence",
              "itemSeparator": " "
            },
            "id": "#reference",
            "required": true,
            "type": [
              "File"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Refactor ndn cigar string",
            "sbg:altPrefix": "-fixNDN",
            "description": "Refactor cigar string with NDN elements to one element.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--refactor_NDN_cigar_string",
              "itemSeparator": null
            },
            "id": "#refactor_NDN_cigar_string",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Input BAM/CRAM files",
            "sbg:altPrefix": "-I",
            "description": "Input BAM or CRAM files",
            "sbg:category": "Input file(s) containing sequence data",
            "sbg:fileTypes": "BAM, CRAM",
            "inputBinding": {
              "prefix": "--input_file",
              "separate": true,
              "sbg:cmdInclude": true,
              "secondaryFiles": [
                ".bai",
                "^.bai"
              ],
              "itemSeparator": null
            },
            "id": "#reads",
            "required": true,
            "type": [
              {
                "items": "File",
                "name": "reads",
                "type": "array"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "[]",
            "label": "Read Group Black List",
            "sbg:altPrefix": "-rgbl",
            "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--read_group_black_list",
              "itemSeparator": null
            },
            "id": "#read_group_black_list",
            "required": false,
            "type": [
              "null",
              {
                "items": "string",
                "type": "array"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "[]",
            "sbg:altPrefix": "-rf",
            "label": "Read Filter",
            "description": "Specify filtration criteria to apply to each read individually.",
            "sbg:category": "GATK General",
            "sbg:stageInput": null,
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--read_filter",
              "itemSeparator": null
            },
            "id": "#read_filter",
            "required": false,
            "type": [
              "null",
              {
                "items": "string",
                "name": "read_filter",
                "type": "array"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Quantize BQ Scores",
            "sbg:altPrefix": "-qq",
            "description": "Quantize quality scores to a given number of levels (with -BQSR).",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--quantize_equals",
              "itemSeparator": null
            },
            "id": "#quantize_equals",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Active probability threshold",
            "sbg:altPrefix": "-ActProbThresh",
            "description": "Threshold for the probability of a profile state being active.",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--activeProbabilityThreshold"
            },
            "id": "#prob_threshold",
            "required": false,
            "type": [
              "null",
              "float"
            ]
          },
          {
            "sbg:toolDefaultValue": "6",
            "label": "Preserve Qscores Less Than",
            "sbg:altPrefix": "-preserveQ",
            "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR).",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--preserve_qscores_less_than",
              "itemSeparator": null
            },
            "id": "#preserve_qscores_less_than",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "AWS",
            "label": "Phone Home",
            "sbg:altPrefix": "-et",
            "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--phone_home",
              "itemSeparator": null
            },
            "id": "#phone_home",
            "required": false,
            "type": [
              "null",
              {
                "symbols": [
                  "NO_ET",
                  "AWS",
                  "STDOUT"
                ],
                "name": "phone_home",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Runtime performance log",
            "sbg:altPrefix": "-PF",
            "description": "Write GATK runtime performance long. Specify the file name of this log.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--performanceLog",
              "itemSeparator": null
            },
            "id": "#performance_log",
            "required": false,
            "type": [
              "null",
              "string"
            ]
          },
          {
            "sbg:toolDefaultValue": "STRICT",
            "label": "Pedigree Validation Type",
            "sbg:altPrefix": "-pedValidationType",
            "description": "How strict should we be in validating the pedigree information?.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--pedigreeValidationType",
              "itemSeparator": null
            },
            "id": "#pedigree_validation_type",
            "required": false,
            "type": [
              "null",
              {
                "symbols": [
                  "STRICT",
                  "SILENT"
                ],
                "name": "pedigree_validation_type",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "[]",
            "label": "Pedigree String",
            "sbg:altPrefix": "-pedString",
            "description": "Pedigree string for samples.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--pedigreeString",
              "itemSeparator": null
            },
            "id": "#pedigree_string",
            "required": false,
            "type": [
              "null",
              {
                "items": "string",
                "type": "array"
              }
            ]
          },
          {
            "label": "Pedigree",
            "sbg:altPrefix": "-ped",
            "description": "Pedigree files for samples.",
            "sbg:category": "Input Files",
            "sbg:fileTypes": "PED, TXT",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--pedigree",
              "itemSeparator": null
            },
            "id": "#pedigree",
            "required": false,
            "type": [
              "null",
              {
                "items": "File",
                "name": "pedigree",
                "type": "array"
              }
            ]
          },
          {
            "label": "PCR indel model",
            "sbg:altPrefix": "-pcrModel",
            "description": "The PCR indel model to use (NONE|HOSTILE|AGGRESSIVE|CONSERVATIVE)",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--pcr_indel_model"
            },
            "id": "#pcr_indel_model",
            "required": false,
            "type": [
              "null",
              {
                "symbols": [
                  "NONE",
                  "HOSTILE",
                  "AGGRESSIVE",
                  "CONSERVATIVE"
                ],
                "name": "pcr_indel_model",
                "type": "enum"
              }
            ]
          },
          {
            "label": "Raw activity profile output",
            "sbg:altPrefix": "-APO",
            "description": "Output the raw activity profile results in IGV format",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--activityProfileOut"
            },
            "id": "#output_raw_activity",
            "required": false,
            "type": [
              "null",
              "string"
            ]
          },
          {
            "label": "Out mode",
            "sbg:altPrefix": "-out_mode",
            "description": "Specifies which type of calls we should output (EMIT_VARIANTS_ONLY|EMIT_ALL_CONFIDENT_SITES|EMIT_ALL_SITES)",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--output_mode"
            },
            "id": "#out_mode",
            "required": false,
            "type": [
              "null",
              {
                "symbols": [
                  "EMIT_VARIANTS_ONLY",
                  "EMIT_ALL_CONFIDENT_SITES",
                  "EMIT_ALL_SITES"
                ],
                "name": "out_mode",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Num bam file handles",
            "sbg:altPrefix": "-bfh",
            "description": "Total number of BAM file handles to keep open simultaneously.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--num_bam_file_handles",
              "itemSeparator": null
            },
            "id": "#num_bam_file_handles",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Non Deterministic Random Seed",
            "sbg:altPrefix": "-ndrs",
            "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--nonDeterministicRandomSeed",
              "itemSeparator": null
            },
            "id": "#non_deterministic_random_seed",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Dont use softclipeed bases",
            "sbg:altPrefix": "-dontUseSoftClippedBases",
            "description": "Do not analyze soft clipped bases in the reads",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--dontUseSoftClippedBases"
            },
            "id": "#no_soft_clipped",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Don't trim active regions",
            "sbg:altPrefix": "-dontTrimActiveRegions",
            "description": "If specified, we will not trim down the active region from the full region (active + extension) to just the active interval for genotyping",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--dontTrimActiveRegions"
            },
            "id": "#no_active_region_trim",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Never trim vcf format field",
            "sbg:altPrefix": "-writeFullFormat",
            "description": "Always output all the records in VCF FORMAT fields, even if some are missing.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--never_trim_vcf_format_field",
              "itemSeparator": null
            },
            "id": "#never_trim_vcf_format_field",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Monitor thread efficiency",
            "sbg:altPrefix": "-mte",
            "description": "Enable threading efficiency monitoring.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--monitorThreadEfficiency",
              "itemSeparator": null
            },
            "id": "#monitor_thread_efficiency",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Phred mismapping rate",
            "sbg:altPrefix": "-globalMAPQ",
            "description": "The global assumed mismapping rate for reads",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--phredScaledGlobalReadMismappingRate"
            },
            "id": "#mismapping_rate",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Minimum reads per aligment",
            "sbg:altPrefix": "-minReadsPerAlignStart",
            "description": "Minimum number of reads sharing the same alignment start for each genomic location in an active region",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--minReadsPerAlignmentStart"
            },
            "id": "#min_reads_per_algn",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Minimum pruning threshold",
            "sbg:altPrefix": "-numPruningSamples",
            "description": "Number of samples that must pass the minPruning threshold",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--numPruningSamples"
            },
            "id": "#min_pruning_threshold",
            "required": false,
            "type": [
              "null",
              "string"
            ]
          },
          {
            "label": "Minimum dangling branch length",
            "sbg:altPrefix": "-minDanglingBranchLength",
            "description": "Minimum length of a dangling branch to attempt recovery",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--minDanglingBranchLength"
            },
            "id": "#min_length",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Minimum graph pruning",
            "sbg:altPrefix": "-minPruning",
            "description": "Minimum support to not prune paths in the graph",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--minPruning"
            },
            "id": "#min_graph_pruning",
            "required": false,
            "type": [
              "null",
              "string"
            ]
          },
          {
            "label": "Minimum base quality scores",
            "sbg:altPrefix": "-mbq",
            "description": "Minimum base quality required to consider a base for calling",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--min_base_quality_score"
            },
            "id": "#min_base_q_scores",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "2048",
            "label": "Memory per job",
            "description": "Amount of RAM memory to be used per job. Defaults to 2048MB for Single threaded jobs,and all of the available memory on the instance for multi-threaded jobs. .",
            "sbg:category": "Execution",
            "id": "#memory_per_job",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "0",
            "label": "Memory overhead per job",
            "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
            "sbg:category": "Execution",
            "id": "#memory_overhead_per_job",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "MINUTES",
            "label": "Max Runtime Units",
            "sbg:altPrefix": "-maxRuntimeUnits",
            "description": "The TimeUnit for maxRuntime.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--maxRuntimeUnits",
              "itemSeparator": null
            },
            "id": "#max_runtime_units",
            "required": false,
            "type": [
              "null",
              {
                "symbols": [
                  "NANOSECONDS",
                  "MICROSECONDS",
                  "MILLISECONDS",
                  "SECONDS",
                  "MINUTES",
                  "HOURS",
                  "DAYS"
                ],
                "name": "max_runtime_units",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "-1",
            "label": "Max Runtime",
            "sbg:altPrefix": "maxRuntime",
            "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--maxRuntime",
              "itemSeparator": null
            },
            "id": "#max_runtime",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Maximum reads in active region",
            "sbg:altPrefix": "-maxReadsInRegionPerSample",
            "description": "Maximum reads in an active region",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--maxReadsInRegionPerSample"
            },
            "id": "#max_reads_active_reg",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Maximum number of haplotypes",
            "sbg:altPrefix": "-maxNumHaplotypesInPopulation",
            "description": "Maximum number of haplotypes to consider for your population",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--maxNumHaplotypesInPopulation"
            },
            "id": "#max_haplotypes",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "6",
            "label": "Max Alternate Alleles",
            "sbg:altPrefix": "-maxAltAlleles",
            "description": "Maximum number of alternate alleles to genotype.",
            "sbg:category": "Genotype GVCFs",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--max_alternate_alleles",
              "itemSeparator": null
            },
            "id": "#max_alternate_alleles",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Maximum size of active region",
            "sbg:altPrefix": "-activeRegionMaxSize",
            "description": "The active region maximum size; if not provided defaults to Walker annotated default",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--activeRegionMaxSize"
            },
            "id": "#max_active_region_size",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "K-mer size",
            "sbg:altPrefix": "-kmerSize",
            "description": "Kmer size to use in the read threading assembler",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--kmerSize"
            },
            "id": "#kmer_size",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Keep Program Records",
            "sbg:altPrefix": "-kpr",
            "description": "Should we override the Walker's default and keep program records from the SAM header.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--keep_program_records",
              "itemSeparator": null
            },
            "id": "#keep_program_records",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Intervals",
            "sbg:altPrefix": "-L",
            "description": "One or more genomic intervals over which to operate.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--intervals",
              "itemSeparator": null
            },
            "id": "#intervals_string",
            "required": false,
            "type": [
              "null",
              "string"
            ]
          },
          {
            "label": "Intervals",
            "sbg:altPrefix": "-L",
            "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file.",
            "sbg:category": "Input Files",
            "sbg:fileTypes": "TXT, BED, VCF",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--intervals",
              "itemSeparator": " "
            },
            "id": "#intervals_file",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          },
          {
            "sbg:toolDefaultValue": "UNION",
            "label": "Interval Set Rule",
            "sbg:altPrefix": "-isr",
            "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--interval_set_rule",
              "itemSeparator": null
            },
            "id": "#interval_set_rule",
            "required": false,
            "type": [
              "null",
              {
                "symbols": [
                  "UNION",
                  "INTERSECTION"
                ],
                "name": "interval_set_rule",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "0",
            "label": "Interval Padding",
            "sbg:altPrefix": "-ip",
            "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--interval_padding",
              "itemSeparator": null
            },
            "id": "#interval_padding",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "ALL",
            "label": "Interval Merging",
            "sbg:altPrefix": "-im",
            "description": "Indicates the interval merging rule we should use for abutting intervals.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--interval_merging",
              "itemSeparator": null
            },
            "id": "#interval_merging",
            "required": false,
            "type": [
              "null",
              {
                "symbols": [
                  "ALL",
                  "OVERLAPPING_ONLY"
                ],
                "name": "interval_merging",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Input prior",
            "sbg:altPrefix": "-inputPrior",
            "description": "Input prior for calls.",
            "sbg:category": "Genotype GVCFs",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--input_prior",
              "itemSeparator": null
            },
            "id": "#input_prior",
            "required": false,
            "type": [
              "null",
              "float"
            ]
          },
          {
            "label": "Indel size",
            "sbg:altPrefix": "-ERCIS",
            "description": "The size of an indel to check for in the reference model",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--indelSizeToEliminateInRefModel"
            },
            "id": "#indel_size",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "0.000125",
            "label": "Indel Heterozygosity",
            "sbg:altPrefix": "-indelHeterozygosity",
            "description": "Heterozygosity for indel calling.",
            "sbg:category": "Genotype GVCFs",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--indel_heterozygosity",
              "itemSeparator": null
            },
            "id": "#indel_heterozygosity",
            "required": false,
            "type": [
              "null",
              "float"
            ]
          },
          {
            "sbg:toolDefaultValue": "0.001",
            "label": "Heterozygosity",
            "sbg:altPrefix": "-hets",
            "description": "Heterozygosity value used to compute prior likelihoods for any locus.",
            "sbg:category": "Genotype GVCFs",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--heterozygosity",
              "itemSeparator": null
            },
            "id": "#heterozygosity",
            "required": false,
            "type": [
              "null",
              "float"
            ]
          },
          {
            "label": "Graph file output",
            "sbg:altPrefix": "-graph",
            "description": "Write debug assembly graph information to this file",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--graphOutput"
            },
            "id": "#graph_file",
            "required": false,
            "type": [
              "null",
              "string"
            ]
          },
          {
            "label": "GQ threshold",
            "sbg:altPrefix": "-GQB",
            "description": "GQ thresholds for reference confidence bands",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--GVCFGQBands",
              "itemSeparator": null
            },
            "id": "#gq_threshold",
            "required": false,
            "type": [
              "null",
              {
                "items": "int",
                "name": "gq_threshold",
                "type": "array"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "-1.0",
            "label": "Global q score prior",
            "sbg:altPrefix": "-globalQScorePrior",
            "description": "Global Qscore Bayesian prior to use for BQSR.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--globalQScorePrior",
              "itemSeparator": null
            },
            "id": "#global_q_score_prior",
            "required": false,
            "type": [
              "null",
              "float"
            ]
          },
          {
            "label": "Genotyping mode",
            "sbg:altPrefix": "-gt_mode",
            "description": "Specifies how to determine the alternate alleles to use for genotyping (DISCOVERY|GENOTYPE_GIVEN_ALLELES)",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--genotyping_mode"
            },
            "id": "#genotyping_mode",
            "required": false,
            "type": [
              "null",
              {
                "symbols": [
                  "DISCOVERY",
                  "GENOTYPE_GIVEN_ALLELES"
                ],
                "name": "genotyping_mode",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Generate MD5",
            "sbg:altPrefix": "",
            "description": "Enable on-the-fly creation of md5s for output BAM files.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--generate_md5",
              "itemSeparator": null
            },
            "id": "#generate_md5",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Gatk key",
            "sbg:altPrefix": "-K",
            "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
            "sbg:category": "Input Files",
            "sbg:fileTypes": "KEY, LICENSE",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--gatk_key",
              "itemSeparator": " "
            },
            "id": "#gatk_key",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          },
          {
            "label": "Gap continuation penalty",
            "sbg:altPrefix": "-gcpHMM",
            "description": "Flat gap continuation penalty for use in the Pair HMM",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--gcpHMM"
            },
            "id": "#gap_penalty",
            "required": false,
            "type": [
              "null",
              "float"
            ]
          },
          {
            "label": "Force active bases",
            "sbg:altPrefix": "-forceActive",
            "description": "If provided, all bases will be tagged as active",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--forceActive"
            },
            "id": "#force_active",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Fix Misencoded Quals",
            "sbg:altPrefix": "-fixMisencodedQuals",
            "description": "Fix mis-encoded base quality scores.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--fix_misencoded_quality_scores",
              "itemSeparator": null
            },
            "id": "#fix_misencoded_quals",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Exclude Intervals",
            "sbg:altPrefix": "-XL",
            "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file.",
            "sbg:category": "Input Files",
            "sbg:fileTypes": "TXT, BED, VCF",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--excludeIntervals",
              "itemSeparator": " "
            },
            "id": "#exclude_intervals",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          },
          {
            "label": "Exclude annotation",
            "sbg:altPrefix": "-XA",
            "description": "One or more specific annotations to exclude",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--excludeAnnotation",
              "itemSeparator": null
            },
            "id": "#exclude_ann",
            "required": false,
            "type": [
              "null",
              {
                "items": "string",
                "name": "exclude_ann",
                "type": "array"
              }
            ]
          },
          {
            "label": "Emit reference confidence",
            "sbg:altPrefix": "-ERC",
            "description": "Mode for emitting reference confidence scores (NONE|BP_RESOLUTION|GVCF)",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--emitRefConfidence"
            },
            "id": "#emit_ref_confidence",
            "required": false,
            "type": [
              "null",
              {
                "symbols": [
                  "NONE",
                  "BP_RESOLUTION",
                  "GVCF"
                ],
                "name": "emit_ref_confidence",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Emit Original Quals",
            "sbg:altPrefix": "-EOQ",
            "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR).",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--emit_original_quals",
              "itemSeparator": null
            },
            "id": "#emit_original_quals",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Downsampling Type",
            "sbg:altPrefix": "-dt",
            "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--downsampling_type",
              "itemSeparator": null
            },
            "id": "#downsampling_type",
            "required": false,
            "type": [
              "null",
              {
                "symbols": [
                  "NONE",
                  "ALL_READS",
                  "BY_SAMPLE"
                ],
                "name": "downsampling_type",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Downsample to Fraction",
            "sbg:altPrefix": "-dfrac",
            "description": "Fraction [0.0-1.0] of reads to downsample to.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--downsample_to_fraction",
              "itemSeparator": null
            },
            "id": "#downsample_to_fraction",
            "required": false,
            "type": [
              "null",
              "float"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Downsample to Coverage",
            "sbg:altPrefix": "-dcov",
            "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--downsample_to_coverage",
              "itemSeparator": null
            },
            "id": "#downsample_to_coverage",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Don't increase K-mer size",
            "sbg:altPrefix": "-dontIncreaseKmerSizesForCycles",
            "description": "Disable iterating over kmer sizes when graph cycles are detected",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--dontIncreaseKmerSizesForCycles"
            },
            "id": "#dont_increase_kmers",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Read filter(s) to disable",
            "sbg:altPrefix": "-drf",
            "description": "Read filters to disable. Specify which filter(s) to disable.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--disable_read_filter",
              "itemSeparator": null
            },
            "id": "#disable_read_filter",
            "required": false,
            "type": [
              "null",
              {
                "symbols": [],
                "name": "disable_read_filter",
                "type": "enum"
              }
            ]
          },
          {
            "label": "Disable phasing",
            "sbg:altPrefix": "-doNotRunPhysicalPhasing",
            "description": "Disable physical phasing",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--doNotRunPhysicalPhasing"
            },
            "id": "#disable_phasing",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Disable optimizations",
            "sbg:altPrefix": "-disableOptimizations",
            "description": "Don't skip calculations in ActiveRegions with no variants",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--disableOptimizations"
            },
            "id": "#disable_opt",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Disable Indel Quals",
            "sbg:altPrefix": "-DIQ",
            "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--disable_indel_quals",
              "itemSeparator": null
            },
            "id": "#disable_indel_quals",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Disable bam indexing",
            "sbg:altPrefix": null,
            "description": "Turn off on-the-fly creation of indices for output BAM files.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--disable_bam_indexing",
              "itemSeparator": null
            },
            "id": "#disable_bam_indexing",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Disable index generation and locking",
            "sbg:altPrefix": "-d_locking_when_reading_rods",
            "description": "Disable both auto-generation of index files and index file locking.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--disable_auto_index_creation_and_locking_when_reading_rods",
              "itemSeparator": null
            },
            "id": "#disable_auto_index",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "0",
            "label": "Default Base Qualities",
            "sbg:altPrefix": "-DBQ",
            "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--defaultBaseQualities",
              "itemSeparator": null
            },
            "id": "#default_base_qualities",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Debug",
            "sbg:altPrefix": "-debug",
            "description": "Print out very verbose debug information about each triggering active region",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--debug"
            },
            "id": "#debug",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:altPrefix": "-D",
            "description": "DB SNP file",
            "label": "DB SNP file",
            "sbg:stageInput": null,
            "type": [
              "null",
              "File"
            ],
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--dbsnp"
            },
            "id": "#db_snp",
            "required": false,
            "sbg:fileTypes": "VCF"
          },
          {
            "sbg:toolDefaultValue": "1",
            "label": "CPU per job",
            "description": "Number of CPUs per job.",
            "sbg:category": "Execution",
            "id": "#cpu_per_job",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Contamination fraction",
            "sbg:altPrefix": "-contamination",
            "description": "Fraction of contamination in sequencing data (for all samples) to aggressively remove",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--contamination_fraction_to_filter"
            },
            "id": "#contamination_fraction",
            "required": false,
            "type": [
              "null",
              "float"
            ]
          },
          {
            "label": "Contamination file",
            "sbg:altPrefix": "-contaminationFile",
            "description": "Tab-separated File containing fraction of contamination in sequencing data (per sample) to aggressively remove. Format should be SampleID><TAB><Contamination>\" (Contamination is double) per line; No header.",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--contamination_fraction_per_sample_file"
            },
            "id": "#contamination_file",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          },
          {
            "label": "Consensus mode",
            "sbg:altPrefix": "-consensus",
            "description": "1000G consensus mode",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--consensus"
            },
            "id": "#consensus_mode",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Comparison VCF file",
            "sbg:altPrefix": "-comp",
            "description": "Comparison VCF file",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--comp"
            },
            "id": "#comp_vcf",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          },
          {
            "label": "BQSR",
            "sbg:altPrefix": "-BQSR",
            "description": "Any recalibration table without a specific role.",
            "sbg:category": "Input Files",
            "sbg:fileTypes": "GRP, TXT, TABLE",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--BQSR",
              "itemSeparator": null
            },
            "id": "#bqsr",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          },
          {
            "sbg:toolDefaultValue": "40.0",
            "label": "BAQ Gap Open Penalty",
            "sbg:altPrefix": "-baqGOP",
            "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--baqGapOpenPenalty",
              "itemSeparator": null
            },
            "id": "#baq_gap_open_penalty",
            "required": false,
            "type": [
              "null",
              "float"
            ]
          },
          {
            "sbg:toolDefaultValue": "OFF",
            "label": "BAQ Calculation Type",
            "sbg:altPrefix": "-baq",
            "description": "Type of BAQ calculation to apply in the engine.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--baq",
              "itemSeparator": null
            },
            "id": "#baq",
            "required": false,
            "type": [
              "null",
              {
                "symbols": [
                  "OFF",
                  "CALCULATE_AS_NECESSARY",
                  "RECALCULATE"
                ],
                "name": "baq",
                "type": "enum"
              }
            ]
          },
          {
            "label": "Band pass sigma",
            "sbg:altPrefix": "-bandPassSigma",
            "description": "The sigma of the band pass filter Gaussian kernel; if not provided defaults to Walker annotated default",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--bandPassSigma"
            },
            "id": "#band_pass",
            "required": false,
            "type": [
              "null",
              "string"
            ]
          },
          {
            "label": "Write haplotypes to specified BAM",
            "sbg:altPrefix": "-bamout",
            "description": "File to which assembled haplotypes should be written",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--bamOutput"
            },
            "id": "#bam_out",
            "required": false,
            "type": [
              "null",
              "string"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Bam compression",
            "sbg:altPrefix": "-compress",
            "description": "Compression level to use for writing BAM files (0 - 9, higher is more compressed).",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--bam_compression",
              "itemSeparator": null
            },
            "id": "#bam_compression",
            "required": false,
            "type": [
              "null",
              {
                "symbols": [
                  "0",
                  "1",
                  "2",
                  "3",
                  "4",
                  "5",
                  "6",
                  "7",
                  "8",
                  "9"
                ],
                "name": "bam_compression",
                "type": "enum"
              }
            ]
          },
          {
            "label": "Apply groups of annotaitons",
            "sbg:altPrefix": "-G",
            "description": "One or more classes/groups of annotations to apply to variant calls",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--group",
              "itemSeparator": null
            },
            "id": "#annotation_groups",
            "required": false,
            "type": [
              "null",
              {
                "items": "string",
                "name": "annotation_groups",
                "type": "array"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "[]",
            "label": "Annotation",
            "sbg:altPrefix": "-A",
            "description": "One or more specific annotations to apply to variant calls.",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--annotation",
              "itemSeparator": null
            },
            "id": "#annotation",
            "required": false,
            "type": [
              "null",
              {
                "items": "string",
                "name": "annotation",
                "type": "array"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Annotate Nda",
            "sbg:altPrefix": "-nda",
            "description": "If provided, we will annotate records with the number of alternate alleles that were discovered (but not necessarily genotyped) at a given site.",
            "sbg:category": "Genotype GVCFs",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--annotateNDA",
              "itemSeparator": null
            },
            "id": "#annotate_nda",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Annotate all sites with PLs",
            "sbg:altPrefix": "-allSitePLs",
            "description": "Annotate all sites with PLs",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--allSitePLs"
            },
            "id": "#annotate_all_sites_PLs",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Allow Potentially Misencoded Quals",
            "sbg:altPrefix": "-allowPotentiallyMisencodedQuals",
            "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--allow_potentially_misencoded_quality_scores",
              "itemSeparator": null
            },
            "id": "#allow_potentailly_misencoded_quals",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Allow non-unique K-mers in graph",
            "sbg:altPrefix": "-allowNonUniqueKmersInRef",
            "description": "Allow graphs that have non-unique kmers in the reference",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--allowNonUniqueKmersInRef"
            },
            "id": "#allow_non_unique_kmers",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Alleles",
            "sbg:altPrefix": "-alleles",
            "description": "The set of alleles at which to genotype when --genotyping_mode is GENOTYPE_GIVEN_ALLELES",
            "sbg:category": "Haplotype Caller",
            "sbg:fileTypes": "BCF2,VCF,VCF3",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--alleles",
              "itemSeparator": null
            },
            "id": "#alleles",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Include non-variants",
            "sbg:altPrefix": "-allSites",
            "description": "Include loci found to be non-variant after genotyping.",
            "sbg:category": "Genotype GVCFs",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--includeNonVariantSites",
              "itemSeparator": null
            },
            "id": "#all_sites",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Active region list file",
            "sbg:altPrefix": "-AR",
            "description": "Use this interval list file as the active regions to process",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--activeRegionIn"
            },
            "id": "#active_region_list",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          },
          {
            "label": "Output IGV formatted file",
            "sbg:altPrefix": "-ARO",
            "description": "Output the active region to this IGV formatted file",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--activeRegionOut"
            },
            "id": "#active_reg_output_file_name",
            "required": false,
            "type": [
              "null",
              "string"
            ]
          },
          {
            "label": "Active region extension",
            "sbg:altPrefix": "-activeRegionExtension",
            "description": "The active region extension; if not provided defaults to Walker annotated default",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--activeRegionExtension"
            },
            "id": "#active_reg_ext",
            "required": false,
            "type": [
              "null",
              "string"
            ]
          }
        ],
        "sbg:modifiedOn": 1469724972,
        "stdout": "",
        "cwlVersion": "sbg:draft-2",
        "x": 1143.764780750738,
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ]
          }
        ],
        "arguments": [
          {
            "separate": true,
            "prefix": "--out",
            "valueFrom": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  if($job.inputs.emit_ref_confidence == 'GVCF')\n  {\n    read_name = [].concat($job.inputs.reads)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  \tread_namebase = read_name.slice(0, read_name.length-1).join('.')\n  \treturn read_namebase + '.g.vcf'\n  }\n  else\n  \tread_name = [].concat($job.inputs.reads)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  \tread_namebase = read_name.slice(0, read_name.length-1).join('.')\n  \treturn read_namebase + '.vcf'\n}"
            }
          }
        ],
        "sbg:toolkitVersion": "3.5",
        "sbg:validationErrors": [],
        "sbg:createdBy": "elehnert",
        "label": "GATK HaplotypeCaller",
        "temporaryFailCodes": [],
        "sbg:id": "elehnert/cgc-academic-user-gatk-access/gatk-3-5-haplotypecaller/22",
        "sbg:cmdPreview": "java -Xmx2048M -jar /opt/GenomeAnalysisTK_3.5-0-g36282e4.jar --analysis_type HaplotypeCaller --reference_sequence example.fasta --input_file /path/example.bam --out example.g.vcf",
        "baseCommand": [
          "java",
          {
            "class": "Expression",
            "engine": "#cwl-js-engine",
            "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }\n  return '-Xmx2048M'\n}"
          },
          "-jar",
          "/opt/GenomeAnalysisTK_3.5-0-g36282e4.jar",
          "--analysis_type",
          "HaplotypeCaller"
        ],
        "id": "elehnert/cgc-academic-user-gatk-access/gatk-3-5-haplotypecaller/22",
        "sbg:job": {
          "inputs": {
            "consensus_mode": true,
            "bqsr": {
              "class": "File",
              "secondaryFiles": [],
              "size": 0,
              "path": "/path/to/bqsr.ext"
            },
            "active_reg_ext": "active_reg_ext",
            "gq_threshold": [
              0
            ],
            "out_mode": "EMIT_VARIANTS_ONLY",
            "comp_vcf": {
              "class": "File",
              "secondaryFiles": [],
              "size": 0,
              "path": "/path/to/comp_vcf.ext"
            },
            "allow_non_unique_kmers": true,
            "annotation_groups": [
              "annotation_groups"
            ],
            "band_pass": "band_pass",
            "min_reads_per_algn": 0,
            "use_allele_trigger": true,
            "emit_ref_confidence": "GVCF",
            "min_graph_pruning": "min_graph_pruning",
            "max_reads_active_reg": 0,
            "max_haplotypes": 0,
            "no_active_region_trim": true,
            "max_active_region_size": 0,
            "bam_out": "bam_out",
            "disable_opt": true,
            "reads": [
              {
                "path": "/path/example.bam"
              }
            ],
            "min_pruning_threshold": "min_pruning_threshold",
            "debug": true,
            "reference": {
              "path": "example.fasta"
            },
            "contamination_file": {
              "class": "File",
              "secondaryFiles": [],
              "size": 0,
              "path": "/path/to/contamination_fraction.ext"
            },
            "output_raw_activity": "output_raw_activity",
            "dont_increase_kmers": true,
            "annotate_all_sites_PLs": true,
            "genotyping_mode": "DISCOVERY",
            "mismapping_rate": 0,
            "min_length": 0,
            "db_snp": {
              "class": "File",
              "secondaryFiles": [],
              "size": 0,
              "path": "/path/to/db_snp.ext"
            },
            "kmer_size": 0,
            "gap_penalty": 0,
            "write_to_bam": "ALL_POSSIBLE_HAPLOTYPES",
            "active_reg_output_file_name": "active_reg_output_file_name",
            "no_soft_clipped": true,
            "disable_phasing": true,
            "graph_file": "graph_file",
            "exclude_ann": [
              "exclude_ann"
            ],
            "force_active": true,
            "alleles": {
              "class": "File",
              "secondaryFiles": [],
              "size": 0,
              "path": "/path/to/alleles.ext"
            },
            "use_filtered_reads": true,
            "active_region_list": {
              "class": "File",
              "secondaryFiles": [],
              "size": 0,
              "path": "/path/to/active_region_list.ext"
            },
            "indel_size": 0,
            "min_base_q_scores": 0,
            "contamination_fraction": 0,
            "pcr_indel_model": "NONE",
            "sample_name": "sample_name",
            "prob_threshold": 0
          },
          "allocatedResources": {
            "cpu": 1,
            "mem": 2048
          }
        },
        "description": "###**Overview**  \n\nThe HaplotypeCaller is capable of calling SNPs and indels simultaneously via local de-novo assembly of haplotypes in an active region. In other words, whenever the program encounters a region showing signs of variation, it discards the existing mapping information and completely reassembles the reads in that region. This allows the HaplotypeCaller to be more accurate when calling regions that are traditionally difficult to call, for example when they contain different types of variants close to each other. It also makes the HaplotypeCaller much better at calling indels than position-based callers like UnifiedGenotyper.  \n\nIn the so-called GVCF mode used for scalable variant calling in DNA sequence data, HaplotypeCaller runs per-sample to generate an intermediate genomic gVCF (gVCF), which can then be used for joint genotyping of multiple samples in a very efficient way, which enables rapid incremental processing of samples as they roll off the sequencer, as well as scaling to very large cohort sizes (e.g. the 92K exomes of ExAC).  \n\nIn addition, HaplotypeCaller is able to handle non-diploid organisms as well as pooled experiment data. Note however that the algorithms used to calculate variant likelihoods is not well suited to extreme allele frequencies (relative to ploidy) so its use is not recommended for somatic (cancer) variant discovery. For that purpose, use MuTect2 instead.  \n\nFinally, HaplotypeCaller is also able to correctly handle the splice junctions that make RNAseq a challenge for most variant callers.  \n\n###**Input**  \nInput bam file(s) from which to make calls\n\n###**Output**  \nEither a VCF or gVCF file with raw, unfiltered SNP and indel calls. Regular VCFs must be filtered either by variant recalibration (best) or hard-filtering before use in downstream analyses. If using the reference-confidence model workflow for cohort analysis, the output is a GVCF file that must first be run through GenotypeGVCFs and then filtering before further analysis.\n\n###**Usage examples**  \nThese are example commands that show how to run HaplotypeCaller for typical use cases. \nSquare brackets (\"[ ]\") indicate optional arguments. Note that parameter values shown here may not be the latest recommended; see the Best Practices documentation for detailed recommendations.\n\nSingle-sample GVCF calling on DNAseq (for ***-ERC GVCF*** cohort analysis workflow)  \n\n    java -jar GenomeAnalysisTK.jar \\  \n         -R reference.fasta \\  \n         -T HaplotypeCaller \\  \n         -I sample1.bam \\  \n         --emitRefConfidence GVCF \\  \n         [--dbsnp dbSNP.vcf] \\  \n         [-L targets.interval_list] \\  \n         -o output.raw.snps.indels.g.vcf  \n\nVariant-only calling on DNAseq  \n\n    java -jar GenomeAnalysisTK.jar \\  \n         -R reference.fasta \\  \n         -T HaplotypeCaller \\  \n         -I sample1.bam [-I sample2.bam ...] \\  \n          [--dbsnp dbSNP.vcf] \\  \n          [-stand_call_conf 30] \\  \n          [-stand_emit_conf 10] \\  \n          [-L targets.interval_list] \\  \n          -o output.raw.snps.indels.vcf  \n\nVariant-only calling on RNAseq  \n\n     java -jar GenomeAnalysisTK.jar \\  \n          -R reference.fasta \\  \n          -T HaplotypeCaller \\  \n          -I sample1.bam \\  \n          [--dbsnp dbSNP.vcf] \\  \n          -stand_call_conf 20 \\  \n          -stand_emit_conf 20 \\  \n          -o output.raw.snps.indels.vcf  \n\n###**IMPORTANT NOTICE**  \n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding *.fai* (fasta index) and *.dict* (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the '***SBG FASTA Indices***' tool within your GATK based workflow before using any of the GATK tools.",
        "outputs": [
          {
            "label": "VCF",
            "description": "A raw, unfiltered, highly specific callset in VCF format.",
            "sbg:fileTypes": "VCF",
            "type": [
              "null",
              {
                "items": "File",
                "name": "vcf_output",
                "type": "array"
              }
            ],
            "id": "#vcf_output",
            "outputBinding": {
              "glob": "*.vcf",
              "sbg:inheritMetadataFrom": "#reads"
            }
          }
        ],
        "sbg:links": [
          {
            "label": "Homepage",
            "id": "https://www.broadinstitute.org/gatk/index.php"
          },
          {
            "label": "Source code",
            "id": "https://github.com/broadgsa/gatk-protected"
          },
          {
            "label": "Wiki",
            "id": "https://www.broadinstitute.org/gatk/guide/tooldocs/"
          },
          {
            "label": "Download",
            "id": "https://www.broadinstitute.org/gatk/download/"
          },
          {
            "label": "Publication",
            "id": "https://www.broadinstitute.org/gatk/about/#in-the-literature"
          },
          {
            "label": "Documentation",
            "id": "https://www.broadinstitute.org/gatk/guide/tooldocs/org_broadinstitute_gatk_tools_walkers_haplotypecaller_HaplotypeCaller.php"
          }
        ],
        "sbg:revision": 22,
        "sbg:latestRevision": 22,
        "sbg:sbgMaintained": false,
        "sbg:project": "elehnert/cgc-academic-user-gatk-access",
        "class": "CommandLineTool",
        "sbg:image_url": null,
        "successCodes": [],
        "sbg:contributors": [
          "elehnert"
        ],
        "appUrl": "/u/elehnert/cgc-academic-user-gatk-access/apps/#elehnert/cgc-academic-user-gatk-access/gatk-3-5-haplotypecaller/22",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "elehnert",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1469724971,
            "sbg:revision": 0
          },
          {
            "sbg:modifiedBy": "elehnert",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1469724971,
            "sbg:revision": 1
          },
          {
            "sbg:modifiedBy": "elehnert",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1469724971,
            "sbg:revision": 2
          },
          {
            "sbg:modifiedBy": "elehnert",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1469724971,
            "sbg:revision": 3
          },
          {
            "sbg:modifiedBy": "elehnert",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1469724971,
            "sbg:revision": 4
          },
          {
            "sbg:modifiedBy": "elehnert",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1469724971,
            "sbg:revision": 5
          },
          {
            "sbg:modifiedBy": "elehnert",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1469724971,
            "sbg:revision": 6
          },
          {
            "sbg:modifiedBy": "elehnert",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1469724971,
            "sbg:revision": 7
          },
          {
            "sbg:modifiedBy": "elehnert",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1469724971,
            "sbg:revision": 8
          },
          {
            "sbg:modifiedBy": "elehnert",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1469724971,
            "sbg:revision": 9
          },
          {
            "sbg:modifiedBy": "elehnert",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1469724972,
            "sbg:revision": 10
          },
          {
            "sbg:modifiedBy": "elehnert",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1469724972,
            "sbg:revision": 11
          },
          {
            "sbg:modifiedBy": "elehnert",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1469724972,
            "sbg:revision": 12
          },
          {
            "sbg:modifiedBy": "elehnert",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1469724972,
            "sbg:revision": 13
          },
          {
            "sbg:modifiedBy": "elehnert",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1469724972,
            "sbg:revision": 14
          },
          {
            "sbg:modifiedBy": "elehnert",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1469724972,
            "sbg:revision": 15
          },
          {
            "sbg:modifiedBy": "elehnert",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1469724972,
            "sbg:revision": 16
          },
          {
            "sbg:modifiedBy": "elehnert",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1469724972,
            "sbg:revision": 17
          },
          {
            "sbg:modifiedBy": "elehnert",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1469724972,
            "sbg:revision": 18
          },
          {
            "sbg:modifiedBy": "elehnert",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1469724972,
            "sbg:revision": 19
          },
          {
            "sbg:modifiedBy": "elehnert",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1469724972,
            "sbg:revision": 20
          },
          {
            "sbg:modifiedBy": "elehnert",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1469724972,
            "sbg:revision": 21
          },
          {
            "sbg:modifiedBy": "elehnert",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1469724972,
            "sbg:revision": 22
          }
        ],
        "sbg:categories": [
          "Variant-Calling"
        ],
        "sbg:toolAuthor": "Broad Institute",
        "sbg:license": "MIT License",
        "sbg:createdOn": 1469724971,
        "sbg:toolkit": "GATK",
        "stdin": "",
        "y": 372.35296498532995,
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerImageId": "3c3b8e0ed4e5",
            "dockerPull": "images.sbgenomics.com/aleksandar_mihajlovic/gatk3:3.5.0"
          },
          {
            "value": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  if($job.inputs.cpu_per_job){\n  \treturn $job.inputs.cpu_per_job\n  }\n  return 1\n}"
            },
            "class": "sbg:CPURequirement"
          },
          {
            "value": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}"
            },
            "class": "sbg:MemRequirement"
          }
        ]
      },
      "sbg:y": 372.35296498532995,
      "id": "#GATK_HaplotypeCaller"
    },
    {
      "inputs": [
        {
          "source": [
            "#reference"
          ],
          "id": "#SBG_FASTA_Indices.reference"
        }
      ],
      "outputs": [
        {
          "id": "#SBG_FASTA_Indices.fasta_reference"
        },
        {
          "id": "#SBG_FASTA_Indices.fasta_index"
        },
        {
          "id": "#SBG_FASTA_Indices.fasta_dict"
        }
      ],
      "sbg:x": 358.05883561863624,
      "run": {
        "sbg:modifiedBy": "djordje_klisic",
        "inputs": [
          {
            "label": "FASTA file",
            "description": "FASTA file to be indexed",
            "sbg:stageInput": "link",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--REFERENCE"
            },
            "id": "#reference",
            "required": true,
            "type": [
              "File"
            ]
          }
        ],
        "sbg:modifiedOn": 1459163478,
        "stdout": "",
        "cwlVersion": "sbg:draft-2",
        "x": 358.05883561863624,
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ]
          }
        ],
        "arguments": [
          {
            "separate": true,
            "valueFrom": "--dict"
          },
          {
            "separate": true,
            "valueFrom": "--fai"
          }
        ],
        "sbg:validationErrors": [],
        "sbg:createdBy": "sanja.mijalkovic",
        "label": "SBG FASTA Indices",
        "temporaryFailCodes": [],
        "sbg:id": "admin/sbg-public-data/sbg-fasta-indices/4",
        "sbg:cmdPreview": "python /opt/sbg-fasta-indices.py --REFERENCE /path/to/reference.ext  --dict  --fai",
        "baseCommand": [
          "python",
          "/opt/sbg-fasta-indices.py"
        ],
        "id": "admin/sbg-public-data/sbg-fasta-indices/4",
        "sbg:job": {
          "inputs": {
            "reference": {
              "class": "File",
              "secondaryFiles": [],
              "size": 0,
              "path": "/path/to/reference.ext"
            }
          },
          "allocatedResources": {
            "cpu": 1,
            "mem": 2500
          }
        },
        "description": "Tool allows creating FASTA dictionary and index simultaneously which is necessary for running GATK tools. This version of tool for indexing uses SAMtools faidx command (toolkit version0.1.19), while for the FASTA dictionary is used Picard CreateFastaDictionary (toolkit version 1.140)",
        "outputs": [
          {
            "label": "Reference",
            "fileTypes": "FASTA, FA",
            "sbg:fileTypes": "FASTA",
            "type": [
              "null",
              "File"
            ],
            "id": "#fasta_reference",
            "outputBinding": {
              "glob": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  return $job.inputs.reference.path.split(\"/\").pop()\n}"
              },
              "secondaryFiles": [
                ".fai",
                "^.dict"
              ],
              "sbg:inheritMetadataFrom": "#reference"
            }
          },
          {
            "label": "FASTA Index",
            "id": "#fasta_index",
            "sbg:fileTypes": "FAI",
            "outputBinding": {
              "glob": "*.fai",
              "sbg:metadata": {}
            },
            "type": [
              "null",
              "File"
            ]
          },
          {
            "label": "FASTA Dictionary",
            "id": "#fasta_dict",
            "sbg:fileTypes": "DICT",
            "outputBinding": {
              "glob": "*.dict",
              "sbg:metadata": {}
            },
            "type": [
              "null",
              "File"
            ]
          }
        ],
        "sbg:revision": 4,
        "sbg:latestRevision": 4,
        "sbg:sbgMaintained": false,
        "sbg:project": "admin/sbg-public-data",
        "class": "CommandLineTool",
        "sbg:image_url": null,
        "successCodes": [],
        "sbg:contributors": [
          "sanja.mijalkovic",
          "djordje_klisic"
        ],
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "sanja.mijalkovic",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1448043983,
            "sbg:revision": 0
          },
          {
            "sbg:modifiedBy": "djordje_klisic",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1459163478,
            "sbg:revision": 1
          },
          {
            "sbg:modifiedBy": "djordje_klisic",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1459163478,
            "sbg:revision": 2
          },
          {
            "sbg:modifiedBy": "djordje_klisic",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1459163478,
            "sbg:revision": 3
          },
          {
            "sbg:modifiedBy": "djordje_klisic",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1459163478,
            "sbg:revision": 4
          }
        ],
        "sbg:categories": [
          "Indexing"
        ],
        "sbg:toolAuthor": "Sanja Mijalkovic, Seven Bridges Genomics, <sanja.mijalkovic@sbgenomics.com>",
        "sbg:license": "Apache License 2.0",
        "sbg:createdOn": 1448043983,
        "sbg:toolkit": "SBGTools",
        "stdin": "",
        "y": 72.05882647458247,
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerImageId": "b177f5bd06db",
            "dockerPull": "images.sbgenomics.com/djordje_klisic/sbg-fasta-indices:1.0"
          },
          {
            "value": 1,
            "class": "sbg:CPURequirement"
          },
          {
            "value": 2500,
            "class": "sbg:MemRequirement"
          }
        ]
      },
      "sbg:y": 72.05882647458247,
      "id": "#SBG_FASTA_Indices"
    },
    {
      "inputs": [
        {
          "source": [
            "#GATK_HaplotypeCaller.vcf_output"
          ],
          "id": "#GATK_VariantFiltration.variants"
        },
        {
          "id": "#GATK_VariantFiltration.variant_index_type"
        },
        {
          "id": "#GATK_VariantFiltration.variant_index_parameter"
        },
        {
          "id": "#GATK_VariantFiltration.validation_strictness"
        },
        {
          "id": "#GATK_VariantFiltration.use_original_qualities"
        },
        {
          "id": "#GATK_VariantFiltration.use_legacy_downsampler"
        },
        {
          "id": "#GATK_VariantFiltration.unsafe"
        },
        {
          "id": "#GATK_VariantFiltration.threads_per_job"
        },
        {
          "id": "#GATK_VariantFiltration.tag"
        },
        {
          "id": "#GATK_VariantFiltration.sites_only"
        },
        {
          "id": "#GATK_VariantFiltration.simplify_bam"
        },
        {
          "id": "#GATK_VariantFiltration.show_bam_list"
        },
        {
          "id": "#GATK_VariantFiltration.sample_rename_mapping_file"
        },
        {
          "id": "#GATK_VariantFiltration.remove_program_records"
        },
        {
          "source": [
            "#SBG_FASTA_Indices.fasta_reference"
          ],
          "id": "#GATK_VariantFiltration.reference"
        },
        {
          "id": "#GATK_VariantFiltration.refactor_NDN_cigar_string"
        },
        {
          "id": "#GATK_VariantFiltration.read_group_black_list"
        },
        {
          "id": "#GATK_VariantFiltration.read_filter"
        },
        {
          "id": "#GATK_VariantFiltration.quantize_quals"
        },
        {
          "id": "#GATK_VariantFiltration.preserve_qscores_less_than"
        },
        {
          "id": "#GATK_VariantFiltration.phone_home"
        },
        {
          "id": "#GATK_VariantFiltration.performance_log"
        },
        {
          "id": "#GATK_VariantFiltration.pedigree_validation_type"
        },
        {
          "id": "#GATK_VariantFiltration.pedigree_string"
        },
        {
          "id": "#GATK_VariantFiltration.pedigree"
        },
        {
          "id": "#GATK_VariantFiltration.num_bam_file_handles"
        },
        {
          "id": "#GATK_VariantFiltration.non_deterministic_random_seed"
        },
        {
          "id": "#GATK_VariantFiltration.no_call"
        },
        {
          "id": "#GATK_VariantFiltration.never_trim_vcf_format_field"
        },
        {
          "id": "#GATK_VariantFiltration.missing_values_in_expressions_should_evaluate_as_failing"
        },
        {
          "id": "#GATK_VariantFiltration.memory_per_job"
        },
        {
          "id": "#GATK_VariantFiltration.memory_overhead_per_job"
        },
        {
          "id": "#GATK_VariantFiltration.max_runtime_units"
        },
        {
          "id": "#GATK_VariantFiltration.max_runtime"
        },
        {
          "id": "#GATK_VariantFiltration.mask_name"
        },
        {
          "id": "#GATK_VariantFiltration.mask_extension"
        },
        {
          "id": "#GATK_VariantFiltration.mask"
        },
        {
          "id": "#GATK_VariantFiltration.keep_program_records"
        },
        {
          "id": "#GATK_VariantFiltration.invert_selection"
        },
        {
          "id": "#GATK_VariantFiltration.invert_criteria"
        },
        {
          "id": "#GATK_VariantFiltration.invalidate_previous_filters"
        },
        {
          "id": "#GATK_VariantFiltration.intervals_file"
        },
        {
          "id": "#GATK_VariantFiltration.intervals"
        },
        {
          "id": "#GATK_VariantFiltration.interval_set_rule"
        },
        {
          "id": "#GATK_VariantFiltration.interval_padding"
        },
        {
          "id": "#GATK_VariantFiltration.interval_merging"
        },
        {
          "id": "#GATK_VariantFiltration.global_q_score_prior"
        },
        {
          "id": "#GATK_VariantFiltration.genotype_filter_name"
        },
        {
          "id": "#GATK_VariantFiltration.genotype_filter_expression"
        },
        {
          "id": "#GATK_VariantFiltration.generate_md5"
        },
        {
          "id": "#GATK_VariantFiltration.gatk_key"
        },
        {
          "id": "#GATK_VariantFiltration.fix_misencoded_quals"
        },
        {
          "id": "#GATK_VariantFiltration.filter_not_in_mask"
        },
        {
          "id": "#GATK_VariantFiltration.filter_name",
          "default": [
            "FS",
            "QD"
          ]
        },
        {
          "id": "#GATK_VariantFiltration.filter_expression",
          "default": [
            "FS > 30.0",
            "QD < 2.0"
          ]
        },
        {
          "id": "#GATK_VariantFiltration.exclude_intervals"
        },
        {
          "id": "#GATK_VariantFiltration.emit_original_quals"
        },
        {
          "id": "#GATK_VariantFiltration.downsampling_type"
        },
        {
          "id": "#GATK_VariantFiltration.downsample_to_fraction"
        },
        {
          "id": "#GATK_VariantFiltration.downsample_to_coverage"
        },
        {
          "id": "#GATK_VariantFiltration.disable_read_filter"
        },
        {
          "id": "#GATK_VariantFiltration.disable_radnomization"
        },
        {
          "id": "#GATK_VariantFiltration.disable_indel_quals"
        },
        {
          "id": "#GATK_VariantFiltration.disable_bam_indexing"
        },
        {
          "id": "#GATK_VariantFiltration.disable_auto_index"
        },
        {
          "id": "#GATK_VariantFiltration.default_base_qualities"
        },
        {
          "id": "#GATK_VariantFiltration.cpu_per_job"
        },
        {
          "id": "#GATK_VariantFiltration.cluster_window_size",
          "default": 35
        },
        {
          "id": "#GATK_VariantFiltration.cluster_size",
          "default": 3
        },
        {
          "id": "#GATK_VariantFiltration.bqsr"
        },
        {
          "id": "#GATK_VariantFiltration.baq_gap_open_penalty"
        },
        {
          "id": "#GATK_VariantFiltration.baq"
        },
        {
          "id": "#GATK_VariantFiltration.bam_compression"
        },
        {
          "id": "#GATK_VariantFiltration.allow_potentailly_misencoded_quals"
        }
      ],
      "outputs": [
        {
          "id": "#GATK_VariantFiltration.filtered_vcf"
        }
      ],
      "sbg:x": 1259.4709021809535,
      "run": {
        "sbg:modifiedBy": "kb472",
        "inputs": [
          {
            "label": "Variants",
            "sbg:altPrefix": "-V",
            "description": "Input VCF file.",
            "sbg:category": "Input Files",
            "sbg:fileTypes": "VCF",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--variant",
              "itemSeparator": null
            },
            "id": "#variants",
            "required": true,
            "type": [
              {
                "items": "File",
                "type": "array"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Variant index type",
            "sbg:altPrefix": "-variant_index_type",
            "description": "Type of IndexCreator to use for VCF/BCF indices.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--variant_index_type",
              "itemSeparator": " "
            },
            "id": "#variant_index_type",
            "required": false,
            "type": [
              "null",
              {
                "symbols": [
                  "DYNAMIC_SEEK",
                  "DYNAMIC_SIZE",
                  "LINEAR",
                  "INTERVAL"
                ],
                "name": "variant_index_type",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "-1",
            "label": "Variant index parameter",
            "sbg:altPrefix": "-variant_index_parameter",
            "description": "Parameter to pass to the VCF/BCF IndexCreator.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--variant_index_parameter",
              "itemSeparator": " "
            },
            "id": "#variant_index_parameter",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "SILENT",
            "label": "Validation Strictness",
            "sbg:altPrefix": "-S",
            "description": "How strict should we be with validation.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--validation_strictness",
              "itemSeparator": " ",
              "valueFrom": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  if (!$job.inputs.validation_strictness){\n  \treturn 'SILENT'\n  }\n  else\n    return $job.inputs.validation_strictness\n}"
              }
            },
            "id": "#validation_strictness",
            "required": false,
            "type": [
              "null",
              {
                "symbols": [
                  "SILENT",
                  "LENIENT",
                  "STRICT"
                ],
                "name": "validation_strictness",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Use Original Qualities",
            "sbg:altPrefix": "-OQ",
            "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--useOriginalQualities",
              "itemSeparator": " "
            },
            "id": "#use_original_qualities",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Use Legacy Downsampler",
            "sbg:altPrefix": "-use_legacy_downsampler",
            "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--use_legacy_downsampler",
              "itemSeparator": " "
            },
            "id": "#use_legacy_downsampler",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Unsafe",
            "sbg:altPrefix": "-U",
            "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--unsafe",
              "itemSeparator": " ",
              "valueFrom": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  if (!$job.inputs.unsafe){\n  \treturn 'LENIENT_VCF_PROCESSING'\n  }\n  else\n    return $job.inputs.unsafe\n}"
              }
            },
            "id": "#unsafe",
            "required": false,
            "type": [
              "null",
              {
                "symbols": [
                  "ALLOW_UNINDEXED_BAM",
                  "ALLOW_UNSET_BAM_SORT_ORDER",
                  "NO_READ_ORDER_VERIFICATION",
                  "ALLOW_SEQ_DICT_INCOMPATIBILITY",
                  "LENIENT_VCF_PROCESSING",
                  "ALL",
                  "ALLOW_N_CIGAR_READS"
                ],
                "name": "unsafe",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "4",
            "label": "Threads per job",
            "sbg:altPrefix": null,
            "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used.",
            "sbg:category": "Execution",
            "id": "#threads_per_job",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Tag",
            "sbg:altPrefix": "-tag",
            "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--tag",
              "itemSeparator": " "
            },
            "id": "#tag",
            "required": false,
            "type": [
              "null",
              "string"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Siteslo only",
            "sbg:altPrefix": "-sites_only",
            "description": "Just output sites without genotypes (i.e. only the first 8 columns of the VCF).",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--sites_only",
              "itemSeparator": " "
            },
            "id": "#sites_only",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Simplify bam",
            "sbg:altPrefix": "-simplifyBAM",
            "description": "If provided, output BAM files will be simplified to include just key reads for downstream variation discovery analyses (removing duplicates, PF-, non-primary reads), as well stripping all extended tags from the kept reads except the read group identifier.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--simplifyBAM",
              "itemSeparator": " "
            },
            "id": "#simplify_bam",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "BAM list log entry",
            "sbg:altPrefix": "",
            "description": "Emit a log entry (level INFO) containing the full list of sequence data files to be includedin the analysis (including files inside .bam.list files).",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--showFullBamList",
              "itemSeparator": " "
            },
            "id": "#show_bam_list",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Sample rename mapping file",
            "sbg:altPrefix": "-sample_rename_mapping_file",
            "description": "Rename sample IDs on-the-fly at runtime using the provided mapping file.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--sample_rename_mapping_file",
              "itemSeparator": " "
            },
            "id": "#sample_rename_mapping_file",
            "required": false,
            "type": [
              "null",
              "string"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Remove Program Records",
            "sbg:altPrefix": "-rpr",
            "description": "Should we override the Walker's default and remove program records from the SAM header.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--remove_program_records",
              "itemSeparator": " "
            },
            "id": "#remove_program_records",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Reference Genome",
            "sbg:altPrefix": "-R",
            "description": "Reference Genome in FASTA format.",
            "sbg:category": "Input Files",
            "sbg:fileTypes": "FASTA, FA",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--reference_sequence",
              "itemSeparator": " "
            },
            "id": "#reference",
            "required": true,
            "type": [
              "File"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Refactor ndn cigar string",
            "sbg:altPrefix": "-fixNDN",
            "description": "Refactor cigar string with NDN elements to one element.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--refactor_NDN_cigar_string",
              "itemSeparator": " "
            },
            "id": "#refactor_NDN_cigar_string",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "[]",
            "label": "Read Group Black List",
            "sbg:altPrefix": "-rgbl",
            "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--read_group_black_list",
              "itemSeparator": " "
            },
            "id": "#read_group_black_list",
            "required": false,
            "type": [
              "null",
              {
                "items": "string",
                "type": "array"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "[]",
            "label": "Read Filter",
            "sbg:altPrefix": "-rf",
            "description": "Specify filtration criteria to apply to each read individually.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--read_filter",
              "itemSeparator": null
            },
            "id": "#read_filter",
            "required": false,
            "type": [
              "null",
              {
                "items": {
                  "symbols": [
                    "BadCigarFilter",
                    "BadMateFilter",
                    "CountingFilteringIterator.CountingReadFilter",
                    "DuplicateReadFilter",
                    "FailsVendorQualityCheckFilter",
                    "HCMappingQualityFilter",
                    "LibraryReadFilter",
                    "MalformedReadFilter",
                    "MappingQualityFilter",
                    "MappingQualityUnavailableFilter",
                    "MappingQualityZeroFilter",
                    "MateSameStrandFilter",
                    "MaxInsertSizeFilter",
                    "MissingReadGroupFilter",
                    "NoOriginalQualityScoresFilter",
                    "NotPrimaryAlignmentFilter",
                    "OverclippedReadFilter",
                    "Platform454Filter",
                    "PlatformFilter",
                    "PlatformUnitFilter",
                    "ReadGroupBlackListFilter",
                    "ReadLengthFilter",
                    "ReadNameFilter",
                    "ReadStrandFilter",
                    "ReassignMappingQualityFilter",
                    "ReassignOneMappingQualityFilter",
                    "SampleFilter",
                    "SingleReadGroupFilter",
                    "UnmappedReadFilter"
                  ],
                  "name": "read_filter",
                  "type": "enum"
                },
                "type": "array"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Quantize BQ Scores",
            "sbg:altPrefix": "-qq",
            "description": "Quantize quality scores to a given number of levels (with -BQSR).",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--quantize_quals",
              "itemSeparator": " "
            },
            "id": "#quantize_quals",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "6",
            "label": "Preserve Qscores Less Than",
            "sbg:altPrefix": "-preserveQ",
            "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR).",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--preserve_qscores_less_than",
              "itemSeparator": " "
            },
            "id": "#preserve_qscores_less_than",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "STANDARD",
            "label": "Phone Home",
            "sbg:altPrefix": "-et",
            "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--phone_home",
              "itemSeparator": " "
            },
            "id": "#phone_home",
            "required": false,
            "type": [
              "null",
              {
                "symbols": [
                  "NO_ET",
                  "STANDARD"
                ],
                "name": "phone_home",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Runtime performance log",
            "sbg:altPrefix": "-PF",
            "description": "Write GATK runtime performance long. Specify the file name of this log.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--performanceLog",
              "itemSeparator": " "
            },
            "id": "#performance_log",
            "required": false,
            "type": [
              "null",
              "string"
            ]
          },
          {
            "sbg:toolDefaultValue": "STRICT",
            "label": "Pedigree Validation Type",
            "sbg:altPrefix": "-pedValidationType",
            "description": "How strict should we be in validating the pedigree information?.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--pedigreeValidationType",
              "itemSeparator": " "
            },
            "id": "#pedigree_validation_type",
            "required": false,
            "type": [
              "null",
              {
                "symbols": [
                  "STRICT",
                  "SILENT"
                ],
                "name": "pedigree_validation_type",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "[]",
            "label": "Pedigree String",
            "sbg:altPrefix": "-pedString",
            "description": "Pedigree string for samples.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--pedigreeString",
              "itemSeparator": " "
            },
            "id": "#pedigree_string",
            "required": false,
            "type": [
              "null",
              {
                "items": "string",
                "type": "array"
              }
            ]
          },
          {
            "label": "Pedigree file",
            "sbg:altPrefix": "-ped",
            "description": "Pedigree file",
            "sbg:category": "Variant Filtration",
            "sbg:fileTypes": "PED, TXT",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--pedigree"
            },
            "id": "#pedigree",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Num bam file handles",
            "sbg:altPrefix": "-bfh",
            "description": "Total number of BAM file handles to keep open simultaneously.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--num_bam_file_handles",
              "itemSeparator": " "
            },
            "id": "#num_bam_file_handles",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Non Deterministic Random Seed",
            "sbg:altPrefix": "-ndrs",
            "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--nonDeterministicRandomSeed",
              "itemSeparator": " "
            },
            "id": "#non_deterministic_random_seed",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Set Genotypes to NoCall",
            "description": "Set filtered genotypes to NoCall",
            "sbg:category": "Variant Filtration",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--setFilteredGtToNoCall"
            },
            "id": "#no_call",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Never trim vcf format field",
            "sbg:altPrefix": "-writeFullFormat",
            "description": "Always output all the records in VCF FORMAT fields, even if some are missing.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--never_trim_vcf_format_field",
              "itemSeparator": " "
            },
            "id": "#never_trim_vcf_format_field",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Missing Values In Expressions Should Evaluate As Failing",
            "sbg:altPrefix": null,
            "description": "When evaluating the JEXL expressions, missing values should be considered failing the expression.",
            "sbg:category": "Variant Filtration",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--missingValuesInExpressionsShouldEvaluateAsFailing",
              "itemSeparator": " "
            },
            "id": "#missing_values_in_expressions_should_evaluate_as_failing",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "2048",
            "label": "Memory per job",
            "sbg:altPrefix": null,
            "description": "Amount of RAM memory to be used per job.",
            "sbg:category": "Execution",
            "id": "#memory_per_job",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "0",
            "label": "Memory overhead per job",
            "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
            "sbg:category": "Execution",
            "id": "#memory_overhead_per_job",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "MINUTES",
            "label": "Max Runtime Units",
            "sbg:altPrefix": "-maxRuntimeUnits",
            "description": "The TimeUnit for maxRuntime.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--maxRuntimeUnits",
              "itemSeparator": " "
            },
            "id": "#max_runtime_units",
            "required": false,
            "type": [
              "null",
              {
                "symbols": [
                  "NANOSECONDS",
                  "MICROSECONDS",
                  "MILLISECONDS",
                  "SECONDS",
                  "MINUTES",
                  "HOURS",
                  "DAYS"
                ],
                "name": "max_runtime_units",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "-1",
            "label": "Max Runtime",
            "sbg:altPrefix": "-maxRuntime",
            "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--maxRuntime",
              "itemSeparator": " "
            },
            "id": "#max_runtime",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "Mask",
            "label": "Mask Name",
            "sbg:altPrefix": "-maskName",
            "description": "The text to put in the FILTER field if a 'mask' rod is provided and overlaps with a variant call.",
            "sbg:category": "Variant Filtration",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--maskName",
              "itemSeparator": " "
            },
            "id": "#mask_name",
            "required": false,
            "type": [
              "null",
              "string"
            ]
          },
          {
            "sbg:toolDefaultValue": "0",
            "label": "Mask Extension",
            "sbg:altPrefix": "-maskExtend",
            "description": "How many bases beyond records from a provided 'mask' rod should variants be filtered.",
            "sbg:category": "Variant Filtration",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--maskExtension",
              "itemSeparator": " "
            },
            "id": "#mask_extension",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Mask",
            "sbg:altPrefix": "-mask",
            "description": "Input ROD mask.",
            "sbg:category": "Input Files",
            "sbg:fileTypes": "BCF2, BEAGLE, BED, BEDTABLE, EXAMPLEBINARY, GELITEXT, RAWHAPMAP, REFSEQ, SAMPILEUP, SAMREAD, TABLE, VCF, VCF3",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--mask",
              "itemSeparator": " "
            },
            "id": "#mask",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Keep Program Records",
            "sbg:altPrefix": "-kpr",
            "description": "Should we override the Walker's default and keep program records from the SAM header.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--keep_program_records",
              "itemSeparator": " "
            },
            "id": "#keep_program_records",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Invert selection criteria",
            "sbg:altPrefix": "-invfilter",
            "description": "Invert the selection criteria for --filterexpression",
            "sbg:category": "Variant Filtration",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--invertFilterExpression"
            },
            "id": "#invert_selection",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Invert genotype selection criteria",
            "sbg:altPrefix": "-invG_filter",
            "description": "Invert the selection criteria for --genotypeFilterExpression",
            "sbg:category": "Variant Filtration",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--invertGenotypeFilterExpression"
            },
            "id": "#invert_criteria",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Invalidate Previous Filters",
            "sbg:altPrefix": null,
            "description": "Remove previous filters applied to the VCF.",
            "sbg:category": "Variant Filtration",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--invalidatePreviousFilters",
              "itemSeparator": " "
            },
            "id": "#invalidate_previous_filters",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Intervals",
            "sbg:altPrefix": "-L",
            "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file.",
            "sbg:category": "Input Files",
            "sbg:fileTypes": "TXT, BED, VCF",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--intervals",
              "itemSeparator": " "
            },
            "id": "#intervals_file",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Intervals",
            "sbg:altPrefix": "--intervals",
            "description": "One or more genomic intervals over which to operate.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-L",
              "itemSeparator": " "
            },
            "id": "#intervals",
            "required": false,
            "type": [
              "null",
              "string"
            ]
          },
          {
            "sbg:toolDefaultValue": "UNION",
            "label": "Interval Set Rule",
            "sbg:altPrefix": "-isr",
            "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--interval_set_rule",
              "itemSeparator": " "
            },
            "id": "#interval_set_rule",
            "required": false,
            "type": [
              "null",
              {
                "symbols": [
                  "UNION",
                  "INTERSECTION"
                ],
                "name": "interval_set_rule",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "0",
            "label": "Interval Padding",
            "sbg:altPrefix": "-ip",
            "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--interval_padding",
              "itemSeparator": " "
            },
            "id": "#interval_padding",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "ALL",
            "label": "Interval Merging",
            "sbg:altPrefix": "-im",
            "description": "Indicates the interval merging rule we should use for abutting intervals.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--interval_merging",
              "itemSeparator": " "
            },
            "id": "#interval_merging",
            "required": false,
            "type": [
              "null",
              {
                "symbols": [
                  "ALL",
                  "OVERLAPPING_ONLY"
                ],
                "name": "interval_merging",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "-1.0",
            "label": "Global q score prior",
            "sbg:altPrefix": "-globalQScorePrior",
            "description": "Global Qscore Bayesian prior to use for BQSR.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--globalQScorePrior",
              "itemSeparator": " "
            },
            "id": "#global_q_score_prior",
            "required": false,
            "type": [
              "null",
              "float"
            ]
          },
          {
            "label": "Genotype filter name",
            "sbg:altPrefix": "-G_filterName",
            "description": "Names to use for the list of sample/genotype filters (must be a 1-to-1 mapping); this name is put in the FILTER field for variants that get filtered",
            "sbg:category": "Variant Filtration",
            "id": "#genotype_filter_name",
            "required": false,
            "type": [
              "null",
              {
                "items": "string",
                "type": "array"
              }
            ]
          },
          {
            "label": "Genotype filter expression",
            "sbg:altPrefix": "-G_filter",
            "description": "One or more expression used with FORMAT (sample/genotype-level) fields to filter (see documentation guide for more info)",
            "sbg:category": "Variant Filtration",
            "id": "#genotype_filter_expression",
            "required": false,
            "type": [
              "null",
              {
                "items": "string",
                "type": "array"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Generate MD5",
            "sbg:altPrefix": "",
            "description": "Enable on-the-fly creation of md5s for output BAM files.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--generate_md5",
              "itemSeparator": " "
            },
            "id": "#generate_md5",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Gatk key",
            "sbg:altPrefix": "-K",
            "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
            "sbg:category": "Input Files",
            "sbg:fileTypes": "KEY, LICENSE",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--gatk_key",
              "itemSeparator": " "
            },
            "id": "#gatk_key",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Fix Misencoded Quals",
            "sbg:altPrefix": "-fixMisencodedQuals",
            "description": "Fix mis-encoded base quality scores.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--fix_misencoded_quality_scores",
              "itemSeparator": " "
            },
            "id": "#fix_misencoded_quals",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Filter not in mask",
            "sbg:altPrefix": "-filterNotInMask",
            "description": "Filter records Not in given input mask",
            "sbg:category": "Variant Filtration",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--filterNotInMask"
            },
            "id": "#filter_not_in_mask",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "FIlter name",
            "sbg:altPrefix": "-filterName",
            "description": "Names to use for the list of filters",
            "sbg:category": "Variant Filtration",
            "id": "#filter_name",
            "required": false,
            "type": [
              "null",
              {
                "items": "string",
                "type": "array"
              }
            ]
          },
          {
            "label": "Filter expression",
            "sbg:altPrefix": "-filter",
            "description": "One or more expression used with INFO fields to filter",
            "sbg:category": "Variant Filtration",
            "id": "#filter_expression",
            "required": false,
            "type": [
              "null",
              {
                "items": "string",
                "type": "array"
              }
            ]
          },
          {
            "label": "Exclude Intervals",
            "sbg:altPrefix": "-XL",
            "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file.",
            "sbg:category": "Input Files",
            "sbg:fileTypes": "TXT, BED, VCF",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--excludeIntervals",
              "itemSeparator": " "
            },
            "id": "#exclude_intervals",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Emit Original Quals",
            "sbg:altPrefix": "-EOQ",
            "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR).",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--emit_original_quals",
              "itemSeparator": " "
            },
            "id": "#emit_original_quals",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Downsampling Type",
            "sbg:altPrefix": "-dt",
            "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--downsampling_type",
              "itemSeparator": " "
            },
            "id": "#downsampling_type",
            "required": false,
            "type": [
              "null",
              {
                "symbols": [
                  "NONE",
                  "ALL_READS",
                  "BY_SAMPLE"
                ],
                "name": "downsampling_type",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Downsample to Fraction",
            "sbg:altPrefix": "-dfrac",
            "description": "Fraction [0.0-1.0] of reads to downsample to.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--downsample_to_fraction",
              "itemSeparator": " "
            },
            "id": "#downsample_to_fraction",
            "required": false,
            "type": [
              "null",
              "float"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Downsample to Coverage",
            "sbg:altPrefix": "-dcov",
            "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--downsample_to_coverage",
              "itemSeparator": " "
            },
            "id": "#downsample_to_coverage",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Read filter(s) to disable",
            "sbg:altPrefix": "-drf",
            "description": "Read filters to disable. Specify which filter(s) to disable.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--disable_read_filter",
              "itemSeparator": " "
            },
            "id": "#disable_read_filter",
            "required": false,
            "type": [
              "null",
              {
                "symbols": [],
                "name": "disable_read_filter",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Disable Randomization",
            "sbg:altPrefix": null,
            "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--disableRandomization",
              "itemSeparator": " "
            },
            "id": "#disable_radnomization",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Disable Indel Quals",
            "sbg:altPrefix": "-DIQ",
            "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--disable_indel_quals",
              "itemSeparator": " "
            },
            "id": "#disable_indel_quals",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Disable bam indexing",
            "sbg:altPrefix": null,
            "description": "Turn off on-the-fly creation of indices for output BAM files.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--disable_bam_indexing",
              "itemSeparator": " "
            },
            "id": "#disable_bam_indexing",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Disable index generation and locking",
            "sbg:altPrefix": "-d_locking_when_reading_rods",
            "description": "Disable both auto-generation of index files and index file locking.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--disable_auto_index_creation_and_locking_when_reading_rods",
              "itemSeparator": " "
            },
            "id": "#disable_auto_index",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "-1",
            "label": "Default Base Qualities",
            "sbg:altPrefix": "-DBQ",
            "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--defaultBaseQualities",
              "itemSeparator": " "
            },
            "id": "#default_base_qualities",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "1",
            "label": "CPU per job",
            "sbg:altPrefix": null,
            "description": "Number of CPUs per job.",
            "sbg:category": "Execution",
            "id": "#cpu_per_job",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "0",
            "label": "Cluster Window Size",
            "sbg:altPrefix": "-window",
            "description": "The window size (in bases) in which to evaluate clustered SNPs.",
            "sbg:category": "Variant Filtration",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--clusterWindowSize",
              "itemSeparator": " "
            },
            "id": "#cluster_window_size",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "3",
            "label": "Cluster Size",
            "sbg:altPrefix": "-cluster",
            "description": "The number of SNPs which make up a cluster.",
            "sbg:category": "Variant Filtration",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--clusterSize",
              "itemSeparator": " "
            },
            "id": "#cluster_size",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "BQSR file",
            "sbg:altPrefix": "-bqsr",
            "description": "BQSR file",
            "sbg:category": "Variant Filtration",
            "sbg:fileTypes": "GRP, TXT",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--bqsr"
            },
            "id": "#bqsr",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          },
          {
            "sbg:toolDefaultValue": "40.0",
            "label": "BAQ Gap Open Penalty",
            "sbg:altPrefix": "-baqGOP",
            "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--baqGapOpenPenalty",
              "itemSeparator": " "
            },
            "id": "#baq_gap_open_penalty",
            "required": false,
            "type": [
              "null",
              "float"
            ]
          },
          {
            "sbg:toolDefaultValue": "OFF",
            "label": "BAQ Calculation Type",
            "sbg:altPrefix": "-baq",
            "description": "Type of BAQ calculation to apply in the engine.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--baq",
              "itemSeparator": " "
            },
            "id": "#baq",
            "required": false,
            "type": [
              "null",
              {
                "symbols": [
                  "OFF",
                  "CALCULATE_AS_NECESSARY",
                  "RECALCULATE"
                ],
                "name": "baq",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Bam compression",
            "sbg:altPrefix": "-compress",
            "description": "Compression level to use for writing BAM files (0 - 9, higher is more compressed).",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--bam_compression",
              "itemSeparator": " "
            },
            "id": "#bam_compression",
            "required": false,
            "type": [
              "null",
              {
                "symbols": [
                  "0",
                  "1",
                  "2",
                  "3",
                  "4",
                  "5",
                  "6",
                  "7",
                  "8",
                  "9"
                ],
                "name": "bam_compression",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Allow Potentially Misencoded Quals",
            "sbg:altPrefix": "--allow_potentially_misencoded_quality_scores",
            "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-allowPotentiallyMisencodedQuals",
              "itemSeparator": " "
            },
            "id": "#allow_potentailly_misencoded_quals",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          }
        ],
        "sbg:modifiedOn": 1471380278,
        "stdout": "",
        "cwlVersion": "sbg:draft-2",
        "x": 1259.4709021809535,
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ]
          }
        ],
        "arguments": [
          {
            "separate": true,
            "prefix": "--out",
            "valueFrom": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  read_name = [].concat($job.inputs.variants)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  read_namebase = read_name.slice(0, read_name.length-1).join('.')\n  return read_namebase + '.vcf'\n}"
            },
            "position": 1
          },
          {
            "separate": true,
            "valueFrom": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{ \n  if($job.inputs.filter_name && $job.inputs.filter_expression){\n    name = $job.inputs.filter_name\n    expression = $job.inputs.filter_expression\n    filter = []\n    for (i = 0; i < name.length; i++) {\n      filter.push('--filterName \"', name[i], '\" --filterExpression ', '\"', expression[i], '\" ')\n    }\n    return filter.join(\"\").trim()\n  }\n}\n"
            }
          },
          {
            "separate": true,
            "valueFrom": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  if($job.inputs.genotype_filter_name && $job.inputs.genotype_filter_expression){\n    name = $job.inputs.genotype_filter_name\n    expression = $job.inputs.genotype_filter_expression\n    filter = []\n    for (i = 0; i < name.length; i++) {\n      filter.push('--genotypeFilterName \"', name[i], '\" --genotypeFilterExpression ', '\"', expression[i], '\" ')\n    }\n    return filter.join(\"\").trim()\n  }\n}\n"
            }
          }
        ],
        "sbg:toolkitVersion": "3.5",
        "sbg:validationErrors": [],
        "sbg:createdBy": "kb472",
        "label": "GATK VariantFiltration",
        "temporaryFailCodes": [],
        "sbg:id": "kb472/tcga-ov-1/gatk-3-5-variantfiltration/0",
        "sbg:cmdPreview": "java -Xmx2048M -jar /opt/GenomeAnalysisTK_3.5-0-g36282e4.jar --analysis_type VariantFiltration --variant varaint.vcf  --filterName \"qd\" --filterExpression \"qd<2\" --filterName \"rank\" --filterExpression \"rank>10\"   --out varaint.vcf",
        "baseCommand": [
          "java",
          {
            "class": "Expression",
            "engine": "#cwl-js-engine",
            "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }\n  \treturn '-Xmx2048M'\n}"
          },
          "-jar",
          "/opt/GenomeAnalysisTK_3.5-0-g36282e4.jar",
          "--analysis_type",
          "VariantFiltration"
        ],
        "id": "kb472/tcga-ov-1/gatk-3-5-variantfiltration/0",
        "sbg:job": {
          "inputs": {
            "invert_selection": true,
            "no_call": true,
            "genotype_filter_expression": [],
            "unsafe": null,
            "memory_overhead_per_job": 0,
            "bqsr": {
              "class": "File",
              "secondaryFiles": [],
              "size": 0,
              "path": "/path/to/bqsr.ext"
            },
            "invert_criteria": true,
            "filter_expression": [
              "qd<2",
              "rank>10"
            ],
            "filter_not_in_mask": true,
            "genotype_filter_name": [],
            "filter_name": [
              "qd",
              "rank"
            ],
            "variants": [
              {
                "path": "varaint.vcf"
              }
            ],
            "pedigree": {
              "class": "File",
              "secondaryFiles": [],
              "size": 0,
              "path": "/path/to/pedigree.ext"
            },
            "validation_strictness": null
          },
          "allocatedResources": {
            "cpu": 1,
            "mem": 2048
          }
        },
        "description": "###**Overview**  \nThis tool is designed for hard-filtering variant calls based on certain criteria. Records are hard-filtered by changing the value in the FILTER field to something other than PASS. Filtered records will be preserved in the output unless their removal is requested in the command line.  \n\n###**Input**  \nA variant set to filter.  \n\n###**Output**  \nA filtered VCF.  \n\n###**Usage example**  \n\n    java -jar GenomeAnalysisTK.jar \\  \n         -T VariantFiltration \\  \n         -R reference.fasta \\  \n         -o output.vcf \\  \n         --variant input.vcf \\  \n         --filterExpression \"AB < 0.2 || MQ0 > 50\" \\  \n         --filterName \"Nov09filters\" \\  \n         --mask mask.vcf \\  \n         --maskName InDel  \n\n###**IMPORTANT NOTICE**  \n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding *.fai* (fasta index) and *.dict* (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the '***SBG FASTA Indices***' tool within your GATK based workflow before using any of the GATK tools.",
        "outputs": [
          {
            "label": "Filtered VCF",
            "description": "File to which variants should be written.",
            "sbg:fileTypes": "VCF",
            "type": [
              "File"
            ],
            "id": "#filtered_vcf",
            "outputBinding": {
              "glob": "*.vcf",
              "sbg:metadata": {},
              "sbg:inheritMetadataFrom": "#variants",
              "secondaryFiles": [
                ".idx"
              ]
            }
          }
        ],
        "sbg:links": [
          {
            "label": "Homepage",
            "id": "https://www.broadinstitute.org/gatk/index.php"
          },
          {
            "label": "Source code",
            "id": "https://github.com/broadgsa/gatk-protected"
          },
          {
            "label": "Wiki",
            "id": "https://www.broadinstitute.org/gatk/guide/tooldocs/"
          },
          {
            "label": "Download",
            "id": "https://www.broadinstitute.org/gatk/download/"
          },
          {
            "label": "Publication",
            "id": "https://www.broadinstitute.org/gatk/about/#in-the-literature"
          },
          {
            "label": "Documentation",
            "id": "https://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_filters_VariantFiltration.php"
          }
        ],
        "sbg:revision": 0,
        "sbg:latestRevision": 0,
        "sbg:sbgMaintained": false,
        "sbg:project": "kb472/tcga-ov-1",
        "class": "CommandLineTool",
        "sbg:image_url": null,
        "successCodes": [],
        "sbg:contributors": [
          "kb472"
        ],
        "sbg:revisionNotes": "Copy of elehnert/cgc-academic-user-gatk-access/gatk-3-5-variantfiltration/6",
        "appUrl": "/u/kb472/tcga-ov-1/apps/#kb472/tcga-ov-1/gatk-3-5-variantfiltration/0",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "kb472",
            "sbg:revisionNotes": "Copy of elehnert/cgc-academic-user-gatk-access/gatk-3-5-variantfiltration/6",
            "sbg:modifiedOn": 1471380278,
            "sbg:revision": 0
          }
        ],
        "sbg:categories": [
          "VCF-Processing"
        ],
        "sbg:copyOf": "elehnert/cgc-academic-user-gatk-access/gatk-3-5-variantfiltration/6",
        "sbg:toolAuthor": "Broad",
        "sbg:license": "MIT License",
        "sbg:createdOn": 1471380278,
        "sbg:toolkit": "GATK",
        "stdin": "",
        "y": 218.40811916277195,
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerImageId": "3c3b8e0ed4e5",
            "dockerPull": "images.sbgenomics.com/aleksandar_mihajlovic/gatk3:3.5.0"
          },
          {
            "value": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  if($job.inputs.cpu_per_job){\n  \treturn $job.inputs.cpu_per_job\n  }\n  return 1 \n}"
            },
            "class": "sbg:CPURequirement"
          },
          {
            "value": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}"
            },
            "class": "sbg:MemRequirement"
          }
        ]
      },
      "sbg:y": 218.40811916277195,
      "id": "#GATK_VariantFiltration"
    },
    {
      "inputs": [
        {
          "id": "#Sambamba_Index_1.redundancy"
        },
        {
          "id": "#Sambamba_Index_1.nthreads"
        },
        {
          "id": "#Sambamba_Index_1.mem_mb"
        },
        {
          "source": [
            "#GATK_SplitNCigarReads.n_cigar_split_bam"
          ],
          "id": "#Sambamba_Index_1.input_bam"
        },
        {
          "id": "#Sambamba_Index_1.input_bai_file"
        },
        {
          "id": "#Sambamba_Index_1.cram_input"
        },
        {
          "id": "#Sambamba_Index_1.check_bins"
        }
      ],
      "outputs": [
        {
          "id": "#Sambamba_Index_1.indexed_bam"
        },
        {
          "id": "#Sambamba_Index_1.index"
        }
      ],
      "sbg:x": 935.2942252109644,
      "run": {
        "sbg:modifiedBy": "admin",
        "inputs": [
          {
            "sbg:toolDefaultValue": "TRUE",
            "label": "Output input BAM",
            "description": "Send the input BAM to the output thus creating redundant data.",
            "sbg:category": "Execution",
            "sbg:stageInput": null,
            "id": "#redundancy",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "8",
            "label": "Number of threads",
            "sbg:altPrefix": "-t",
            "description": "Number of threads to use.",
            "sbg:category": "Execution",
            "inputBinding": {
              "separate": false,
              "sbg:cmdInclude": true,
              "prefix": "--nthreads=",
              "valueFrom": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  if (!(typeof $job.inputs.input_bai_file !== \"undefined\"))\n  {\n    if ($job.inputs.nthreads)\n    \treturn $job.inputs.nthreads\n\telse\n    \treturn 8\n  }\n}\n\n"
              }
            },
            "id": "#nthreads",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "1024",
            "label": "Memory in MB",
            "description": "Memory in MB.",
            "sbg:category": "Execution",
            "sbg:stageInput": null,
            "id": "#mem_mb",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Input file",
            "description": "BAM or CRAM file.",
            "sbg:category": "File input",
            "sbg:stageInput": "link",
            "sbg:fileTypes": "BAM, CRAM",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "position": 99,
              "itemSeparator": " ",
              "valueFrom": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  if ((!(typeof $job.inputs.input_bai_file !== \"undefined\")))\n  {\n    return $job.inputs.input_bam.path.split('/').slice(-1)[0]\n  }\n}"
              }
            },
            "id": "#input_bam",
            "required": true,
            "type": [
              "File"
            ]
          },
          {
            "label": "Input BAI(BAM index) file",
            "description": "Input BAI(BAM index) file.",
            "sbg:category": "File input",
            "sbg:fileTypes": "BAI",
            "sbg:stageInput": "link",
            "id": "#input_bai_file",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          },
          {
            "label": "CRAM input",
            "description": "Specify that input is in CRAM format.",
            "sbg:category": "Execution",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "valueFrom": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  if ((!(typeof $job.inputs.input_bai_file !== \"undefined\")) && ($job.inputs.cram_input === true))\n  {\n    return \"--cram-input\" \n  }\n}"
              },
              "itemSeparator": null
            },
            "id": "#cram_input",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Check bins",
            "sbg:altPrefix": "c",
            "description": "Check that bins are set correctly.",
            "sbg:category": "Execution",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "valueFrom": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  if ((!(typeof $job.inputs.input_bai_file !== \"undefined\")) && ($job.inputs.check_bins === true))\n  {\n    return \"--check-bins\" \n  }\n}"
              }
            },
            "id": "#check_bins",
            "type": [
              "null",
              "boolean"
            ]
          }
        ],
        "sbg:modifiedOn": 1475069275,
        "stdout": "",
        "cwlVersion": "sbg:draft-2",
        "x": 935.2942252109644,
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ]
          }
        ],
        "arguments": [
          {
            "separate": true,
            "prefix": "",
            "valueFrom": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  if ((!(typeof $job.inputs.input_bai_file !== \"undefined\")))\n  {\n  if ($job.inputs.input_bam)\n  {\n    \n    filepath = $job.inputs.input_bam.path\n   \tfilename = filepath.split('/').slice(-1)[0]\n    \n    index_name = filename.concat(\".bai\")\n    \n    return index_name\n  }\n}\n}\n\n"
            },
            "position": 100
          }
        ],
        "sbg:toolkitVersion": "0.5.9",
        "sbg:validationErrors": [],
        "sbg:createdBy": "mladenlSBG",
        "label": "Sambamba Index",
        "temporaryFailCodes": [],
        "sbg:id": "admin/sbg-public-data/sambamba-index-0-5-9/6",
        "sbg:cmdPreview": "/opt/sambamba_0.5.9/sambamba_v0.5.9 index  example.bam  example.bam.bai",
        "baseCommand": [
          {
            "class": "Expression",
            "engine": "#cwl-js-engine",
            "script": "{\n  if (typeof $job.inputs.input_bai_file !== \"undefined\"){\n \treturn\"echo Skipping index step because BAI file is provided on the input.\"\n  }\n  else{\n    return \"/opt/sambamba_0.5.9/sambamba_v0.5.9 index\"\n  }\n}"
          }
        ],
        "id": "admin/sbg-public-data/sambamba-index-0-5-9/6",
        "sbg:job": {
          "inputs": {
            "mem_mb": 2,
            "nthreads": 4,
            "redundancy": true,
            "check_bins": false,
            "input_bam": {
              "path": "/root/dir/example.bam"
            },
            "cram_input": false
          },
          "allocatedResources": {
            "cpu": 4,
            "mem": 2
          }
        },
        "description": "Sambamba Index creates an index for a BAM or CRAM file.",
        "outputs": [
          {
            "label": "Indexed BAM file",
            "description": "Bam file.",
            "sbg:fileTypes": "BAM",
            "type": [
              "null",
              "File"
            ],
            "id": "#indexed_bam",
            "outputBinding": {
              "glob": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  if ($job.inputs.redundancy === false) {\n    \n    return ''\n    \n  } else {\n    \n    return '*.bam'\n    \n  }\n}"
              },
              "secondaryFiles": [
                "^.bai",
                ".bai"
              ],
              "sbg:inheritMetadataFrom": "#input_bam"
            }
          },
          {
            "label": "Index file",
            "description": "Indexed file.",
            "sbg:fileTypes": "BAI",
            "type": [
              "null",
              "File"
            ],
            "id": "#index",
            "outputBinding": {
              "glob": "*.bai",
              "sbg:inheritMetadataFrom": "#input_bam"
            }
          }
        ],
        "sbg:links": [
          {
            "label": "Homepage",
            "id": "http://lomereiter.github.io/sambamba/docs/sambamba-view.html"
          },
          {
            "label": "Source code",
            "id": "https://github.com/lomereiter/sambamba"
          },
          {
            "label": "Wiki",
            "id": "https://github.com/lomereiter/sambamba/wiki"
          },
          {
            "label": "Download",
            "id": "https://github.com/lomereiter/sambamba/releases/tag/v0.5.9"
          },
          {
            "label": "Publication",
            "id": "http://lomereiter.github.io/sambamba/docs/sambamba-view.html"
          }
        ],
        "sbg:revision": 6,
        "sbg:latestRevision": 6,
        "sbg:sbgMaintained": false,
        "sbg:project": "admin/sbg-public-data",
        "class": "CommandLineTool",
        "sbg:image_url": null,
        "successCodes": [],
        "sbg:contributors": [
          "admin",
          "mladenlSBG",
          "djordje_klisic"
        ],
        "sbg:revisionNotes": "Changed resource entries",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "mladenlSBG",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1447773749,
            "sbg:revision": 0
          },
          {
            "sbg:modifiedBy": "mladenlSBG",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1448360713,
            "sbg:revision": 1
          },
          {
            "sbg:modifiedBy": "djordje_klisic",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1460640126,
            "sbg:revision": 2
          },
          {
            "sbg:modifiedBy": "djordje_klisic",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1463153504,
            "sbg:revision": 3
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1471953009,
            "sbg:revision": 4
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "Avoiding redundancy",
            "sbg:modifiedOn": 1471953009,
            "sbg:revision": 5
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "Changed resource entries",
            "sbg:modifiedOn": 1475069275,
            "sbg:revision": 6
          }
        ],
        "sbg:categories": [
          "SAM/BAM-Processing",
          "Indexing"
        ],
        "sbg:toolAuthor": "Artem Tarasov",
        "sbg:license": "GNU General Public License v2.0 only",
        "sbg:createdOn": 1447773749,
        "sbg:toolkit": "Sambamba",
        "stdin": "",
        "y": 467.07727772853536,
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerImageId": "59e577b13d5d",
            "dockerPull": "images.sbgenomics.com/mladenlsbg/sambamba:0.5.9"
          },
          {
            "value": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  if (!(typeof $job.inputs.input_bai_file !== \"undefined\"))\n  {\n    if ($job.inputs.nthreads)\n    \treturn $job.inputs.nthreads\n\telse\n    \treturn 8\n  }\n}"
            },
            "class": "sbg:CPURequirement"
          },
          {
            "value": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  if ($job.inputs.mem_mb) {\n    \n    return $job.inputs.mem_mb\n    \n  } else {\n    \n    return 1024\n    \n  }\n  \n}"
            },
            "class": "sbg:MemRequirement"
          }
        ]
      },
      "sbg:y": 467.07727772853536,
      "id": "#Sambamba_Index_1"
    },
    {
      "inputs": [
        {
          "id": "#Picard_SortSam.validation_stringency",
          "default": "SILENT"
        },
        {
          "id": "#Picard_SortSam.sort_order",
          "default": "Coordinate"
        },
        {
          "id": "#Picard_SortSam.quiet"
        },
        {
          "id": "#Picard_SortSam.output_type"
        },
        {
          "id": "#Picard_SortSam.memory_per_job"
        },
        {
          "id": "#Picard_SortSam.max_records_in_ram"
        },
        {
          "source": [
            "#Picard_AddOrReplaceReadGroups.edited_bam"
          ],
          "id": "#Picard_SortSam.input_bam"
        },
        {
          "id": "#Picard_SortSam.create_index",
          "default": "False"
        },
        {
          "id": "#Picard_SortSam.compression_level"
        }
      ],
      "outputs": [
        {
          "id": "#Picard_SortSam.sorted_bam"
        }
      ],
      "sbg:x": 312.941163829726,
      "run": {
        "sbg:modifiedBy": "admin",
        "inputs": [
          {
            "sbg:toolDefaultValue": "SILENT",
            "label": "Validation stringency",
            "description": "Validation stringency for all SAM files read by this program. Setting stringency to SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded. This option can be set to 'null' to clear the default value. Possible values: {STRICT, LENIENT, SILENT}.",
            "sbg:category": "Other input types",
            "inputBinding": {
              "separate": false,
              "sbg:cmdInclude": true,
              "prefix": "VALIDATION_STRINGENCY=",
              "valueFrom": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  if ($job.inputs.validation_stringency)\n  {\n    return $job.inputs.validation_stringency\n  }\n  else\n  {\n    return \"SILENT\"\n  }\n}"
              }
            },
            "id": "#validation_stringency",
            "type": [
              "null",
              {
                "symbols": [
                  "STRICT",
                  "LENIENT",
                  "SILENT"
                ],
                "name": "validation_stringency",
                "type": "enum"
              }
            ]
          },
          {
            "label": "Sort order",
            "sbg:altPrefix": "SO",
            "description": "Sort order of the output file. Possible values: {unsorted, queryname, coordinate}.",
            "sbg:category": "Other input types",
            "inputBinding": {
              "separate": false,
              "sbg:cmdInclude": true,
              "prefix": "SORT_ORDER=",
              "valueFrom": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  p = $job.inputs.sort_order.toLowerCase()\n  return p\n}"
              },
              "position": 3
            },
            "id": "#sort_order",
            "type": [
              {
                "symbols": [
                  "Unsorted",
                  "Queryname",
                  "Coordinate"
                ],
                "name": "sort_order",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Quiet",
            "description": "This parameter indicates whether to suppress job-summary info on System.err. This option can be set to 'null' to clear the default value. Possible values: {true, false}.",
            "sbg:category": "Other input types",
            "inputBinding": {
              "separate": false,
              "sbg:cmdInclude": true,
              "prefix": "QUIET="
            },
            "id": "#quiet",
            "type": [
              "null",
              {
                "symbols": [
                  "True",
                  "False"
                ],
                "name": "quiet",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "SAME AS INPUT",
            "label": "Output format",
            "description": "Since Picard tools can output both SAM and BAM files, user can choose the format of the output file.",
            "sbg:category": "Other input types",
            "id": "#output_type",
            "type": [
              "null",
              {
                "symbols": [
                  "BAM",
                  "SAM",
                  "SAME AS INPUT"
                ],
                "name": "output_type",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "2048",
            "label": "Memory per job",
            "id": "#memory_per_job",
            "description": "Amount of RAM memory to be used per job. Defaults to 2048 MB for single threaded jobs.",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "500000",
            "label": "Max records in RAM",
            "description": "When writing SAM files that need to be sorted, this parameter will specify the number of records stored in RAM before spilling to disk. Increasing this number reduces the number of file handles needed to sort a SAM file, and increases the amount of RAM needed. This option can be set to 'null' to clear the default value.",
            "sbg:category": "Other input types",
            "inputBinding": {
              "separate": false,
              "sbg:cmdInclude": true,
              "prefix": "MAX_RECORDS_IN_RAM="
            },
            "id": "#max_records_in_ram",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Input BAM",
            "sbg:altPrefix": "I",
            "description": "The BAM or SAM file to sort.",
            "sbg:category": "File inputs",
            "sbg:fileTypes": "BAM, SAM",
            "inputBinding": {
              "separate": false,
              "sbg:cmdInclude": true,
              "prefix": "INPUT=",
              "position": 1
            },
            "id": "#input_bam",
            "required": true,
            "type": [
              "File"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Create index",
            "description": "This parameter indicates whether to create a BAM index when writing a coordinate-sorted BAM file. This option can be set to 'null' to clear the default value. Possible values: {true, false}.",
            "sbg:category": "Other input types",
            "inputBinding": {
              "separate": false,
              "sbg:cmdInclude": true,
              "prefix": "CREATE_INDEX=",
              "position": 5
            },
            "id": "#create_index",
            "type": [
              "null",
              {
                "symbols": [
                  "True",
                  "False"
                ],
                "name": "create_index",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "5",
            "label": "Compression level",
            "description": "Compression level for all compressed files created (e.g. BAM and GELI). This option can be set to 'null' to clear the default value.",
            "sbg:category": "Other input types",
            "inputBinding": {
              "separate": false,
              "sbg:cmdInclude": true,
              "prefix": "COMPRESSION_LEVEL="
            },
            "id": "#compression_level",
            "type": [
              "null",
              "int"
            ]
          }
        ],
        "sbg:modifiedOn": 1476965445,
        "stdout": "",
        "cwlVersion": "sbg:draft-2",
        "x": 312.941163829726,
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "engineCommand": "cwl-engine.js",
            "id": "#cwl-js-engine",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ]
          }
        ],
        "arguments": [
          {
            "separate": false,
            "prefix": "OUTPUT=",
            "valueFrom": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  filename = $job.inputs.input_bam.path\n  ext = $job.inputs.output_type\n\nif (ext === \"BAM\")\n{\n    return filename.split('.').slice(0, -1).concat(\"sorted.bam\").join(\".\").replace(/^.*[\\\\\\/]/, '')\n    }\n\nelse if (ext === \"SAM\")\n{\n    return filename.split('.').slice(0, -1).concat(\"sorted.sam\").join('.').replace(/^.*[\\\\\\/]/, '')\n}\n\nelse \n{\n\treturn filename.split('.').slice(0, -1).concat(\"sorted.\"+filename.split('.').slice(-1)[0]).join(\".\").replace(/^.*[\\\\\\/]/, '')\n}\n}"
            },
            "position": 0
          },
          {
            "separate": true,
            "position": 1000,
            "valueFrom": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  filename = $job.inputs.input_bam.path\n  \n  /* figuring out output file type */\n  ext = $job.inputs.output_type\n  if (ext === \"BAM\")\n  {\n    out_extension = \"BAM\"\n  }\n  else if (ext === \"SAM\")\n  {\n    out_extension = \"SAM\"\n  }\n  else \n  {\n\tout_extension = filename.split('.').slice(-1)[0].toUpperCase()\n  }  \n  \n  /* if exist moving .bai in bam.bai */\n  if ($job.inputs.create_index === 'True' && $job.inputs.sort_order === 'Coordinate' && out_extension == \"BAM\")\n  {\n    \n    old_name = filename.split('.').slice(0, -1).concat('sorted.bai').join('.').replace(/^.*[\\\\\\/]/, '')\n    new_name = filename.split('.').slice(0, -1).concat('sorted.bam.bai').join('.').replace(/^.*[\\\\\\/]/, '')\n    return \"; mv \" + \" \" + old_name + \" \" + new_name\n  }\n\n}"
            }
          }
        ],
        "sbg:toolkitVersion": "1.140",
        "sbg:validationErrors": [],
        "sbg:createdBy": "mladenlSBG",
        "label": "Picard SortSam",
        "temporaryFailCodes": [],
        "sbg:id": "admin/sbg-public-data/picard-sortsam-1-140/2",
        "sbg:cmdPreview": "java -Xmx2048M -jar /opt/picard-tools-1.140/picard.jar SortSam OUTPUT=example.tested.sorted.bam INPUT=/root/dir/example.tested.bam SORT_ORDER=coordinate",
        "baseCommand": [
          "java",
          {
            "class": "Expression",
            "engine": "#cwl-js-engine",
            "script": "{   \n  if($job.inputs.memory_per_job){\n    return '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }   \n  \treturn '-Xmx2048M'\n}"
          },
          "-jar",
          "/opt/picard-tools-1.140/picard.jar",
          "SortSam"
        ],
        "id": "admin/sbg-public-data/picard-sortsam-1-140/2",
        "sbg:job": {
          "inputs": {
            "memory_per_job": 2048,
            "create_index": null,
            "input_bam": {
              "path": "/root/dir/example.tested.bam"
            },
            "output_type": null,
            "sort_order": "Coordinate"
          },
          "allocatedResources": {
            "cpu": 1,
            "mem": 2048
          }
        },
        "description": "Picard SortSam sorts the input SAM or BAM. Input and output formats are determined by the file extension.",
        "outputs": [
          {
            "label": "Sorted BAM/SAM",
            "description": "Sorted BAM or SAM file.",
            "sbg:fileTypes": "BAM, SAM",
            "type": [
              "null",
              "File"
            ],
            "id": "#sorted_bam",
            "outputBinding": {
              "glob": "*.sorted.?am",
              "sbg:metadata": {
                "__inherit__": "input_bam"
              },
              "sbg:inheritMetadataFrom": "#input_bam",
              "secondaryFiles": [
                "^.bai",
                ".bai"
              ]
            }
          }
        ],
        "sbg:links": [
          {
            "label": "Homepage",
            "id": "http://broadinstitute.github.io/picard/index.html"
          },
          {
            "label": "Source Code",
            "id": "https://github.com/broadinstitute/picard/releases/tag/1.138"
          },
          {
            "label": "Wiki",
            "id": "http://broadinstitute.github.io/picard/"
          },
          {
            "label": "Download",
            "id": "https://github.com/broadinstitute/picard/zipball/master"
          },
          {
            "label": "Publication",
            "id": "http://broadinstitute.github.io/picard/"
          }
        ],
        "sbg:revision": 2,
        "sbg:latestRevision": 2,
        "sbg:sbgMaintained": false,
        "sbg:project": "admin/sbg-public-data",
        "class": "CommandLineTool",
        "sbg:image_url": null,
        "successCodes": [],
        "sbg:contributors": [
          "admin",
          "mladenlSBG"
        ],
        "sbg:revisionNotes": "Modified \"sort_order\" default value.",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "mladenlSBG",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1447780846,
            "sbg:revision": 0
          },
          {
            "sbg:modifiedBy": "mladenlSBG",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1449738294,
            "sbg:revision": 1
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "Modified \"sort_order\" default value.",
            "sbg:modifiedOn": 1476965445,
            "sbg:revision": 2
          }
        ],
        "sbg:categories": [
          "SAM/BAM-Processing"
        ],
        "sbg:toolAuthor": "Broad Institute",
        "sbg:license": "MIT License, Apache 2.0 Licence",
        "sbg:createdOn": 1447780846,
        "sbg:toolkit": "Picard",
        "stdin": "",
        "y": 501.4910721614618,
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerImageId": "eab0e70b6629",
            "dockerPull": "images.sbgenomics.com/mladenlsbg/picard:1.140"
          },
          {
            "value": 1,
            "class": "sbg:CPURequirement"
          },
          {
            "value": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn $job.inputs.memory_per_job\n  }\n  \treturn 2048\n}"
            },
            "class": "sbg:MemRequirement"
          }
        ]
      },
      "sbg:y": 501.4910721614618,
      "id": "#Picard_SortSam"
    },
    {
      "inputs": [
        {
          "id": "#Picard_ReorderSam.verbosity"
        },
        {
          "id": "#Picard_ReorderSam.validation_stringency",
          "default": "LENIENT"
        },
        {
          "source": [
            "#SBG_FASTA_Indices.fasta_reference"
          ],
          "id": "#Picard_ReorderSam.reference"
        },
        {
          "id": "#Picard_ReorderSam.quiet"
        },
        {
          "id": "#Picard_ReorderSam.output_type"
        },
        {
          "id": "#Picard_ReorderSam.memory_per_job"
        },
        {
          "id": "#Picard_ReorderSam.max_records_in_ram"
        },
        {
          "source": [
            "#Picard_SortSam.sorted_bam"
          ],
          "id": "#Picard_ReorderSam.input_files"
        },
        {
          "id": "#Picard_ReorderSam.create_index",
          "default": "True"
        },
        {
          "id": "#Picard_ReorderSam.compression_level"
        },
        {
          "id": "#Picard_ReorderSam.allow_incomplete_dict_concordation"
        },
        {
          "id": "#Picard_ReorderSam.allow_contig_length_discordance"
        }
      ],
      "outputs": [
        {
          "id": "#Picard_ReorderSam.reordered_bam"
        }
      ],
      "sbg:x": 517.6471658066508,
      "run": {
        "sbg:modifiedBy": "admin",
        "inputs": [
          {
            "sbg:toolDefaultValue": "INFO",
            "label": "Verbosity",
            "description": "Control verbosity of logging. Default value: INFO. This option can be set to 'null' to clear the default value. Possible values: {ERROR, WARNING, INFO, DEBUG}.",
            "sbg:category": "Options",
            "inputBinding": {
              "separate": false,
              "sbg:cmdInclude": true,
              "prefix": "VERBOSITY=",
              "position": 7
            },
            "id": "#verbosity",
            "type": [
              "null",
              {
                "symbols": [
                  "ERROR",
                  "WARNING",
                  "INFO",
                  "DEBUG"
                ],
                "name": "verbosity",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "SILENT",
            "label": "Validation stringency",
            "description": "Validation stringency for all SAM files read by this program. Setting stringency to SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded. Default value: STRICT. This option can be set to 'null' to clear the default value. Possible values: {STRICT, LENIENT, SILENT}.",
            "sbg:category": "Options",
            "inputBinding": {
              "separate": false,
              "sbg:cmdInclude": true,
              "prefix": "VALIDATION_STRINGENCY=",
              "valueFrom": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  if ($job.inputs.validation_stringency)\n  {\n    return $job.inputs.validation_stringency\n  }\n  else\n  {\n    return \"SILENT\"\n  }\n}"
              }
            },
            "id": "#validation_stringency",
            "type": [
              "null",
              {
                "symbols": [
                  "STRICT",
                  "LENIENT",
                  "SILENT"
                ],
                "name": "validation_stringency",
                "type": "enum"
              }
            ]
          },
          {
            "label": "Reference",
            "sbg:altPrefix": "R",
            "description": "Reference sequence to which reads are matched by re-ordering.  A sequence dictionary corresponding to the reference FASTA is required, which can be created using CreateSequenceDictionary.jar.  Required.",
            "sbg:category": "File inputs",
            "sbg:fileTypes": "FASTA, FA",
            "inputBinding": {
              "separate": false,
              "sbg:cmdInclude": true,
              "secondaryFiles": [
                "^.dict"
              ],
              "prefix": "REFERENCE=",
              "position": 3
            },
            "id": "#reference",
            "required": true,
            "type": [
              "File"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Quiet",
            "description": "Whether to suppress job-summary info on System.err. Default value: false. This option can be set to 'null' to clear the default value. Possible values: {true, false}.",
            "sbg:category": "Options",
            "inputBinding": {
              "separate": false,
              "sbg:cmdInclude": true,
              "prefix": "QUIET="
            },
            "id": "#quiet",
            "type": [
              "null",
              {
                "symbols": [
                  "True",
                  "False"
                ],
                "name": "quiet",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "SAME AS INPUT",
            "label": "Output format",
            "description": "Since Picard tools can output both SAM and BAM files, user can choose the format of the output file.",
            "sbg:category": "Options",
            "id": "#output_type",
            "type": [
              "null",
              {
                "symbols": [
                  "BAM",
                  "SAM",
                  "SAME AS INPUT"
                ],
                "name": "output_type",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "2048",
            "label": "Memory per job",
            "description": "Amount of RAM memory to be used per job. Defaults to 2048MB for single threaded jobs.",
            "sbg:category": "Options",
            "id": "#memory_per_job",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "500000",
            "label": "Max records in RAM",
            "description": "When writing SAM files that need to be sorted, this will specify the number of records stored in RAM before spilling to disk. Increasing this number reduces the number of file handles needed to sort a SAM file, and increases the amount of RAM needed. Default value: 500000. This option can be set to 'null' to clear the default value.",
            "sbg:category": "Options",
            "inputBinding": {
              "separate": false,
              "sbg:cmdInclude": true,
              "prefix": "MAX_RECORDS_IN_RAM="
            },
            "id": "#max_records_in_ram",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Input",
            "sbg:altPrefix": "I",
            "description": "Input file (BAM or SAM) from which reads will be extracted.  Required.",
            "sbg:category": "File inputs",
            "sbg:fileTypes": "SAM, BAM",
            "inputBinding": {
              "separate": false,
              "sbg:cmdInclude": true,
              "prefix": "INPUT=",
              "position": 1
            },
            "id": "#input_files",
            "required": true,
            "type": [
              "File"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Create index",
            "description": "Whether to create a BAM index when writing a coordinate-sorted BAM file. Default value: false. This option can be set to 'null' to clear the default value. Possible values: {true, false}.",
            "sbg:category": "Options",
            "inputBinding": {
              "separate": false,
              "sbg:cmdInclude": true,
              "prefix": "CREATE_INDEX=",
              "position": 5
            },
            "id": "#create_index",
            "type": [
              "null",
              {
                "symbols": [
                  "True",
                  "False"
                ],
                "name": "create_index",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "5",
            "label": "Compression level",
            "description": "Compression level for all compressed files created (e.g. BAM and GELI). Default value: 5. This option can be set to 'null' to clear the default value.",
            "sbg:category": "Options",
            "inputBinding": {
              "separate": false,
              "sbg:cmdInclude": true,
              "prefix": "COMPRESSION_LEVEL="
            },
            "id": "#compression_level",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Allow incomplete dict concordance",
            "sbg:altPrefix": "S",
            "description": "If true, then allows only a partial overlap of the BAM contigs with the new reference sequence contigs.  By default, this tool requires a corresponding contig in the new reference for each read contig  Default value: false. This option can be set to 'null' to clear the default value. Possible values: {true, false}.",
            "sbg:category": "Options",
            "inputBinding": {
              "separate": false,
              "sbg:cmdInclude": true,
              "prefix": "ALLOW_INCOMPLETE_DICT_CONCORDANCE=",
              "position": 7
            },
            "id": "#allow_incomplete_dict_concordation",
            "type": [
              "null",
              {
                "symbols": [
                  "true",
                  "false"
                ],
                "name": "allow_incomplete_dict_concordation",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Allow contig length discordance",
            "sbg:altPrefix": "U",
            "description": "If true is selected, this attribute permits mapping from a read contig to a new reference contig with the same name but a different length. To be modified only by experienced users. Default value: false. This option can be set to 'null' to clear the default value. Possible values: {true, false}.",
            "sbg:category": "Options",
            "inputBinding": {
              "separate": false,
              "sbg:cmdInclude": true,
              "prefix": "ALLOW_CONTIG_LENGTH_DISCORDANCE=",
              "position": 7
            },
            "id": "#allow_contig_length_discordance",
            "type": [
              "null",
              {
                "symbols": [
                  "true",
                  "false"
                ],
                "name": "allow_contig_length_discordance",
                "type": "enum"
              }
            ]
          }
        ],
        "sbg:modifiedOn": 1476965447,
        "stdout": "",
        "cwlVersion": "sbg:draft-2",
        "x": 517.6471658066508,
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "engineCommand": "cwl-engine.js",
            "id": "#cwl-js-engine",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ]
          }
        ],
        "arguments": [
          {
            "separate": false,
            "prefix": "OUTPUT=",
            "valueFrom": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  if ($job.inputs.input_files) \n  {\n  filename = $job.inputs.input_files.path\n  ext = $job.inputs.output_type\n\nif (ext === \"BAM\")\n{\n    return filename.split('.').slice(0, filename.split('.').length-1).concat(\"reordered.bam\").join(\".\").replace(/^.*[\\\\\\/]/, '')\n    }\n\nelse if (ext === \"SAM\")\n{\n    return filename.split('.').slice(0, filename.split('.').length-1).concat(\"reordered.sam\").join('.').replace(/^.*[\\\\\\/]/, '')\n}\n\nelse \n{\n\treturn filename.split('.').slice(0, filename.split('.').length-1).concat(\"reordered.\"+filename.split('.')[filename.split('.').length-1]).join(\".\").replace(/^.*[\\\\\\/]/, '')\n}\n  }\n}"
            },
            "position": 4
          },
          {
            "separate": true,
            "position": 2001,
            "valueFrom": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  filename = $job.inputs.input_files.path\n  \n  /* figuring out output file type */\n  ext = $job.inputs.output_type\n  if (ext === \"BAM\")\n  {\n    out_extension = \"BAM\"\n  }\n  else if (ext === \"SAM\")\n  {\n    out_extension = \"SAM\"\n  }\n  else \n  {\n\tout_extension = filename.split('.').slice(-1)[0].toUpperCase()\n  }  \n  \n  /* if exist moving .bai in bam.bai */\n  if ($job.inputs.create_index === 'True' && out_extension == \"BAM\" && filename.split('.').slice(-1)[0].toUpperCase()!=\"SAM\")\n  {\n    \n    old_name = filename.split('.').slice(0, -1).concat('reordered.bai').join('.').replace(/^.*[\\\\\\/]/, '')\n    new_name = filename.split('.').slice(0, -1).concat('reordered.bam.bai').join('.').replace(/^.*[\\\\\\/]/, '')\n    return \"; mv \" + \" \" + old_name + \" \" + new_name\n  }\n\n}"
            }
          }
        ],
        "sbg:toolkitVersion": "1.140",
        "sbg:validationErrors": [],
        "sbg:createdBy": "mladenlSBG",
        "label": "Picard ReorderSam",
        "temporaryFailCodes": [],
        "sbg:id": "admin/sbg-public-data/picard-reordersam-1-140/2",
        "sbg:cmdPreview": "java -Xmx2048M -jar /opt/picard-tools-1.140/picard.jar ReorderSam INPUT=_1_Sample1_RNASeq_chr20.pe_.accepted_hits.sam REFERENCE=chr20.fa OUTPUT=_1_Sample1_RNASeq_chr20.pe_.accepted_hits.reordered.sam",
        "baseCommand": [
          "java",
          {
            "class": "Expression",
            "engine": "#cwl-js-engine",
            "script": "{   \n  if($job.inputs.memory_per_job){\n    return '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }   \n  \treturn '-Xmx2048M'\n}"
          },
          "-jar",
          "/opt/picard-tools-1.140/picard.jar",
          "ReorderSam"
        ],
        "id": "admin/sbg-public-data/picard-reordersam-1-140/2",
        "sbg:job": {
          "inputs": {
            "create_index": "True",
            "memory_per_job": 0,
            "input_files": {
              "path": "_1_Sample1_RNASeq_chr20.pe_.accepted_hits.sam"
            },
            "reference": {
              "path": "chr20.fa"
            }
          },
          "allocatedResources": {
            "cpu": 1,
            "mem": 2048
          }
        },
        "description": "Picard ReorderSam reorders reads in a SAM or BAM file to match the contig ordering in a provided reference file, as determined by exact-name matching of contigs.  Reads mapped to contigs absent in the new reference are dropped. This runs substantially faster if the input is an indexed BAM file.\n\nNote: the Picard ReorderSam is not to be confused with Picard SortSam, which sorts a SAM or BAM file with a valid sequence dictionary.",
        "outputs": [
          {
            "label": "Reordered bam",
            "description": "Output file (bam or sam) to write extracted reads to.",
            "sbg:fileTypes": "BAM, SAM",
            "type": [
              "null",
              "File"
            ],
            "id": "#reordered_bam",
            "outputBinding": {
              "glob": "*.reordered.?am",
              "sbg:metadata": {
                "__inherit__": "input_file"
              },
              "sbg:inheritMetadataFrom": "#input_files",
              "secondaryFiles": [
                "^.bai",
                ".bai"
              ]
            }
          }
        ],
        "sbg:links": [
          {
            "label": "Homepage",
            "id": "http://broadinstitute.github.io/picard/"
          },
          {
            "label": "Source Code",
            "id": "https://github.com/broadinstitute/picard/releases/tag/1.140"
          },
          {
            "label": "Wiki",
            "id": "http://broadinstitute.github.io/picard/"
          },
          {
            "label": "Download",
            "id": "https://github.com/broadinstitute/picard/zipball/master"
          },
          {
            "label": "Publication",
            "id": "http://broadinstitute.github.io/picard/"
          }
        ],
        "sbg:revision": 2,
        "sbg:latestRevision": 2,
        "sbg:sbgMaintained": false,
        "sbg:project": "admin/sbg-public-data",
        "class": "CommandLineTool",
        "sbg:image_url": null,
        "successCodes": [],
        "sbg:contributors": [
          "admin",
          "mladenlSBG",
          "djordje_klisic"
        ],
        "sbg:revisionNotes": "Input categories added. Also some indexing options changed.",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "mladenlSBG",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1447780829,
            "sbg:revision": 0
          },
          {
            "sbg:modifiedBy": "djordje_klisic",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1454682532,
            "sbg:revision": 1
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "Input categories added. Also some indexing options changed.",
            "sbg:modifiedOn": 1476965447,
            "sbg:revision": 2
          }
        ],
        "sbg:categories": [
          "SAM/BAM-Processing"
        ],
        "sbg:toolAuthor": "Broad Institute",
        "sbg:license": "MIT License, Apache 2.0 Licence",
        "sbg:createdOn": 1447780829,
        "sbg:toolkit": "Picard",
        "stdin": "",
        "y": 468.54984890853206,
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerImageId": "eab0e70b6629",
            "dockerPull": "images.sbgenomics.com/mladenlsbg/picard:1.140"
          },
          {
            "value": 1,
            "class": "sbg:CPURequirement"
          },
          {
            "value": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn $job.inputs.memory_per_job\n  }\n  \treturn 2048\n}"
            },
            "class": "sbg:MemRequirement"
          }
        ]
      },
      "sbg:y": 468.54984890853206,
      "id": "#Picard_ReorderSam"
    },
    {
      "inputs": [
        {
          "id": "#Picard_AddOrReplaceReadGroups.validation_stringency"
        },
        {
          "id": "#Picard_AddOrReplaceReadGroups.sort_order"
        },
        {
          "id": "#Picard_AddOrReplaceReadGroups.read_group_sample_name",
          "default": "sampleid"
        },
        {
          "id": "#Picard_AddOrReplaceReadGroups.read_group_run_date"
        },
        {
          "id": "#Picard_AddOrReplaceReadGroups.read_group_program_group"
        },
        {
          "id": "#Picard_AddOrReplaceReadGroups.read_group_predicted_insert_size"
        },
        {
          "id": "#Picard_AddOrReplaceReadGroups.read_group_platform_unit",
          "default": "sampleid"
        },
        {
          "id": "#Picard_AddOrReplaceReadGroups.read_group_platform_model"
        },
        {
          "id": "#Picard_AddOrReplaceReadGroups.read_group_platform",
          "default": "illumina"
        },
        {
          "id": "#Picard_AddOrReplaceReadGroups.read_group_lib",
          "default": "sampleid"
        },
        {
          "id": "#Picard_AddOrReplaceReadGroups.read_group_id"
        },
        {
          "id": "#Picard_AddOrReplaceReadGroups.read_group_decription"
        },
        {
          "id": "#Picard_AddOrReplaceReadGroups.read_group_center_name"
        },
        {
          "id": "#Picard_AddOrReplaceReadGroups.quiet"
        },
        {
          "id": "#Picard_AddOrReplaceReadGroups.output_type",
          "default": "BAM"
        },
        {
          "id": "#Picard_AddOrReplaceReadGroups.memory_per_job"
        },
        {
          "id": "#Picard_AddOrReplaceReadGroups.max_records_in_ram"
        },
        {
          "source": [
            "#input_bam_file"
          ],
          "id": "#Picard_AddOrReplaceReadGroups.input_bam"
        },
        {
          "id": "#Picard_AddOrReplaceReadGroups.create_index"
        },
        {
          "id": "#Picard_AddOrReplaceReadGroups.compression_level"
        }
      ],
      "outputs": [
        {
          "id": "#Picard_AddOrReplaceReadGroups.edited_bam"
        }
      ],
      "sbg:x": 123.52971596456497,
      "run": {
        "sbg:modifiedBy": "admin",
        "inputs": [
          {
            "sbg:toolDefaultValue": "SILENT",
            "label": "Validation stringency",
            "description": "Validation stringency for all SAM files read by this program. Setting stringency to SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded. Default value: STRICT. This option can be set to 'null' to clear the default value. Possible values: {STRICT, LENIENT, SILENT}.",
            "sbg:category": "Options",
            "inputBinding": {
              "separate": false,
              "sbg:cmdInclude": true,
              "prefix": "VALIDATION_STRINGENCY=",
              "valueFrom": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  if ($job.inputs.validation_stringency)\n  {\n    return $job.inputs.validation_stringency\n  }\n  else\n  {\n    return \"SILENT\"\n  }\n}"
              }
            },
            "id": "#validation_stringency",
            "required": false,
            "type": [
              "null",
              {
                "symbols": [
                  "STRICT",
                  "LENIENT",
                  "SILENT"
                ],
                "name": "validation_stringency",
                "type": "enum"
              }
            ]
          },
          {
            "label": "Sort order",
            "sbg:altPrefix": "SO",
            "description": "This optional parameter indicates the sort order for the output. If not supplied OUTPUT is in the same order as INPUT. Possible values: {unsorted, queryname, coordinate, duplicate}.",
            "sbg:category": "Options",
            "inputBinding": {
              "separate": false,
              "sbg:cmdInclude": true,
              "prefix": "SORT_ORDER=",
              "position": 3
            },
            "id": "#sort_order",
            "required": false,
            "type": [
              "null",
              {
                "symbols": [
                  "unsorted",
                  "queryname",
                  "coordinate"
                ],
                "name": "sort_order",
                "type": "enum"
              }
            ]
          },
          {
            "label": "Read group sample name",
            "sbg:altPrefix": "SM",
            "description": "Read group sample name.",
            "sbg:category": "Options",
            "sbg:includeInPorts": false,
            "inputBinding": {
              "separate": false,
              "sbg:cmdInclude": true,
              "prefix": "RGSM=",
              "position": 4
            },
            "id": "#read_group_sample_name",
            "required": true,
            "type": [
              "string"
            ]
          },
          {
            "label": "Read group run date",
            "sbg:altPrefix": "DT",
            "description": "Read group run date.",
            "sbg:category": "Options",
            "inputBinding": {
              "separate": false,
              "sbg:cmdInclude": true,
              "prefix": "RGDT=",
              "position": 4
            },
            "id": "#read_group_run_date",
            "required": false,
            "type": [
              "null",
              "string"
            ]
          },
          {
            "label": "Read group program group",
            "sbg:altPrefix": "PG",
            "description": "Read group program group.",
            "sbg:category": "Options",
            "inputBinding": {
              "separate": false,
              "sbg:cmdInclude": true,
              "prefix": "RGPG="
            },
            "id": "#read_group_program_group",
            "required": false,
            "type": [
              "null",
              "string"
            ]
          },
          {
            "label": "Read group predicted insert size",
            "sbg:altPrefix": "PI",
            "description": "Read group predicted insert size.",
            "sbg:category": "Options",
            "inputBinding": {
              "separate": false,
              "sbg:cmdInclude": true,
              "prefix": "RGPI=",
              "position": 4
            },
            "id": "#read_group_predicted_insert_size",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Read group platform unit",
            "sbg:altPrefix": "PU",
            "description": "Read group platform unit (eg. run barcode).",
            "sbg:category": "Options",
            "inputBinding": {
              "separate": false,
              "sbg:cmdInclude": true,
              "prefix": "RGPU=",
              "position": 4
            },
            "id": "#read_group_platform_unit",
            "required": true,
            "type": [
              "string"
            ]
          },
          {
            "label": "Read group platform model",
            "sbg:altPrefix": "PM",
            "description": "Read group platform model.",
            "sbg:category": "Options",
            "inputBinding": {
              "separate": false,
              "sbg:cmdInclude": true,
              "prefix": "RGPM="
            },
            "id": "#read_group_platform_model",
            "required": false,
            "type": [
              "null",
              "string"
            ]
          },
          {
            "label": "Read group platform",
            "sbg:altPrefix": "PL",
            "description": "Read group platform (e.g. illumina, Solid).",
            "sbg:category": "Options",
            "inputBinding": {
              "separate": false,
              "sbg:cmdInclude": true,
              "prefix": "RGPL=",
              "position": 4
            },
            "id": "#read_group_platform",
            "required": true,
            "type": [
              "string"
            ]
          },
          {
            "label": "Read group library",
            "sbg:altPrefix": "LB",
            "description": "Read group library.",
            "sbg:category": "Options",
            "inputBinding": {
              "separate": false,
              "sbg:cmdInclude": true,
              "prefix": "RGLB=",
              "position": 4
            },
            "id": "#read_group_lib",
            "required": true,
            "type": [
              "string"
            ]
          },
          {
            "sbg:toolDefaultValue": "1",
            "label": "Read Group ID",
            "sbg:altPrefix": "ID",
            "description": "This parameter indicates the read group ID.",
            "sbg:category": "Options",
            "inputBinding": {
              "separate": false,
              "sbg:cmdInclude": true,
              "prefix": "RGID=",
              "position": 3
            },
            "id": "#read_group_id",
            "required": false,
            "type": [
              "null",
              "string"
            ]
          },
          {
            "label": "Read group description",
            "sbg:altPrefix": "DS",
            "description": "Read group description.",
            "sbg:category": "Options",
            "inputBinding": {
              "separate": false,
              "sbg:cmdInclude": true,
              "prefix": "RGDS=",
              "position": 4
            },
            "id": "#read_group_decription",
            "required": false,
            "type": [
              "null",
              "string"
            ]
          },
          {
            "label": "Read group sequencing center name",
            "sbg:altPrefix": "CN",
            "description": "Read group sequencing center name.",
            "sbg:category": "Options",
            "inputBinding": {
              "separate": false,
              "sbg:cmdInclude": true,
              "prefix": "RGCN=",
              "position": 4
            },
            "id": "#read_group_center_name",
            "required": false,
            "type": [
              "null",
              "string"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Quiet",
            "description": "This parameter indicates whether to suppress job-summary info on System.err. Default value: false. This option can be set to 'null' to clear the default value. Possible values: {true, false}.",
            "sbg:category": "Options",
            "inputBinding": {
              "separate": false,
              "sbg:cmdInclude": true,
              "prefix": "QUIET="
            },
            "id": "#quiet",
            "required": false,
            "type": [
              "null",
              {
                "symbols": [
                  "True",
                  "False"
                ],
                "name": "quiet",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "SAME AS INPUT",
            "label": "Output format",
            "description": "Since Picard tools can output both SAM and BAM files, user can choose the format of the output file.",
            "sbg:category": "Options",
            "id": "#output_type",
            "required": false,
            "type": [
              "null",
              {
                "symbols": [
                  "BAM",
                  "SAM",
                  "SAME AS INPUT"
                ],
                "name": "output_type",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "2048",
            "label": "Memory per job",
            "description": "Amount of RAM memory to be used per job. Defaults to 2048 MB for single threaded jobs.",
            "sbg:category": "Execution options",
            "id": "#memory_per_job",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "500000",
            "label": "Max records in RAM",
            "description": "When writing SAM files that need to be sorted, this parameter will specify the number of records stored in RAM before spilling to disk. Increasing this number reduces the number of file handles needed to sort a SAM file, and increases the amount of RAM needed. Default value: 500000. This option can be set to 'null' to clear the default value.",
            "sbg:category": "Options",
            "inputBinding": {
              "separate": false,
              "sbg:cmdInclude": true,
              "prefix": "MAX_RECORDS_IN_RAM="
            },
            "id": "#max_records_in_ram",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Input",
            "sbg:altPrefix": "I",
            "description": "Input file (bam or sam or a GA4GH url).",
            "sbg:category": "File inputs",
            "sbg:fileTypes": "SAM, BAM",
            "inputBinding": {
              "separate": false,
              "sbg:cmdInclude": true,
              "prefix": "INPUT=",
              "position": 1
            },
            "id": "#input_bam",
            "required": true,
            "type": [
              "File"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Create index",
            "description": "This parameter indicates whether to create a BAM index when writing a coordinate-sorted BAM file. Default value: False. This option can be set to 'null' to clear the default value. Possible values: {True, False}.",
            "sbg:category": "Options",
            "inputBinding": {
              "separate": false,
              "sbg:cmdInclude": true,
              "prefix": "CREATE_INDEX=",
              "position": 5
            },
            "id": "#create_index",
            "required": false,
            "type": [
              "null",
              {
                "symbols": [
                  "True",
                  "False"
                ],
                "name": "create_index",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "5",
            "label": "Compression level",
            "description": "Compression level for all compressed files created (e.g. BAM and GELI). Default value: 5. This option can be set to 'null' to clear the default value.",
            "sbg:category": "Options",
            "inputBinding": {
              "separate": false,
              "sbg:cmdInclude": true,
              "prefix": "COMPRESSION_LEVEL="
            },
            "id": "#compression_level",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          }
        ],
        "sbg:modifiedOn": 1473259399,
        "stdout": "",
        "cwlVersion": "sbg:draft-2",
        "x": 123.52971596456497,
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "engineCommand": "cwl-engine.js",
            "id": "#cwl-js-engine",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ]
          }
        ],
        "arguments": [
          {
            "separate": false,
            "prefix": "OUTPUT=",
            "valueFrom": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  if ($job.inputs.input_bam) \n  {\n  filename = $job.inputs.input_bam.path\n  ext = $job.inputs.output_type\n  filebase = filename.split('.').slice(0, -1)\n\nif (ext === \"BAM\")\n{\n    return filebase.concat(\"edited.bam\").join(\".\").replace(/^.*[\\\\\\/]/, '')\n    }\n\nelse if (ext === \"SAM\")\n{\n    return filebase.concat(\"edited.sam\").join('.').replace(/^.*[\\\\\\/]/, '')\n}\n\nelse \n{\n\treturn filebase.concat(\"edited.\"+filename.split('.').slice(-1)[0]).join(\".\").replace(/^.*[\\\\\\/]/, '')\n}\n  }\n}"
            }
          },
          {
            "separate": true,
            "position": 1000,
            "valueFrom": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  filename = $job.inputs.input_bam.path\n  \n  /* figuring out output file type */\n  ext = $job.inputs.output_type\n  if (ext === \"BAM\")\n  {\n    out_extension = \"BAM\"\n  }\n  else if (ext === \"SAM\")\n  {\n    out_extension = \"SAM\"\n  }\n  else \n  {\n\tout_extension = filename.split('.').slice(-1)[0].toUpperCase()\n  }  \n  \n  /* if exist moving .bai in bam.bai */\n  if ($job.inputs.create_index === 'True' && ($job.inputs.sort_order === 'coordinate' || typeof($job.inputs.sort_order) === \"undefined\") && out_extension == \"BAM\")\n  {\n    \n    old_name = filename.split('.').slice(0, -1).concat('edited.bai').join('.').replace(/^.*[\\\\\\/]/, '')\n    new_name = filename.split('.').slice(0, -1).concat('edited.bam.bai').join('.').replace(/^.*[\\\\\\/]/, '')\n    return \"; mv \" + \" \" + old_name + \" \" + new_name\n  }\n\n}"
            }
          }
        ],
        "sbg:toolkitVersion": "1.140",
        "sbg:validationErrors": [],
        "sbg:createdBy": "mladenlSBG",
        "label": "Picard AddOrReplaceReadGroups",
        "temporaryFailCodes": [],
        "y": 353.84831589209875,
        "sbg:id": "admin/sbg-public-data/picard-addorreplacereadgroups-1-140/2",
        "sbg:cmdPreview": "java -Xmx2048M -jar /opt/picard-tools-1.140/picard.jar AddOrReplaceReadGroups OUTPUT=example.edited.bam INPUT=/root/dir/example.bam",
        "baseCommand": [
          "java",
          {
            "class": "Expression",
            "engine": "#cwl-js-engine",
            "script": "{   \n  if($job.inputs.memory_per_job){\n    return '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }   \n  \treturn '-Xmx2048M'\n}"
          },
          "-jar",
          "/opt/picard-tools-1.140/picard.jar",
          "AddOrReplaceReadGroups"
        ],
        "id": "admin/sbg-public-data/picard-addorreplacereadgroups-1-140/2",
        "sbg:job": {
          "inputs": {
            "create_index": null,
            "read_group_platform_model": "read_group_platform_model",
            "sort_order": null,
            "output_type": "SAME AS INPUT",
            "input_bam": {
              "path": "/root/dir/example.bam"
            },
            "read_group_program_group": "read_group_program_group"
          },
          "allocatedResources": {
            "cpu": 1,
            "mem": 2048
          }
        },
        "description": "Picard AddOrReplaceReadGroups replaces all read groups in the input file with a single new read group and assigns all reads to this read group in the output BAM file (*.bam).",
        "outputs": [
          {
            "label": "Edited BAM",
            "description": "Output file (BAM or SAM).",
            "sbg:fileTypes": "BAM, SAM",
            "type": [
              "null",
              "File"
            ],
            "id": "#edited_bam",
            "outputBinding": {
              "glob": "*.edited.?am",
              "sbg:metadata": {
                "__inherit__": "input_file"
              },
              "sbg:inheritMetadataFrom": "#input_bam",
              "secondaryFiles": [
                "^.bai",
                ".bai"
              ]
            }
          }
        ],
        "sbg:links": [
          {
            "label": "Homepage",
            "id": "http://broadinstitute.github.io/picard/"
          },
          {
            "label": "Source Code",
            "id": "https://github.com/broadinstitute/picard/releases/tag/1.140"
          },
          {
            "label": "Wiki",
            "id": "http://broadinstitute.github.io/picard/"
          },
          {
            "label": "Download",
            "id": "https://github.com/broadinstitute/picard/zipball/master"
          },
          {
            "label": "Publication",
            "id": "http://broadinstitute.github.io/picard/"
          }
        ],
        "sbg:revision": 2,
        "sbg:latestRevision": 2,
        "sbg:sbgMaintained": false,
        "sbg:project": "admin/sbg-public-data",
        "class": "CommandLineTool",
        "sbg:image_url": null,
        "successCodes": [],
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "sbg:revisionNotes": "Added input categories.",
        "appUrl": "/public/apps/#tool/admin/sbg-public-data/picard-addorreplacereadgroups-1-140/2",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "mladenlSBG",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1447780598,
            "sbg:revision": 0
          },
          {
            "sbg:modifiedBy": "djordje_klisic",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1454682504,
            "sbg:revision": 1
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "Added input categories.",
            "sbg:modifiedOn": 1473259399,
            "sbg:revision": 2
          }
        ],
        "sbg:categories": [
          "SAM/BAM-Processing"
        ],
        "sbg:projectName": "SBG Public data",
        "sbg:contributors": [
          "djordje_klisic",
          "admin",
          "mladenlSBG"
        ],
        "sbg:toolAuthor": "Broad Institute",
        "sbg:license": "MIT License, Apache 2.0 Licence",
        "sbg:toolkit": "Picard",
        "sbg:publisher": "sbg",
        "stdin": "",
        "sbg:createdOn": 1447780598,
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerImageId": "eab0e70b6629",
            "dockerPull": "images.sbgenomics.com/mladenlsbg/picard:1.140"
          },
          {
            "value": 1,
            "class": "sbg:CPURequirement"
          },
          {
            "value": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn $job.inputs.memory_per_job\n  }\n  \treturn 2048\n}"
            },
            "class": "sbg:MemRequirement"
          }
        ]
      },
      "sbg:y": 353.84831589209875,
      "id": "#Picard_AddOrReplaceReadGroups"
    },
    {
      "inputs": [
        {
          "id": "#Samtools_flagstat.threads"
        },
        {
          "id": "#Samtools_flagstat.memory"
        },
        {
          "source": [
            "#Sambamba_Index_1.indexed_bam"
          ],
          "id": "#Samtools_flagstat.input_bam"
        }
      ],
      "outputs": [
        {
          "id": "#Samtools_flagstat.flagstat_metrics"
        }
      ],
      "sbg:x": 1138.823598421981,
      "run": {
        "sbg:modifiedBy": "uros_sipetic",
        "inputs": [
          {
            "label": "No of threads",
            "description": "Number of threads.",
            "sbg:category": "Execution",
            "sbg:stageInput": null,
            "id": "#threads",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Allocated memory [GB]",
            "description": "Memory allocation for execution [GB].",
            "sbg:category": "Execution",
            "sbg:stageInput": null,
            "id": "#memory",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Input files",
            "description": "Input files for which metrics data shall be created.",
            "sbg:category": "Input file",
            "sbg:stageInput": "link",
            "sbg:fileTypes": "BAM,SAM",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "secondaryFiles": [
                ".bai"
              ],
              "itemSeparator": null
            },
            "id": "#input_bam",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          }
        ],
        "sbg:modifiedOn": 1494876339,
        "sbg:contributors": [
          "uros_sipetic"
        ],
        "cwlVersion": "sbg:draft-2",
        "x": 1138.823598421981,
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ]
          }
        ],
        "arguments": [
          {
            "separate": true,
            "position": 15,
            "valueFrom": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n\n  input_file_path = [].concat($job.inputs.input_bam)[0].path\n  input_file_name = input_file_path.replace(/^.*[\\\\\\/]/, '').split('.')\n  input_file_namebase = input_file_name[0]\n  \n  return \" > \" + input_file_namebase + \".flagstat.txt\"\n  \n}"
            }
          }
        ],
        "sbg:validationErrors": [],
        "sbg:createdBy": "uros_sipetic",
        "label": "Samtools flagstat",
        "stdout": "",
        "temporaryFailCodes": [],
        "sbg:id": "uros_sipetic/viral-alignment/samtools-flagstat/1",
        "sbg:latestRevision": 1,
        "baseCommand": [
          "samtools",
          "flagstat"
        ],
        "id": "uros_sipetic/viral-alignment/samtools-flagstat/1",
        "sbg:job": {
          "inputs": {
            "input_bam": {
              "class": "File",
              "secondaryFiles": [
                {
                  "path": ".bai"
                }
              ],
              "size": 0,
              "path": "/path/to/ercc.dsldksjfl.sdo_sdofj_djf.sdf.bam"
            },
            "threads": 9,
            "memory": 3
          },
          "allocatedResources": {
            "cpu": 9,
            "mem": 3072
          }
        },
        "description": "",
        "outputs": [
          {
            "label": "Flagstat metrics files",
            "description": "Files containing metrics, one file for each input.",
            "sbg:fileTypes": "TXT",
            "type": [
              "null",
              "File"
            ],
            "id": "#flagstat_metrics",
            "outputBinding": {
              "glob": "*.txt",
              "sbg:inheritMetadataFrom": "#input_bam"
            }
          }
        ],
        "sbg:revision": 1,
        "sbg:cmdPreview": "samtools flagstat   > ercc.flagstat.txt",
        "sbg:sbgMaintained": false,
        "sbg:project": "uros_sipetic/viral-alignment",
        "class": "CommandLineTool",
        "sbg:image_url": null,
        "successCodes": [],
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "uros_sipetic",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1494876201,
            "sbg:revision": 0
          },
          {
            "sbg:modifiedBy": "uros_sipetic",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1494876339,
            "sbg:revision": 1
          }
        ],
        "sbg:categories": [
          "Quantification"
        ],
        "sbg:projectName": "Viral alignment",
        "sbg:license": "",
        "sbg:createdOn": 1494876201,
        "sbg:publisher": "sbg",
        "stdin": "",
        "y": 536.201064880078,
        "hints": [
          {
            "value": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{  \n\n  // Calculate suggested CPUs depending on the input BAM size\n  bam_size = $job.inputs.input_bam.size\n  \n  if(!bam_size) { bam_size = 0 }\n \n  GB_1 = 1024*1024*1024\n  \n  if(bam_size < GB_1)\n  { suggested_cpus = 1 }\n  else if(bam_size < 10 * GB_1)\n  { suggested_cpus = 8 }\n  else \n  { suggested_cpus = 30 }\n  \n  if($job.inputs.threads){  \t\n    return  $job.inputs.threads\n  } \n  else{  \t\n    return suggested_cpus  \n  }\n  \n}"
            },
            "class": "sbg:CPURequirement"
          },
          {
            "class": "DockerRequirement",
            "dockerImageId": "",
            "dockerPull": "images.sbgenomics.com/bogdang/samstat:1.5.1"
          },
          {
            "value": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{  \n\n  // Calculate suggested memory depending on the input BAM size\n  bam_size = $job.inputs.input_bam.size\n  \n  if(!bam_size) { bam_size = 0 }\n \n  GB_1 = 1024*1024*1024\n  if(bam_size < GB_1){ suggested_memory = 4 }\n  else if(bam_size < 10 * GB_1){ suggested_memory = 15 }\n  else { suggested_memory = 58 }\n  \n  if($job.inputs.memory){  \t\n    return  $job.inputs.memory* 1024  \n  } \n  else{  \t\n    return suggested_memory * 1024  \n  }\n}"
            },
            "class": "sbg:MemRequirement"
          }
        ]
      },
      "sbg:y": 536.201064880078,
      "id": "#Samtools_flagstat"
    },
    {
      "inputs": [
        {
          "source": [
            "#GATK_VariantFiltration.filtered_vcf"
          ],
          "id": "#SnpEff.variants_file"
        },
        {
          "id": "#SnpEff.up_down_stream_len"
        },
        {
          "id": "#SnpEff.total_memory"
        },
        {
          "id": "#SnpEff.threads"
        },
        {
          "id": "#SnpEff.strict"
        },
        {
          "id": "#SnpEff.stats"
        },
        {
          "id": "#SnpEff.splicesitesize"
        },
        {
          "id": "#SnpEff.splice_site_region_intron_max"
        },
        {
          "id": "#SnpEff.splice_region_intron_min"
        },
        {
          "id": "#SnpEff.splice_region_exons_size"
        },
        {
          "id": "#SnpEff.sequenceontology"
        },
        {
          "id": "#SnpEff.reg"
        },
        {
          "id": "#SnpEff.output_format"
        },
        {
          "id": "#SnpEff.onlyreg"
        },
        {
          "id": "#SnpEff.only_protein"
        },
        {
          "id": "#SnpEff.onlyTr"
        },
        {
          "id": "#SnpEff.oicr"
        },
        {
          "id": "#SnpEff.nostats"
        },
        {
          "id": "#SnpEff.no_utr"
        },
        {
          "id": "#SnpEff.no_upstream"
        },
        {
          "id": "#SnpEff.no_shift_hgvs"
        },
        {
          "id": "#SnpEff.no_next_prot"
        },
        {
          "id": "#SnpEff.no_motif"
        },
        {
          "id": "#SnpEff.no_lof"
        },
        {
          "id": "#SnpEff.no_intron"
        },
        {
          "id": "#SnpEff.no_intergenic"
        },
        {
          "id": "#SnpEff.no_interaction"
        },
        {
          "id": "#SnpEff.no_hgvs"
        },
        {
          "id": "#SnpEff.no_genome"
        },
        {
          "id": "#SnpEff.no_downstream"
        },
        {
          "id": "#SnpEff.no_EffectType"
        },
        {
          "id": "#SnpEff.noExpandIUB"
        },
        {
          "id": "#SnpEff.nextprot"
        },
        {
          "id": "#SnpEff.motif"
        },
        {
          "id": "#SnpEff.max_tsl"
        },
        {
          "id": "#SnpEff.interval"
        },
        {
          "id": "#SnpEff.interaction"
        },
        {
          "id": "#SnpEff.input_format"
        },
        {
          "id": "#SnpEff.hgvs_tr_id"
        },
        {
          "id": "#SnpEff.hgvs_1_letter"
        },
        {
          "id": "#SnpEff.hgvsOld"
        },
        {
          "id": "#SnpEff.geneid"
        },
        {
          "id": "#SnpEff.format_eff"
        },
        {
          "id": "#SnpEff.filterinterval"
        },
        {
          "source": [
            "#database"
          ],
          "id": "#SnpEff.database"
        },
        {
          "id": "#SnpEff.csvstats"
        },
        {
          "id": "#SnpEff.configuration_file"
        },
        {
          "id": "#SnpEff.configOption"
        },
        {
          "id": "#SnpEff.classic"
        },
        {
          "id": "#SnpEff.chr"
        },
        {
          "id": "#SnpEff.canonList"
        },
        {
          "id": "#SnpEff.canon"
        },
        {
          "id": "#SnpEff.cancersamples"
        },
        {
          "id": "#SnpEff.cancer"
        },
        {
          "id": "#SnpEff.assembly",
          "default": "GRCh37.75"
        },
        {
          "id": "#SnpEff.add_lof_tag"
        },
        {
          "id": "#SnpEff.add_hgvs_anno"
        }
      ],
      "outputs": [
        {
          "id": "#SnpEff.summary_text"
        },
        {
          "id": "#SnpEff.summary"
        },
        {
          "id": "#SnpEff.annotated"
        }
      ],
      "sbg:x": 1849.412075788522,
      "run": {
        "sbg:modifiedBy": "kb472",
        "sbg:revisionNotes": "Copy of admin/sbg-public-data/snpeff-4-3/2",
        "stdout": "",
        "cwlVersion": "sbg:draft-2",
        "x": 1849.412075788522,
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ]
          }
        ],
        "arguments": [
          {
            "separate": true,
            "position": 5000,
            "valueFrom": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\t\n  filename = $job.inputs.variants_file.path\n  basename = filename.split('.').slice(0, filename.split('.').length-1).join('.').replace(/^.*[\\\\\\/]/, '')\n \n  \n  if($job.inputs.output_format === \"txt\")\n  {\n    name = basename.concat(\".snpEff_annotated.txt\")\n  }\n  else if ($job.inputs.output_format === \"bed\" || $job.inputs.output_format === \"bedAnn\")\n  {\n    name = basename.concat(\".snpEff_annotated.bed\")\n  }\n  else\n  {\n    name = basename.concat(\".snpEff_annotated.vcf\")\n  }\n  return '> ' + name\n}\n"
            }
          },
          {
            "separate": true,
            "position": 0,
            "valueFrom": "-nodownload"
          },
          {
            "separate": true,
            "position": 0,
            "valueFrom": "-noLog"
          }
        ],
        "sbg:createdBy": "kb472",
        "label": "SnpEff",
        "inputs": [
          {
            "label": "Input variants file",
            "description": "Input variants file.",
            "sbg:category": "File type inputs",
            "sbg:fileTypes": "VCF, TXT, PILEUP, BED",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "position": 2001
            },
            "id": "#variants_file",
            "required": true,
            "type": [
              "File"
            ]
          },
          {
            "label": "Upstream downstream interval length",
            "sbg:altPrefix": "-ud",
            "description": "Set upstream downstream interval length (in bases).",
            "sbg:category": "Database options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-upDownStreamLen",
              "position": 490
            },
            "id": "#up_down_stream_len",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "8",
            "label": "Java memory requirement [Gb]",
            "description": "RAM requirement for the java process execution [Gb].",
            "sbg:category": "Other input types",
            "id": "#total_memory",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Use multiple threads (implies '-noStats')",
            "description": "Use multiple threads (implies '-noStats'). Default: False.",
            "sbg:category": "Other input types",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-t",
              "position": 280
            },
            "id": "#threads",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Only use validated transcripts",
            "description": "Only use 'validated' transcripts (i.e. sequence has been checked). Default: false.",
            "sbg:category": "Database options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-strict",
              "position": 480
            },
            "id": "#strict",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "snpEff_summary.html",
            "label": "Name of stats file (summary)",
            "sbg:altPrefix": "-s",
            "description": "Name of stats file (summary).",
            "sbg:category": "Options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-stats",
              "valueFrom": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  if ($job.inputs.stats)\n  {\n    return $job.inputs.stats.concat(\".html\")\n  }\n}"
              },
              "position": 60
            },
            "id": "#stats",
            "required": false,
            "type": [
              "null",
              "string"
            ]
          },
          {
            "sbg:toolDefaultValue": "2",
            "label": "Set size for splice sites (donor and acceptor) in bases",
            "sbg:altPrefix": "-ss",
            "description": "Set size for splice sites (donor and acceptor) in bases.",
            "sbg:category": "Database options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--spliceSiteSize",
              "position": 430
            },
            "id": "#splicesitesize",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "8",
            "label": "Set maximum number of bases for splice site region within intron",
            "description": "Set maximum number of bases for splice site region within intron. Default: 8 bases.",
            "sbg:category": "Database options",
            "sbg:stageInput": null,
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-spliceRegionIntronMax",
              "position": 0
            },
            "id": "#splice_site_region_intron_max",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "3",
            "label": "Set minimum number of bases for splice site region within intron",
            "description": "Set minimum number of bases for splice site region within intron. Default: 3 bases.",
            "sbg:category": "Database options",
            "sbg:stageInput": null,
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-spliceRegionIntronMin",
              "position": 0
            },
            "id": "#splice_region_intron_min",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "3",
            "label": "Set size for splice site region within exons",
            "description": "Set size for splice site region within exons. Default: 3 bases.",
            "sbg:category": "Database options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-spliceRegionExonSize",
              "position": 440
            },
            "id": "#splice_region_exons_size",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "True",
            "label": "Use Sequence Ontology terms",
            "description": "Use Sequence Ontology terms.",
            "sbg:category": "Annotations options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-sequenceOntology",
              "position": 250
            },
            "id": "#sequenceontology",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Regulation track to use (this option can be used add several times)",
            "description": "Regulation track to use (this option can be used add several times).",
            "sbg:category": "Database options",
            "inputBinding": {
              "prefix": "-reg",
              "separate": true,
              "sbg:cmdInclude": true,
              "position": 420,
              "itemSeparator": null
            },
            "id": "#reg",
            "required": false,
            "type": [
              "null",
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "vcf",
            "label": "Ouput format",
            "description": "Ouput format. Possible values: {txt, vcf, gatk, bed, bedAnn}.",
            "sbg:category": "Options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-o",
              "position": 50
            },
            "id": "#output_format",
            "required": false,
            "type": [
              "null",
              {
                "symbols": [
                  "vcf",
                  "gatk",
                  "bed",
                  "bedAnn"
                ],
                "name": "output_format",
                "type": "enum"
              }
            ]
          },
          {
            "label": "Only use regulation tracks",
            "description": "Only use regulation tracks.",
            "sbg:category": "Database options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-onlyReg",
              "position": 400
            },
            "id": "#onlyreg",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Only use protein coding transcripts",
            "description": "Only use protein coding transcripts. Default: false.",
            "sbg:category": "Database options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-onlyProtein",
              "position": 410
            },
            "id": "#only_protein",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Only use transcripts from this file",
            "description": "Only use the transcripts in this file. Format: One transcript ID per line.",
            "sbg:category": "Database options",
            "sbg:fileTypes": "TXT",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-onlyTr",
              "position": 0
            },
            "id": "#onlyTr",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Add OICR tag in VCF file",
            "description": "Add OICR tag in VCF file.",
            "sbg:category": "Annotations options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-oicr",
              "position": 240
            },
            "id": "#oicr",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Do not create stats (summary) file",
            "description": "Do not create stats (summary) file.",
            "sbg:category": "Options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-noStats",
              "position": 70
            },
            "id": "#nostats",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Do not show 5_PRIME_UTR or 3_PRIME_UTR changes",
            "description": "Do not show 5_PRIME_UTR or 3_PRIME_UTR changes.",
            "sbg:category": "Results filter options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-no-utr",
              "position": 130
            },
            "id": "#no_utr",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Do not show upstream changes",
            "description": "Do not show upstream changes.",
            "sbg:category": "Results filter options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-no-upstream",
              "position": 120
            },
            "id": "#no_upstream",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Do not shift variants according to HGVS",
            "description": "Do not shift variants according to HGVS notation (most 3-prime end).",
            "sbg:category": "Annotations options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-noShiftHgvs",
              "position": 230
            },
            "id": "#no_shift_hgvs",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Disable NextProt annotations",
            "description": "Disable NextProt annotations.",
            "sbg:category": "Database options",
            "sbg:stageInput": null,
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-noNextProt",
              "position": 390
            },
            "id": "#no_next_prot",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Disable motif annotations",
            "description": "Disable motif annotations.",
            "sbg:category": "Database options",
            "sbg:stageInput": null,
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-noMotif",
              "position": 380
            },
            "id": "#no_motif",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Do not add LOF and NMD annotations",
            "description": "Do not add LOF and NMD annotations.",
            "sbg:category": "Annotations options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-noLof",
              "position": 220
            },
            "id": "#no_lof",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Do not show intron changes",
            "description": "Do not show intron changes.",
            "sbg:category": "Results filter options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-no-intron",
              "position": 110
            },
            "id": "#no_intron",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Do not show intergenic changes",
            "description": "Do not show intergenic changes.",
            "sbg:category": "Results filter options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-no-intergenic",
              "position": 100
            },
            "id": "#no_intergenic",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Disable interaction annotations",
            "description": "Disable interaction annotations.",
            "sbg:category": "Database options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-noInteraction",
              "position": 370
            },
            "id": "#no_interaction",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Do not add HGVS annotations",
            "description": "Do not add HGVS annotations.",
            "sbg:category": "Annotations options",
            "sbg:stageInput": null,
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-noHgvs",
              "position": 210
            },
            "id": "#no_hgvs",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Do not load any genomic database",
            "description": "Do not load any genomic database (e.g. annotate using custom files).",
            "sbg:category": "Database options",
            "sbg:stageInput": null,
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-noGenome",
              "position": 360
            },
            "id": "#no_genome",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Do not show downstream changes",
            "description": "Do not show downstream changes.",
            "sbg:category": "Results filter options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-no-downstream",
              "position": 90
            },
            "id": "#no_downstream",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Do not show EffectType",
            "description": "Do not show 'EffectType'. This option can be used several times.",
            "sbg:category": "Results filter options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-no",
              "itemSeparator": null
            },
            "id": "#no_EffectType",
            "required": false,
            "type": [
              "null",
              {
                "items": "string",
                "type": "array"
              }
            ]
          },
          {
            "label": "Disable IUB code expansion",
            "description": "Disable IUB code expansion in input variants.",
            "sbg:category": "Database options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-noExpandIUB"
            },
            "id": "#noExpandIUB",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Annotate using NextProt (requires NextProt database)",
            "description": "Annotate using NextProt (requires NextProt database).",
            "sbg:category": "Database options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-nextProt",
              "position": 350
            },
            "id": "#nextprot",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "True",
            "label": "Annotate using motifs (requires Motif database)",
            "description": "Annotate using motifs (requires Motif database).",
            "sbg:category": "Database options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-motif",
              "position": 340
            },
            "id": "#motif",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Max TSL",
            "description": "Only use transcripts having Transcript Support Level lower than this cutoff.",
            "sbg:category": "Database options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-maxTSL",
              "position": 330
            },
            "id": "#max_tsl",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Use a custom intervals in TXT/BED/BigBed/VCF/GFF file (you may use this option many times)",
            "description": "Use a custom intervals in TXT/BED/BigBed/VCF/GFF file (you may use this option many times).",
            "sbg:category": "Database options",
            "sbg:stageInput": null,
            "sbg:fileTypes": "TXT, BED, BigBed, VCF, GFF",
            "inputBinding": {
              "prefix": "-interval",
              "separate": true,
              "sbg:cmdInclude": true,
              "position": 320,
              "itemSeparator": null
            },
            "id": "#interval",
            "required": false,
            "type": [
              "null",
              {
                "items": "File",
                "type": "array"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "True",
            "label": "Annotate using interactions",
            "description": "Annotate using inteactions (requires interaciton database). Default: true.",
            "sbg:category": "Database options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-interaction",
              "position": 310
            },
            "id": "#interaction",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "vcf",
            "label": "Input format",
            "description": "Input format. Possible values: {vcf, txt, pileup, bed}. [Default: vcf].",
            "sbg:category": "Options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-i",
              "position": 40
            },
            "id": "#input_format",
            "required": false,
            "type": [
              "null",
              {
                "symbols": [
                  "vcf",
                  " bed"
                ],
                "name": "input_format",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Use transcript ID in HGVS",
            "description": "Use transcript ID in HGVS notation. Default: false.",
            "sbg:category": "Annotations options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-hgvsTrId",
              "position": 190
            },
            "id": "#hgvs_tr_id",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Use one letter Amino acid codes in HGVS",
            "description": "Use one letter Amino acid codes in HGVS notation. Default: false.",
            "sbg:category": "Annotations options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-hgvs1LetterAa",
              "position": 180
            },
            "id": "#hgvs_1_letter",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Use old HGVS notation",
            "description": "Use old HGVS notation.",
            "sbg:category": "Annotations options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-hgvsOld"
            },
            "id": "#hgvsOld",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Use gene ID instead of gene name (VCF output)",
            "description": "Use gene ID instead of gene name (VCF output). Default: false.",
            "sbg:category": "Annotations options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-geneId",
              "position": 170
            },
            "id": "#geneid",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Use EFF field",
            "description": "Use 'EFF' field compatible with older versions (instead of 'ANN').",
            "sbg:category": "Annotations options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-formatEff",
              "position": 160
            },
            "id": "#format_eff",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Only analyze changes that intersect with the intervals specified in this file (you may use this option many times)",
            "sbg:altPrefix": "-fi",
            "description": "Only analyze changes that intersect with the intervals specified in this file.",
            "sbg:category": "Results filter options",
            "sbg:fileTypes": "interval",
            "inputBinding": {
              "prefix": "-filterInterval",
              "separate": true,
              "sbg:cmdInclude": true,
              "position": 80,
              "itemSeparator": null
            },
            "id": "#filterinterval",
            "required": false,
            "type": [
              "null",
              {
                "items": "File",
                "type": "array"
              }
            ]
          },
          {
            "label": "SnpEff database file",
            "description": "SnpEff database file is zip archive that can be downloaded from the SnpEff official site, or using the SnpEff download app.",
            "sbg:category": "File type inputs",
            "sbg:fileTypes": "ZIP",
            "id": "#database",
            "required": true,
            "type": [
              "File"
            ]
          },
          {
            "label": "Create CSV summary file alongside HTML",
            "description": "Create CSV summary file alongside HTML.",
            "sbg:category": "Options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-csvStats",
              "valueFrom": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  if ($job.inputs.csvstats)\n  {\n    return $job.inputs.csvstats.concat(\".csv\")\n  }\n//  else\n//  {\n//    return \"SNPEff_report.csv\"\n//  }\n}\n"
              },
              "position": 20
            },
            "id": "#csvstats",
            "required": false,
            "type": [
              "null",
              "string"
            ]
          },
          {
            "sbg:altPrefix": "-config",
            "label": "Configuration file",
            "description": "Specify config file.",
            "sbg:category": "Generic options",
            "sbg:stageInput": "link",
            "type": [
              "null",
              "File"
            ],
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-c",
              "position": 260
            },
            "id": "#configuration_file",
            "required": false,
            "sbg:fileTypes": "config"
          },
          {
            "label": "Override a config file option (name=value format)",
            "description": "Override a config file option. Please note that the options should be entered in name=value format.",
            "sbg:category": "Generic options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-configOption",
              "itemSeparator": null
            },
            "id": "#configOption",
            "required": false,
            "type": [
              "null",
              {
                "items": "string",
                "type": "array"
              }
            ]
          },
          {
            "label": "Use old style annotations",
            "description": "Use old style annotations instead of Sequence Ontology and Hgvs.",
            "sbg:category": "General options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-classic",
              "position": 10
            },
            "id": "#classic",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "String to prepend to chromosome names",
            "description": "Prepend 'string' to chromosome name (e.g. 'chr1' instead of '1'). Only on TXT output.",
            "sbg:category": "Options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-chr",
              "position": 55
            },
            "id": "#chr",
            "required": false,
            "type": [
              "null",
              "string"
            ]
          },
          {
            "label": "Canon list file",
            "description": "Only use canonical transcripts, replace some transcripts using the 'gene_id \t transcript_id' entries in <file>.",
            "sbg:category": "Database options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-canonList"
            },
            "id": "#canonList",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          },
          {
            "label": "Only use canonical transcripts",
            "description": "Only use canonical transcripts.",
            "sbg:category": "Database options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-canon",
              "position": 300
            },
            "id": "#canon",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Two column TXT file defining 'original and derived' samples",
            "description": "Two column TXT file defining 'original \\t derived' samples.",
            "sbg:category": "Annotations options",
            "sbg:fileTypes": "TXT",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-cancerSamples",
              "position": 150
            },
            "id": "#cancersamples",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Perform 'cancer' comparisons (somatic vs. germline)",
            "description": "Perform 'cancer' comparisons (somatic vs. germline).",
            "sbg:category": "Annotations options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-cancer",
              "position": 140
            },
            "id": "#cancer",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Assembly (genome version)",
            "description": "Genome version matching the SnpEff database used (for example GRCh37.75 or GRCh38.86).",
            "sbg:category": "Inputs",
            "inputBinding": {
              "separate": false,
              "sbg:cmdInclude": true,
              "position": 2000
            },
            "id": "#assembly",
            "required": true,
            "type": [
              "string"
            ]
          },
          {
            "label": "Add loss of function (LOF) and nonsense mediated decay (NMD) tags",
            "description": "Add loss of function (LOF) and nonsense mediated decay (NMD) tags.",
            "sbg:category": "Annotations options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-lof",
              "position": 200
            },
            "id": "#add_lof_tag",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "True",
            "label": "Use HGVS annotations for amino acid sub-field",
            "description": "Use HGVS annotations for amino acid sub-field. Default: true.",
            "sbg:category": "Annotations options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-hgvs",
              "position": 170
            },
            "id": "#add_hgvs_anno",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          }
        ],
        "baseCommand": [
          {
            "class": "Expression",
            "engine": "#cwl-js-engine",
            "script": "{\n  return 'unzip -o ' + $job.inputs.database.path + ' -d /opt/snpEff ;'\n}"
          },
          "java",
          {
            "class": "Expression",
            "engine": "#cwl-js-engine",
            "script": "{\n  //java -Xmx4g path/to/snpEff/snpEff.jar -c path/to/snpEff/snpEff.config GRCh37.75 path/to/snps.vcf\n  if($job.inputs.total_memory){\n    mem_mb = parseInt($job.inputs.total_memory) * 1024\n  \treturn '-Xmx'.concat(mem_mb, 'M')\n  }\n  \treturn '-Xmx8192M'\n}\n\n"
          },
          "-jar",
          "/opt/snpEff/snpEff.jar"
        ],
        "sbg:links": [
          {
            "label": "Homepage",
            "id": "http://snpeff.sourceforge.net/index.html"
          },
          {
            "label": "Source Code",
            "id": "https://github.com/pcingola/SnpEff"
          },
          {
            "label": "Wiki",
            "id": "http://snpeff.sourceforge.net/SnpEff_manual.html"
          },
          {
            "label": "Download",
            "id": "http://sourceforge.net/projects/snpeff/files/snpEff_latest_core.zip"
          },
          {
            "label": "Publication",
            "id": "http://snpeff.sourceforge.net/SnpEff_paper.pdf"
          }
        ],
        "sbg:revision": 0,
        "sbg:copyOf": "admin/sbg-public-data/snpeff-4-3/2",
        "sbg:sbgMaintained": false,
        "sbg:projectName": "G-DOC v3 Transplant_ RNAseq",
        "class": "CommandLineTool",
        "y": 103.25981037291214,
        "appUrl": "/u/YUGUSEV/transplant-rejection-rnaseq/apps/#YUGUSEV/transplant-rejection-rnaseq/snpeff-4-3/0",
        "sbg:categories": [
          "Annotation",
          "VCF-Processing"
        ],
        "sbg:license": "GNU Lesser General Public License v3.0 only",
        "sbg:cmdPreview": "unzip -o /path/to/database/GRCh37.75.zip -d /opt/snpEff ; java -Xmx3072M -jar /opt/snpEff/snpEff.jar  -nodownload  -noLog GRCh37.75  path/to/variants/variants_file.vcf  > variants_file.snpEff_annotated.vcf",
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerImageId": "aae3dcb89b53",
            "dockerPull": "images.sbgenomics.com/jrandjelovic/snpeff:v4.3k"
          },
          {
            "value": 1,
            "class": "sbg:CPURequirement"
          },
          {
            "value": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  if ($job.inputs.total_memory)\n  {\n    return $job.inputs.total_memory * 1024\n  }\n  \n  else\n  {\n    return 8192\n  }\n}"
            },
            "class": "sbg:MemRequirement"
          }
        ],
        "sbg:modifiedOn": 1518577317,
        "sbg:toolkitVersion": "4.3k",
        "sbg:validationErrors": [],
        "temporaryFailCodes": [],
        "sbg:id": "YUGUSEV/transplant-rejection-rnaseq/snpeff-4-3/0",
        "sbg:latestRevision": 0,
        "id": "YUGUSEV/transplant-rejection-rnaseq/snpeff-4-3/0",
        "sbg:job": {
          "inputs": {
            "no_interaction": false,
            "no_next_prot": false,
            "no_motif": false,
            "input_format": "vcf",
            "no_hgvs": false,
            "hgvsOld": true,
            "add_hgvs_anno": false,
            "classic": false,
            "format_eff": false,
            "database": {
              "secondaryFiles": [],
              "metadata": {},
              "path": "/path/to/database/GRCh37.75.zip"
            },
            "hgvs_tr_id": false,
            "splice_region_exons_size": null,
            "no_EffectType": [
              "no_EffectType-string-value-1",
              "no_EffectType-string-value-2"
            ],
            "splice_region_intron_min": 7,
            "max_tsl": null,
            "onlyTr": {
              "class": "File",
              "secondaryFiles": [],
              "size": 0,
              "path": "/path/to/onlyTr.ext"
            },
            "nostats": false,
            "no_genome": false,
            "only_protein": false,
            "assembly": "GRCh37.75",
            "configuration_file": {
              "class": "File",
              "secondaryFiles": [],
              "size": 0,
              "path": null
            },
            "splice_site_region_intron_max": 8,
            "no_shift_hgvs": false,
            "chr": "",
            "hgvs_1_letter": false,
            "stats": "st",
            "oicr": false,
            "threads": false,
            "up_down_stream_len": null,
            "strict": false,
            "no_lof": false,
            "output_format": "vcf",
            "csvstats": "",
            "noExpandIUB": true,
            "configOption": null,
            "total_memory": 3,
            "variants_file": {
              "class": "File",
              "secondaryFiles": [],
              "size": 0,
              "path": "path/to/variants/variants_file.vcf"
            },
            "interval": [
              {
                "class": "File",
                "secondaryFiles": [],
                "size": 0,
                "path": "/path/to/interval-1.ext"
              },
              {
                "class": "File",
                "secondaryFiles": [],
                "size": 0,
                "path": "/path/to/interval-2.ext"
              }
            ],
            "interaction": false
          },
          "allocatedResources": {
            "cpu": 1,
            "mem": 3072
          }
        },
        "outputs": [
          {
            "label": "Summary",
            "description": "SnpEff Summary in text format.",
            "sbg:fileTypes": "TXT",
            "type": [
              "null",
              "File"
            ],
            "id": "#summary_text",
            "outputBinding": {
              "glob": "*.txt",
              "sbg:inheritMetadataFrom": "#variants_file"
            }
          },
          {
            "label": "Summary file",
            "description": "SnpEff summary file in HTML or CSV file format.",
            "sbg:fileTypes": "HTML, CSV",
            "type": [
              "null",
              {
                "items": "File",
                "type": "array"
              }
            ],
            "id": "#summary",
            "outputBinding": {
              "glob": "*.{html,csv}",
              "sbg:inheritMetadataFrom": "#variants_file"
            }
          },
          {
            "label": "SnpEff Annotated file",
            "description": "SnpEff Annotated file.",
            "sbg:fileTypes": "VCF, TXT, GATK, BED, BEDANN",
            "type": [
              "null",
              "File"
            ],
            "id": "#annotated",
            "outputBinding": {
              "glob": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\t\n  filename = $job.inputs.variants_file.path\n  basename = filename.split('.').slice(0, filename.split('.').length-1).join('.').replace(/^.*[\\\\\\/]/, '')\n \n  \n  if($job.inputs.output_format === \"txt\")\n  {\n    return basename.concat(\".snpEff_annotated.txt\")\n  }\n  else if ($job.inputs.output_format === \"bed\" || $job.inputs.output_format === \"bedAnn\")\n  {\n    return basename.concat(\".snpEff_annotated.bed\")\n  }\n  else\n  {\n    return basename.concat(\".snpEff_annotated.vcf\")\n  }\n}"
              },
              "sbg:metadata": {},
              "sbg:inheritMetadataFrom": "#variants_file"
            }
          }
        ],
        "description": "**SnpEff** is a variant annotation and effect prediction\u200b tool, which annotates and predicts the effects of variants on genes, such as amino acid changes [1].\n\n*A list of **all inputs and parameters** with corresponding descriptions can be found at the end of the page.*\n\n### Common Use Cases\n\nTypical usage assumes predicted variants (SNPs, insertions, deletions, and MNPs) as input, usually in variant call format (VCF). **SnpEff** analyzes and annotates input variants and calculates the effects they produce on known genes [1]. The output file can be in several file formats, most common being VCF.\n\n**SnpEff** requires an annotation database to run. Official SnpEff annotation databases can be downloaded from [here](https://sourceforge.net/projects/snpeff/files/databases/v4_3/); however, human databases are also hosted on Seven Bridges, in Public Reference Files section (files snpEff_v4_3_GRCh38.86.zip and\tsnpEff_v4_3_GRCh37.75.zip) and can be [imported](https://docs.sevenbridges.com/docs/copy-files-using-the-visual-interface).\n\n### Changes Introduced by Seven Bridges\n\n* Input VCF file (**Input variants file**) is required (as opposed to default input being STDIN).\n* Parameter **Java memory requirement [Gb]** which controls the amount of RAM available to **SnpEff** was included in the wrapper.\n* The following parameters have been excluded from the wrapper:  \n    * `-download`  - The tool is expected to use data from the provided database archive.\n    * `-fileList` - Processing multiple files can be achieved by using batch tasks or scatter mode in workflows.\n    * `-dataDir <path>`  - In the wrapper, data directory is always the same and corresponds to the location of the prepared **SnpEff** database.\n    * `-download`  - Supplying a database archive as an input is required. Downloading missing data for a genome from command line is not supported.\n    * `-help`, `-quiet`, `-verbose`, `-debug` and `-version` - These options are not usually included in Seven Bridges wrappers.\n\n### Common Issues and Important Notes\n\n* Required inputs are **Input variants file** (a VCF or VCF.GZ file to be annotated), **SnpEff database file** (SnpEff database ZIP archive matching the major version of SnpEff used [2], which is 4.3 for this wrapper; e.g. snpEff_v4_3_GRCh38.86.zip or snpEff_v4_3_GRCh37.75.zip from Public Reference Files section), and **Assembly (genome version)**, which is a string representing genome version/assembly (e.g., GRCh38.86, GRCh37.75, hg19), matching the SnpEff database used (GRCh38.86 and GRCh37.75 should be used for the files in the Public Reference Files section).\n* As **SnpEff** is a java tool, it may be occasionally necessary to increase the amount of allocated RAM (default value: 8192 MB), using the **Java memory requirement [Gb]** parameter.\n* A number of **SnpEff** command line options are designed in mutually exclusive pairs (for example `-noStats` and `-stats` or `-lof` and `-noLof`) with some redundancy. These options should not be used together, to avoid task failure.\n* Multithreading parameter **Use multiple threads (implies '-noStats')** (`-t`) will disable statistics. \n* Disabling statistics using **Do not create stats (summary) file** (`-noStats`) will in general speed-up execution.\n\n### Performance Benchmarking\n\nAnnotating NA12878 genome (GRCh38, ~220 Mb as VCF.GZ) with default annotation parameters, 1 CPU, and 8192 MB RAM took 25 minutes with a cost of $0.17 using on-demand default instance.\nBy default, **SnpEff** is allocated 8192 MB of memory. Allocating less memory is not recommended when working with whole genome VCF files.\n\n*Cost can be significantly reduced by **spot instance** usage. Visit [knowledge center](https://docs.sevenbridges.com/docs/about-spot-instances) for more details.*            \n\n### References\n\n[1] [SnpEff documentation](http://snpeff.sourceforge.net/SnpEff_manual.html)\n\n[2] [Official SnpEff 4.3 databases download location](https://sourceforge.net/projects/snpeff/files/databases/v4_3/)",
        "sbg:project": "YUGUSEV/transplant-rejection-rnaseq",
        "sbg:image_url": null,
        "sbg:createdOn": 1518577317,
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "sbg:contributors": [
          "kb472"
        ],
        "sbg:toolAuthor": "Pablo Cingolani/Broad Institue",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "kb472",
            "sbg:revisionNotes": "Copy of admin/sbg-public-data/snpeff-4-3/2",
            "sbg:modifiedOn": 1518577317,
            "sbg:revision": 0
          }
        ],
        "sbg:toolkit": "SnpEff",
        "sbg:publisher": "sbg",
        "stdin": "",
        "successCodes": []
      },
      "sbg:y": 103.25981037291214,
      "id": "#SnpEff"
    },
    {
      "inputs": [
        {
          "id": "#GATK_SplitNCigarReads.variant_index_type"
        },
        {
          "id": "#GATK_SplitNCigarReads.variant_index_parameter"
        },
        {
          "id": "#GATK_SplitNCigarReads.validation_strictness"
        },
        {
          "id": "#GATK_SplitNCigarReads.use_original_qualities"
        },
        {
          "id": "#GATK_SplitNCigarReads.unsafe",
          "default": "ALLOW_N_CIGAR_READS"
        },
        {
          "id": "#GATK_SplitNCigarReads.threads_per_job"
        },
        {
          "id": "#GATK_SplitNCigarReads.tag"
        },
        {
          "id": "#GATK_SplitNCigarReads.sites_only"
        },
        {
          "id": "#GATK_SplitNCigarReads.simplify_bam"
        },
        {
          "id": "#GATK_SplitNCigarReads.show_bam_list"
        },
        {
          "id": "#GATK_SplitNCigarReads.sample_rename_mapping_file"
        },
        {
          "id": "#GATK_SplitNCigarReads.remove_program_records"
        },
        {
          "source": [
            "#SBG_FASTA_Indices.fasta_reference"
          ],
          "id": "#GATK_SplitNCigarReads.reference"
        },
        {
          "id": "#GATK_SplitNCigarReads.refactor_NDN_cigar_string"
        },
        {
          "source": [
            "#Picard_ReorderSam.reordered_bam"
          ],
          "id": "#GATK_SplitNCigarReads.reads"
        },
        {
          "id": "#GATK_SplitNCigarReads.read_quality_true",
          "default": 60
        },
        {
          "id": "#GATK_SplitNCigarReads.read_quality_false",
          "default": 255
        },
        {
          "id": "#GATK_SplitNCigarReads.read_group_black_list"
        },
        {
          "id": "#GATK_SplitNCigarReads.read_filter",
          "default": [
            "ReassignOneMappingQualityFilter"
          ]
        },
        {
          "id": "#GATK_SplitNCigarReads.quantize_quals"
        },
        {
          "id": "#GATK_SplitNCigarReads.preserve_qscores_less_than"
        },
        {
          "id": "#GATK_SplitNCigarReads.phone_home"
        },
        {
          "id": "#GATK_SplitNCigarReads.performance_log"
        },
        {
          "id": "#GATK_SplitNCigarReads.pedigree_validation_type"
        },
        {
          "id": "#GATK_SplitNCigarReads.pedigree_string"
        },
        {
          "id": "#GATK_SplitNCigarReads.pedigree"
        },
        {
          "id": "#GATK_SplitNCigarReads.num_bam_file_handles"
        },
        {
          "id": "#GATK_SplitNCigarReads.non_deterministic_random_seed"
        },
        {
          "id": "#GATK_SplitNCigarReads.never_trim_vcf_format_field"
        },
        {
          "id": "#GATK_SplitNCigarReads.monitor_thread_efficiency"
        },
        {
          "id": "#GATK_SplitNCigarReads.memory_per_job",
          "default": 6144
        },
        {
          "id": "#GATK_SplitNCigarReads.memory_overhead_per_job",
          "default": null
        },
        {
          "id": "#GATK_SplitNCigarReads.max_runtime_units"
        },
        {
          "id": "#GATK_SplitNCigarReads.max_runtime"
        },
        {
          "id": "#GATK_SplitNCigarReads.max_reads_in_memory"
        },
        {
          "id": "#GATK_SplitNCigarReads.max_mismatches_in_overhang"
        },
        {
          "id": "#GATK_SplitNCigarReads.max_bases_in_overhang"
        },
        {
          "id": "#GATK_SplitNCigarReads.keep_program_records"
        },
        {
          "id": "#GATK_SplitNCigarReads.intervals_string"
        },
        {
          "id": "#GATK_SplitNCigarReads.intervals_file"
        },
        {
          "id": "#GATK_SplitNCigarReads.interval_set_rule"
        },
        {
          "id": "#GATK_SplitNCigarReads.interval_padding"
        },
        {
          "id": "#GATK_SplitNCigarReads.interval_merging"
        },
        {
          "id": "#GATK_SplitNCigarReads.global_q_score_prior"
        },
        {
          "id": "#GATK_SplitNCigarReads.generate_md5"
        },
        {
          "id": "#GATK_SplitNCigarReads.gatk_key"
        },
        {
          "id": "#GATK_SplitNCigarReads.fix_misencoded_quals"
        },
        {
          "id": "#GATK_SplitNCigarReads.emit_original_quals"
        },
        {
          "id": "#GATK_SplitNCigarReads.downsampling_type"
        },
        {
          "id": "#GATK_SplitNCigarReads.downsample_to_fraction"
        },
        {
          "id": "#GATK_SplitNCigarReads.downsample_to_coverage"
        },
        {
          "id": "#GATK_SplitNCigarReads.do_not_fix_overhangs"
        },
        {
          "id": "#GATK_SplitNCigarReads.disable_read_filter"
        },
        {
          "id": "#GATK_SplitNCigarReads.disable_indel_quals"
        },
        {
          "id": "#GATK_SplitNCigarReads.disable_bam_indexing"
        },
        {
          "id": "#GATK_SplitNCigarReads.disable_auto_index"
        },
        {
          "id": "#GATK_SplitNCigarReads.default_base_qualities"
        },
        {
          "id": "#GATK_SplitNCigarReads.cpu_per_job"
        },
        {
          "id": "#GATK_SplitNCigarReads.bqsr"
        },
        {
          "id": "#GATK_SplitNCigarReads.baq_gap_open_penalty"
        },
        {
          "id": "#GATK_SplitNCigarReads.baq"
        },
        {
          "id": "#GATK_SplitNCigarReads.bam_compression"
        },
        {
          "id": "#GATK_SplitNCigarReads.allow_potentailly_misencoded_quals"
        }
      ],
      "outputs": [
        {
          "id": "#GATK_SplitNCigarReads.n_cigar_split_bam"
        }
      ],
      "sbg:x": 749.4118885701146,
      "run": {
        "sbg:modifiedBy": "kb472",
        "sbg:revisionNotes": "[from Darko] You need to deselect (turn off) checkbox \"Include in command line\" for memory_per_job on INPUTS section on tool level.",
        "sbg:modifiedOn": 1519095582,
        "inputs": [
          {
            "sbg:toolDefaultValue": "",
            "label": "Variant index type",
            "sbg:altPrefix": "-variant_index_type",
            "description": "Type of IndexCreator to use for VCF/BCF indices.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--variant_index_type",
              "itemSeparator": " "
            },
            "id": "#variant_index_type",
            "type": [
              "null",
              {
                "symbols": [
                  "DYNAMIC_SEEK",
                  "DYNAMIC_SIZE",
                  "LINEAR",
                  "INTERVAL"
                ],
                "name": "variant_index_type",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "-1",
            "label": "Variant index parameter",
            "sbg:altPrefix": "-variant_index_parameter",
            "description": "Parameter to pass to the VCF/BCF IndexCreator.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--variant_index_parameter",
              "itemSeparator": " "
            },
            "id": "#variant_index_parameter",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "SILENT",
            "label": "Validation Strictness",
            "sbg:altPrefix": "-S",
            "description": "How strict should we be with validation.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--validation_strictness",
              "itemSeparator": " "
            },
            "id": "#validation_strictness",
            "type": [
              "null",
              {
                "symbols": [
                  "SILENT",
                  "LENIENT",
                  "STRICT"
                ],
                "name": "validation_strictness",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Use Original Qualities",
            "sbg:altPrefix": "-OQ",
            "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--useOriginalQualities",
              "itemSeparator": " "
            },
            "id": "#use_original_qualities",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Unsafe",
            "sbg:altPrefix": "-U",
            "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--unsafe",
              "itemSeparator": " "
            },
            "id": "#unsafe",
            "type": [
              "null",
              {
                "symbols": [
                  "ALLOW_N_CIGAR_READS",
                  "ALLOW_UNINDEXED_BAM",
                  "ALLOW_UNSET_BAM_SORT_ORDER",
                  "NO_READ_ORDER_VERIFICATION",
                  "ALLOW_SEQ_DICT_INCOMPATIBILITY",
                  "LENIENT_VCF_PROCESSING",
                  "ALL"
                ],
                "name": "unsafe",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "0",
            "label": "Threads per job",
            "sbg:altPrefix": null,
            "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used. Set to 0 for auto-detect (use with caution,as auto-detect will find the optimal value in most cases).",
            "sbg:category": "Execution",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "",
              "itemSeparator": " "
            },
            "id": "#threads_per_job",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Tag",
            "sbg:altPrefix": "-tag",
            "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--tag",
              "itemSeparator": " "
            },
            "id": "#tag",
            "type": [
              "null",
              "string"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Siteslo only",
            "sbg:altPrefix": "-sites_only",
            "description": "Just output sites without genotypes (i.e. only the first 8 columns of the VCF).",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--sites_only",
              "itemSeparator": " "
            },
            "id": "#sites_only",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Simplify bam",
            "sbg:altPrefix": "-simplifyBAM",
            "description": "If provided, output BAM files will be simplified to include just key reads for downstream variation discovery analyses (removing duplicates, PF-, non-primary reads), as well stripping all extended tags from the kept reads except the read group identifier.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--simplifyBAM",
              "itemSeparator": " "
            },
            "id": "#simplify_bam",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "BAM list log entry",
            "sbg:altPrefix": "",
            "description": "Emit a log entry (level INFO) containing the full list of sequence data files to be includedin the analysis (including files inside .bam.list files).",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--showFullBamList",
              "itemSeparator": " "
            },
            "id": "#show_bam_list",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Sample rename mapping file",
            "sbg:altPrefix": "-sample_rename_mapping_file",
            "description": "Rename sample IDs on-the-fly at runtime using the provided mapping file.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--sample_rename_mapping_file",
              "itemSeparator": " "
            },
            "id": "#sample_rename_mapping_file",
            "type": [
              "null",
              "string"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Remove Program Records",
            "sbg:altPrefix": "-rpr",
            "description": "Should we override the Walker's default and remove program records from the SAM header.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--remove_program_records",
              "itemSeparator": " "
            },
            "id": "#remove_program_records",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Reference Genome",
            "sbg:altPrefix": "-R",
            "description": "Reference Genome in FASTA format.",
            "sbg:category": "Input Files",
            "sbg:fileTypes": "FASTA, FA",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--reference_sequence",
              "itemSeparator": " "
            },
            "id": "#reference",
            "required": true,
            "type": [
              "File"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Refactor ndn cigar string",
            "sbg:altPrefix": "-fixNDN",
            "description": "Refactor cigar string with NDN elements to one element.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--refactor_NDN_cigar_string",
              "itemSeparator": " "
            },
            "id": "#refactor_NDN_cigar_string",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Read sequences",
            "sbg:altPrefix": "-I",
            "description": "Read sequences in BAM format.",
            "sbg:category": "Input Files",
            "sbg:fileTypes": "CRAM, BAM",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--input_file",
              "itemSeparator": null
            },
            "id": "#reads",
            "required": true,
            "type": [
              {
                "items": "File",
                "name": "reads",
                "type": "array"
              }
            ]
          },
          {
            "label": "RMQT",
            "sbg:stageInput": null,
            "id": "#read_quality_true",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "RMQF",
            "sbg:stageInput": null,
            "id": "#read_quality_false",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "[]",
            "label": "Read Group Black List",
            "sbg:altPrefix": "-rgbl",
            "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--read_group_black_list",
              "itemSeparator": " "
            },
            "id": "#read_group_black_list",
            "type": [
              "null",
              {
                "items": "string",
                "type": "array"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "[]",
            "label": "Read Filter",
            "sbg:altPrefix": "-rf",
            "description": "Specify filtration criteria to apply to each read individually.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--read_filter",
              "itemSeparator": " ",
              "valueFrom": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  var filter = [].concat($job.inputs.read_filter)[0]\n  var RMQF = $job.inputs.read_quality_false\n  var RMQT = $job.inputs.read_quality_true\n  if (filter == \"ReassignOneMappingQualityFilter\" && RMQF && RMQT) {\n    filter = filter.substr(0, filter.length-6)\n    return filter.concat(\" -RMQF \", RMQF, \" -RMQT \", RMQT)\n  } else {\n    return $job.inputs.read_filter[0]\n  }\n}"
              }
            },
            "id": "#read_filter",
            "type": [
              "null",
              {
                "items": {
                  "symbols": [
                    "BadCigarFilter",
                    "BadMateFilter",
                    "CountingFilteringIterator.CountingReadFilter",
                    "DuplicateReadFilter",
                    "FailsVendorQualityCheckFilter",
                    "HCMappingQualityFilter",
                    "LibraryReadFilter",
                    "MalformedReadFilter",
                    "MappingQualityFilter",
                    "MappingQualityUnavailableFilter",
                    "MappingQualityZeroFilter",
                    "MateSameStrandFilter",
                    "MaxInsertSizeFilter",
                    "MissingReadGroupFilter",
                    "NoOriginalQualityScoresFilter",
                    "NotPrimaryAlignmentFilter",
                    "OverclippedReadFilter",
                    "Platform454Filter",
                    "PlatformFilter",
                    "PlatformUnitFilter",
                    "ReadGroupBlackListFilter",
                    "ReadLengthFilter",
                    "ReadNameFilter",
                    "ReadStrandFilter",
                    "ReassignMappingQualityFilter",
                    "ReassignOneMappingQualityFilter",
                    "SampleFilter",
                    "SingleReadGroupFilter",
                    "UnmappedReadFilter"
                  ],
                  "name": "read_filter",
                  "type": "enum"
                },
                "name": "read_filter",
                "type": "array"
              }
            ]
          },
          {
            "label": "Quantize BQ Scores",
            "sbg:altPrefix": "-qq",
            "description": "Quantize quality scores to a given number of levels (with -BQSR).",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--quantize_quals",
              "itemSeparator": " "
            },
            "id": "#quantize_quals",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "6",
            "label": "Preserve Qscores Less Than",
            "sbg:altPrefix": "-preserveQ",
            "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR).",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--preserve_qscores_less_than",
              "itemSeparator": " "
            },
            "id": "#preserve_qscores_less_than",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "AWS",
            "label": "Phone Home",
            "sbg:altPrefix": "-et",
            "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--phone_home",
              "itemSeparator": " "
            },
            "id": "#phone_home",
            "type": [
              "null",
              {
                "symbols": [
                  "NO_ET",
                  "AWS",
                  "STDOUT"
                ],
                "name": "phone_home",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Runtime performance log",
            "sbg:altPrefix": "-PF",
            "description": "Write GATK runtime performance long. Specify the file name of this log.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--performanceLog",
              "itemSeparator": " "
            },
            "id": "#performance_log",
            "type": [
              "null",
              "string"
            ]
          },
          {
            "sbg:toolDefaultValue": "STRICT",
            "label": "Pedigree Validation Type",
            "sbg:altPrefix": "-pedValidationType",
            "description": "How strict should we be in validating the pedigree information?.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--pedigreeValidationType",
              "itemSeparator": " "
            },
            "id": "#pedigree_validation_type",
            "type": [
              "null",
              {
                "symbols": [
                  "STRICT",
                  "SILENT"
                ],
                "name": "pedigree_validation_type",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "[]",
            "label": "Pedigree String",
            "sbg:altPrefix": "-pedString",
            "description": "Pedigree string for samples.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--pedigreeString",
              "itemSeparator": " "
            },
            "id": "#pedigree_string",
            "type": [
              "null",
              {
                "items": "string",
                "type": "array"
              }
            ]
          },
          {
            "label": "Pedigree",
            "sbg:altPrefix": "-ped",
            "description": "Pedigree files for samples.",
            "sbg:category": "Input Files",
            "sbg:fileTypes": "PED, TXT",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--pedigree",
              "itemSeparator": null
            },
            "id": "#pedigree",
            "required": false,
            "type": [
              "null",
              {
                "items": "File",
                "name": "pedigree",
                "type": "array"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Num bam file handles",
            "sbg:altPrefix": "-bfh",
            "description": "Total number of BAM file handles to keep open simultaneously.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--num_bam_file_handles",
              "itemSeparator": " "
            },
            "id": "#num_bam_file_handles",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Non Deterministic Random Seed",
            "sbg:altPrefix": "-ndrs",
            "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--nonDeterministicRandomSeed",
              "itemSeparator": " "
            },
            "id": "#non_deterministic_random_seed",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Never trim vcf format field",
            "sbg:altPrefix": "-writeFullFormat",
            "description": "Always output all the records in VCF FORMAT fields, even if some are missing.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--never_trim_vcf_format_field",
              "itemSeparator": " "
            },
            "id": "#never_trim_vcf_format_field",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Monitor thread efficiency",
            "sbg:altPrefix": "-mte",
            "description": "Enable threading efficiency monitoring.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--monitorThreadEfficiency",
              "itemSeparator": " "
            },
            "id": "#monitor_thread_efficiency",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "2048",
            "label": "Memory per job",
            "description": "Amount of RAM memory to be used per job. Defaults to 2048MB for Single threaded jobs,and all of the available memory on the instance for multi-threaded jobs. .",
            "sbg:category": "Execution",
            "id": "#memory_per_job",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "0",
            "label": "Memory overhead per job",
            "sbg:altPrefix": null,
            "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
            "sbg:category": "Execution",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "",
              "itemSeparator": " "
            },
            "id": "#memory_overhead_per_job",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "MINUTES",
            "label": "Max Runtime Units",
            "sbg:altPrefix": "-maxRuntimeUnits",
            "description": "The TimeUnit for maxRuntime.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--maxRuntimeUnits",
              "itemSeparator": " "
            },
            "id": "#max_runtime_units",
            "type": [
              "null",
              {
                "symbols": [
                  "NANOSECONDS",
                  "MICROSECONDS",
                  "MILLISECONDS",
                  "SECONDS",
                  "MINUTES",
                  "HOURS",
                  "DAYS"
                ],
                "name": "max_runtime_units",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "-1",
            "label": "Max Runtime",
            "sbg:altPrefix": "maxRuntime",
            "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--maxRuntime",
              "itemSeparator": " "
            },
            "id": "#max_runtime",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "150000",
            "label": "Max reads in memory",
            "sbg:altPrefix": "-maxInMemory",
            "description": "Max reads allowed to be kept in memory at a time by the bam writer. If there are more than this many mismatches within the overhang regions, the whole overhang will get hard-clipped out. It is still possible in some cases that the overhang could get clipped if the number of mismatches do not exceed this value, e.g. if most of the overhang mismatches.",
            "sbg:category": "Execution",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--maxReadsInMemory",
              "itemSeparator": " "
            },
            "id": "#max_reads_in_memory",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "1",
            "label": "Max mismatches in overhang",
            "sbg:altPrefix": "-maxMismatches",
            "description": "Number of mismatches allowed in the overhang. If there are more than this many mismatches within the overhang regions, the whole overhang will get hard-clipped out. It is still possible in some cases that the overhang could get clipped if the number of mismatches do not exceed this value, e.g. if most of the overhang mismatches.",
            "sbg:category": "Split Cigar",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--maxMismatchesInOverhang",
              "itemSeparator": " "
            },
            "id": "#max_mismatches_in_overhang",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "40",
            "label": "Max bases in overhang",
            "sbg:altPrefix": "-maxOverhang",
            "description": "Number of bases allowed in the overhang. If there are more than this many bases in the overhang, we won't try to hard-clip them out.",
            "sbg:category": "Split Cigar",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--maxBasesInOverhang",
              "itemSeparator": " "
            },
            "id": "#max_bases_in_overhang",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Keep Program Records",
            "sbg:altPrefix": "-kpr",
            "description": "Should we override the Walker's default and keep program records from the SAM header.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--keep_program_records",
              "itemSeparator": " "
            },
            "id": "#keep_program_records",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Intervals",
            "sbg:altPrefix": "-L",
            "description": "One or more genomic intervals over which to operate.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--intervals",
              "itemSeparator": " "
            },
            "id": "#intervals_string",
            "type": [
              "null",
              "string"
            ]
          },
          {
            "label": "Intervals",
            "sbg:altPrefix": "-L",
            "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file.",
            "sbg:category": "Input Files",
            "sbg:fileTypes": "TXT, BED, VCF",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--intervals",
              "itemSeparator": " "
            },
            "id": "#intervals_file",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          },
          {
            "sbg:toolDefaultValue": "UNION",
            "label": "Interval Set Rule",
            "sbg:altPrefix": "-isr",
            "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--interval_set_rule",
              "itemSeparator": " "
            },
            "id": "#interval_set_rule",
            "type": [
              "null",
              {
                "symbols": [
                  "UNION",
                  "INTERSECTION"
                ],
                "name": "interval_set_rule",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "0",
            "label": "Interval Padding",
            "sbg:altPrefix": "-ip",
            "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--interval_padding",
              "itemSeparator": " "
            },
            "id": "#interval_padding",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "ALL",
            "label": "Interval Merging",
            "sbg:altPrefix": "-im",
            "description": "Indicates the interval merging rule we should use for abutting intervals.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--interval_merging",
              "itemSeparator": " "
            },
            "id": "#interval_merging",
            "type": [
              "null",
              {
                "symbols": [
                  "ALL",
                  "OVERLAPPING_ONLY"
                ],
                "name": "interval_merging",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "-1.0",
            "label": "Global q score prior",
            "sbg:altPrefix": "-globalQScorePrior",
            "description": "Global Qscore Bayesian prior to use for BQSR.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--globalQScorePrior",
              "itemSeparator": " "
            },
            "id": "#global_q_score_prior",
            "type": [
              "null",
              "float"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Generate MD5",
            "sbg:altPrefix": "",
            "description": "Enable on-the-fly creation of md5s for output BAM files.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--generate_md5",
              "itemSeparator": " "
            },
            "id": "#generate_md5",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Gatk key",
            "sbg:altPrefix": "-K",
            "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
            "sbg:category": "Input Files",
            "sbg:fileTypes": "KEY, LICENSE",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--gatk_key",
              "itemSeparator": " "
            },
            "id": "#gatk_key",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Fix Misencoded Quals",
            "sbg:altPrefix": "-fixMisencodedQuals",
            "description": "Fix mis-encoded base quality scores.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--fix_misencoded_quality_scores",
              "itemSeparator": " "
            },
            "id": "#fix_misencoded_quals",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Emit Original Quals",
            "sbg:altPrefix": "-EOQ",
            "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR).",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--emit_original_quals",
              "itemSeparator": " "
            },
            "id": "#emit_original_quals",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Downsampling Type",
            "sbg:altPrefix": "-dt",
            "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--downsampling_type",
              "itemSeparator": " "
            },
            "id": "#downsampling_type",
            "type": [
              "null",
              {
                "symbols": [
                  "NONE",
                  "ALL_READS",
                  "BY_SAMPLE"
                ],
                "name": "downsampling_type",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Downsample to Fraction",
            "sbg:altPrefix": "-dfrac",
            "description": "Fraction [0.0-1.0] of reads to downsample to.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--downsample_to_fraction",
              "itemSeparator": " "
            },
            "id": "#downsample_to_fraction",
            "type": [
              "null",
              "float"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Downsample to Coverage",
            "sbg:altPrefix": "-dcov",
            "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--downsample_to_coverage",
              "itemSeparator": " "
            },
            "id": "#downsample_to_coverage",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Do not fix overhangs",
            "sbg:altPrefix": "-doNotFixOverhangs",
            "description": "Do not have the walker hard-clip overhanging sections of the reads.",
            "sbg:category": "Split Cigar",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--doNotFixOverhangs",
              "itemSeparator": " "
            },
            "id": "#do_not_fix_overhangs",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Read filter(s) to disable",
            "sbg:altPrefix": "-drf",
            "description": "Read filters to disable. Specify which filter(s) to disable.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--disable_read_filter",
              "itemSeparator": " "
            },
            "id": "#disable_read_filter",
            "type": [
              "null",
              {
                "symbols": [],
                "name": "disable_read_filter",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Disable Indel Quals",
            "sbg:altPrefix": "-DIQ",
            "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--disable_indel_quals",
              "itemSeparator": " "
            },
            "id": "#disable_indel_quals",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Disable bam indexing",
            "sbg:altPrefix": null,
            "description": "Turn off on-the-fly creation of indices for output BAM files.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--disable_bam_indexing",
              "itemSeparator": " "
            },
            "id": "#disable_bam_indexing",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Disable index generation and locking",
            "sbg:altPrefix": "-d_locking_when_reading_rods",
            "description": "Disable both auto-generation of index files and index file locking.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--disable_auto_index_creation_and_locking_when_reading_rods",
              "itemSeparator": " "
            },
            "id": "#disable_auto_index",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "0",
            "label": "Default Base Qualities",
            "sbg:altPrefix": "-DBQ",
            "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--defaultBaseQualities",
              "itemSeparator": " "
            },
            "id": "#default_base_qualities",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "1",
            "label": "CPU per job",
            "sbg:altPrefix": null,
            "description": "Number of CPUs per job.",
            "sbg:category": "Execution",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "",
              "itemSeparator": " "
            },
            "id": "#cpu_per_job",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "BQSR",
            "sbg:altPrefix": "-BQSR",
            "description": "Input covariates table file for on-the-fly base quality score recalibration.",
            "sbg:category": "Input Files",
            "sbg:fileTypes": "GRP, TXT",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--BQSR",
              "itemSeparator": " "
            },
            "id": "#bqsr",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          },
          {
            "sbg:toolDefaultValue": "40.0",
            "label": "BAQ Gap Open Penalty",
            "sbg:altPrefix": "-baqGOP",
            "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--baqGapOpenPenalty",
              "itemSeparator": " "
            },
            "id": "#baq_gap_open_penalty",
            "type": [
              "null",
              "float"
            ]
          },
          {
            "sbg:toolDefaultValue": "OFF",
            "label": "BAQ Calculation Type",
            "sbg:altPrefix": "-baq",
            "description": "Type of BAQ calculation to apply in the engine.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--baq",
              "itemSeparator": " "
            },
            "id": "#baq",
            "type": [
              "null",
              {
                "symbols": [
                  "OFF",
                  "CALCULATE_AS_NECESSARY",
                  "RECALCULATE"
                ],
                "name": "baq",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "label": "Bam compression",
            "sbg:altPrefix": "-compress",
            "description": "Compression level to use for writing BAM files (0 - 9, higher is more compressed).",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--bam_compression",
              "itemSeparator": " "
            },
            "id": "#bam_compression",
            "type": [
              "null",
              {
                "symbols": [
                  "0",
                  "1",
                  "2",
                  "3",
                  "4",
                  "5",
                  "6",
                  "7",
                  "8",
                  "9"
                ],
                "name": "bam_compression",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Allow Potentially Misencoded Quals",
            "sbg:altPrefix": "-allowPotentiallyMisencodedQuals",
            "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--allow_potentially_misencoded_quality_scores",
              "itemSeparator": " "
            },
            "id": "#allow_potentailly_misencoded_quals",
            "type": [
              "null",
              "boolean"
            ]
          }
        ],
        "cwlVersion": "sbg:draft-2",
        "x": 749.4118885701146,
        "sbg:toolkitVersion": "3.5",
        "arguments": [
          {
            "separate": true,
            "prefix": "--out",
            "valueFrom": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  read_name = [].concat($job.inputs.reads)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  read_namebase = read_name.slice(0, read_name.length-1).join('.')\n  return read_namebase + '.split_cigar.bam'\n}"
            }
          }
        ],
        "sbg:validationErrors": [],
        "sbg:createdBy": "kb472",
        "label": "GATK SplitNCigarReads",
        "stdout": "",
        "temporaryFailCodes": [],
        "y": 491.87874830800024,
        "sbg:id": "kb472/tcga-livercancer-rnaseq-75cohort/gatk-3-5-splitncigarreads/1",
        "sbg:latestRevision": 1,
        "baseCommand": [
          "java",
          {
            "class": "Expression",
            "engine": "#cwl-js-engine",
            "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }\n  \treturn '-Xmx2048M'\n}"
          },
          "-jar",
          "/opt/GenomeAnalysisTK_3.5-0-g36282e4.jar",
          "--analysis_type",
          "SplitNCigarReads"
        ],
        "id": "kb472/tcga-livercancer-rnaseq-75cohort/gatk-3-5-splitncigarreads/1",
        "sbg:job": {
          "inputs": {
            "read_filter": [
              "ReassignOneMappingQualityFilter"
            ],
            "reference": {
              "path": "example.fasta"
            },
            "read_quality_false": 255,
            "read_quality_true": 60,
            "reads": [
              {
                "path": "example.bam"
              }
            ]
          },
          "allocatedResources": {
            "cpu": 1,
            "mem": 1000
          }
        },
        "description": "###**Overview**  \n\nThis tool identifies all N cigar elements in sequence reads, and creates k+1 new reads (where k is the number of N cigar elements) that correspond to the segments of the original read beside/between the splicing events represented by the Ns in the original CIGAR. The first read includes the bases that are to the left of the first N element, while the part of the read that is to the right of the N (including the Ns) is hard clipped, and so on for the rest of the new reads.  \n\n###**Input**  \nOne or more bam files  \n\n###**Output**  \nA single processed bam file.  \n\n###**Usage examples**  \n\n    java -jar GenomeAnalysisTK.jar \\  \n         -T SplitNCigarReads \\  \n         -R reference.fasta \\  \n         -I input.bam \\  \n         -o output.bam \\  \n         -U ALLOW_N_CIGARS  \n\n When this tool is used as part of the RNAseq best practices, the command should include mapping quality\n reassignment.  \n\n###**IMPORTANT NOTICE**  \n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding *.fai* (fasta index) and *.dict* (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the '***SBG FASTA Indices***' tool within your GATK based workflow before using any of the GATK tools.",
        "outputs": [
          {
            "label": "N cigar split bam output",
            "description": "N Cigar Splited BAM file.",
            "sbg:fileTypes": "CRAM, BAM",
            "type": [
              "null",
              "File"
            ],
            "id": "#n_cigar_split_bam",
            "outputBinding": {
              "glob": "*.bam",
              "secondaryFiles": [
                ".bai"
              ],
              "sbg:inheritMetadataFrom": "#reads"
            }
          }
        ],
        "sbg:links": [
          {
            "label": "Homepage",
            "id": "https://www.broadinstitute.org/gatk/index.php"
          },
          {
            "label": "Source code",
            "id": "https://github.com/broadgsa/gatk-protected"
          },
          {
            "label": "Wiki",
            "id": "https://www.broadinstitute.org/gatk/guide/tooldocs/"
          },
          {
            "label": "Download",
            "id": "https://www.broadinstitute.org/gatk/download/"
          },
          {
            "label": "Publication",
            "id": "https://www.broadinstitute.org/gatk/about/#in-the-literature"
          },
          {
            "label": "Documentation",
            "id": "https://www.broadinstitute.org/gatk/guide/tooldocs/org_broadinstitute_gatk_tools_walkers_rnaseq_SplitNCigarReads.php"
          }
        ],
        "sbg:revision": 1,
        "sbg:cmdPreview": "java -Xmx2048M -jar /opt/GenomeAnalysisTK_3.5-0-g36282e4.jar --analysis_type SplitNCigarReads --reference_sequence example.fasta --input_file example.bam --out example.split_cigar.bam",
        "sbg:sbgMaintained": false,
        "sbg:project": "kb472/tcga-livercancer-rnaseq-75cohort",
        "class": "CommandLineTool",
        "sbg:image_url": null,
        "sbg:createdOn": 1483650864,
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ]
          }
        ],
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "kb472",
            "sbg:revisionNotes": "Copy of elehnert/cgc-academic-user-gatk-access/gatk-3-5-splitncigarreads/12",
            "sbg:modifiedOn": 1483650864,
            "sbg:revision": 0
          },
          {
            "sbg:modifiedBy": "kb472",
            "sbg:revisionNotes": "[from Darko] You need to deselect (turn off) checkbox \"Include in command line\" for memory_per_job on INPUTS section on tool level.",
            "sbg:modifiedOn": 1519095582,
            "sbg:revision": 1
          }
        ],
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "sbg:categories": [
          "SAM/BAM-Processing"
        ],
        "sbg:projectName": "TCGA_Livercancer_RNAseq_75cohort",
        "sbg:contributors": [
          "kb472"
        ],
        "sbg:toolAuthor": "Broad Instit",
        "sbg:license": "MIT License",
        "sbg:toolkit": "GATK",
        "sbg:publisher": "sbg",
        "stdin": "",
        "successCodes": [],
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerImageId": "3c3b8e0ed4e5",
            "dockerPull": "images.sbgenomics.com/aleksandar_mihajlovic/gatk3:3.5.0"
          },
          {
            "class": "sbg:CPURequirement",
            "value": 1
          },
          {
            "class": "sbg:MemRequirement",
            "value": 1000
          }
        ]
      },
      "sbg:y": 491.87874830800024,
      "id": "#GATK_SplitNCigarReads"
    }
  ],
  "sbg:batchInput": "#input_bam_file",
  "cwlVersion": "sbg:draft-2",
  "sbg:canvas_y": -142,
  "sbg:publisher": "sbg",
  "sbg:revisionsInfo": [
    {
      "sbg:revision": 0,
      "sbg:modifiedBy": "kb472",
      "sbg:modifiedOn": 1519312632,
      "sbg:revisionNotes": "Copy of YUGUSEV/liver-cancer-gu-rnaseq/whole-exome-sequencing-gatk-2-3-9-lite-b-batch-b-v3/0"
    }
  ],
  "hints": [],
  "$namespaces": {
    "sbg": "https://sevenbridges.com"
  },
  "sbg:appVersion": [
    "sbg:draft-2"
  ],
  "id": "https://cgc-api.sbgenomics.com/v2/apps/YUGUSEV/liver-cancer-immuno-oncology-georgetown/whole-exome-sequencing-gatk-2-3-9-lite-b-batch-b-v3/0/raw/",
  "sbg:id": "YUGUSEV/liver-cancer-immuno-oncology-georgetown/whole-exome-sequencing-gatk-2-3-9-lite-b-batch-b-v3/0",
  "sbg:revision": 0,
  "sbg:revisionNotes": "Copy of YUGUSEV/liver-cancer-gu-rnaseq/whole-exome-sequencing-gatk-2-3-9-lite-b-batch-b-v3/0",
  "sbg:modifiedOn": 1519312632,
  "sbg:modifiedBy": "kb472",
  "sbg:createdOn": 1519312632,
  "sbg:createdBy": "kb472",
  "sbg:project": "YUGUSEV/liver-cancer-immuno-oncology-georgetown",
  "sbg:sbgMaintained": false,
  "sbg:validationErrors": [],
  "sbg:contributors": [
    "kb472"
  ],
  "sbg:latestRevision": 0,
  "sbg:content_hash": null,
  "sbg:copyOf": "YUGUSEV/liver-cancer-gu-rnaseq/whole-exome-sequencing-gatk-2-3-9-lite-b-batch-b-v3/0"
}