{
  "hints": [],
  "outputs": [
    {
      "label": "vcf_output",
      "sbg:x": 1270.0001106858267,
      "sbg:y": 75.00001542270206,
      "source": [
        "#GATK_HaplotypeCaller.vcf_output"
      ],
      "sbg:fileTypes": "VCF",
      "sbg:includeInPorts": true,
      "id": "#vcf_output",
      "required": false,
      "type": [
        "null",
        "File"
      ]
    },
    {
      "label": "summary_text",
      "sbg:x": 1666,
      "sbg:y": 75,
      "source": [
        "#SnpEff.summary_text"
      ],
      "sbg:fileTypes": "TXT",
      "sbg:includeInPorts": true,
      "id": "#summary_text",
      "required": false,
      "type": [
        "null",
        "File"
      ]
    },
    {
      "label": "annotated",
      "sbg:x": 1663,
      "sbg:y": 386,
      "source": [
        "#SnpEff.annotated"
      ],
      "sbg:fileTypes": "VCF, TXT, GATK, BED, BEDANN",
      "sbg:includeInPorts": true,
      "id": "#annotated",
      "required": false,
      "type": [
        "null",
        "File"
      ]
    },
    {
      "label": "summary",
      "sbg:x": 1663,
      "sbg:y": 227,
      "source": [
        "#SnpEff.summary"
      ],
      "sbg:fileTypes": "HTML, CSV",
      "sbg:includeInPorts": true,
      "id": "#summary",
      "required": false,
      "type": [
        "null",
        "File"
      ]
    },
    {
      "label": "b64html",
      "sbg:x": 365.00002165138744,
      "sbg:y": 855.999996230006,
      "source": [
        "#SBG_Html2b64.b64html"
      ],
      "sbg:fileTypes": "HTML, B64HTML",
      "sbg:includeInPorts": true,
      "id": "#b64html",
      "required": false,
      "type": [
        "null",
        "File"
      ]
    },
    {
      "label": "sorted",
      "sbg:x": 857.0000309646132,
      "sbg:y": 325.9961868822005,
      "source": [
        "#Sambamba_Sort.sorted"
      ],
      "sbg:fileTypes": "BAM",
      "sbg:includeInPorts": true,
      "id": "#sorted",
      "required": false,
      "type": [
        "null",
        "File"
      ]
    },
    {
      "label": "trimmed_reads",
      "sbg:x": 436.00012286007575,
      "sbg:y": 491.99622279399955,
      "source": [
        "#Fqtrim_0_9_5.trimmed_reads"
      ],
      "sbg:fileTypes": "FASTQ,FASTQ.GZ,FASTQ.GZIP,FASTQ.BZ2,FASTA",
      "sbg:includeInPorts": true,
      "id": "#trimmed_reads",
      "required": false,
      "type": [
        "null",
        {
          "items": "File",
          "name": "trimmed_reads",
          "type": "array"
        }
      ]
    },
    {
      "label": "report_zip",
      "sbg:x": 600.0000565350063,
      "sbg:y": 618.9961636810922,
      "source": [
        "#FastQC_1.report_zip"
      ],
      "sbg:fileTypes": "ZIP",
      "sbg:includeInPorts": true,
      "id": "#report_zip",
      "required": false,
      "type": [
        "null",
        {
          "items": "File",
          "name": "report_zip",
          "type": "array"
        }
      ]
    },
    {
      "label": "aligned_reads",
      "sbg:x": 687.0000246614218,
      "sbg:y": 298.9961166828291,
      "source": [
        "#BWA_MEM_Bundle.aligned_reads"
      ],
      "sbg:fileTypes": "SAM, BAM",
      "sbg:includeInPorts": true,
      "id": "#aligned_reads",
      "required": false,
      "type": [
        "null",
        "File"
      ]
    },
    {
      "label": "indexed_bam",
      "sbg:x": 1153,
      "sbg:y": 155,
      "source": [
        "#Sambamba_Index.indexed_bam"
      ],
      "sbg:fileTypes": "BAM",
      "sbg:includeInPorts": true,
      "id": "#indexed_bam",
      "required": false,
      "type": [
        "null",
        "File"
      ]
    },
    {
      "label": "filtered_vcf",
      "sbg:x": 1666,
      "sbg:y": -145,
      "source": [
        "#GATK_VariantFiltration_1.filtered_vcf"
      ],
      "sbg:fileTypes": "VCF",
      "sbg:includeInPorts": true,
      "id": "#filtered_vcf",
      "required": true,
      "type": [
        "File"
      ]
    },
    {
      "label": "flagstat_metrics",
      "sbg:x": 887,
      "sbg:y": 519,
      "source": [
        "#Samtools_flagstat.flagstat_metrics"
      ],
      "sbg:fileTypes": "TXT",
      "sbg:includeInPorts": true,
      "id": "#flagstat_metrics",
      "required": false,
      "type": [
        "null",
        "File"
      ]
    },
    {
      "label": "flagstat_metrics_indexed_bam",
      "sbg:x": 1354,
      "sbg:y": 496,
      "source": [
        "#Samtools_flagstat_1.flagstat_metrics"
      ],
      "sbg:fileTypes": "TXT",
      "sbg:includeInPorts": true,
      "id": "#flagstat_metrics_1",
      "required": false,
      "type": [
        "null",
        "File"
      ]
    }
  ],
  "cwlVersion": "sbg:draft-2",
  "description": "",
  "sbg:projectName": "VA_Georgetown WEseq",
  "requirements": [],
  "class": "Workflow",
  "sbg:image_url": "https://cgc.sbgenomics.com/ns/brood/images/YUGUSEV/va-georgetown-weseq/wxs-haplotypecallernew-v3/1.png",
  "inputs": [
    {
      "label": "reference",
      "sbg:x": 37.00002270937,
      "sbg:y": 126.99652823800633,
      "sbg:fileTypes": "FASTA,FA,FA.GZ,FASTA.GZ,TAR",
      "id": "#reference",
      "type": [
        "File"
      ]
    },
    {
      "label": "input_fastq",
      "sbg:x": -103.00001378357433,
      "sbg:y": 432.99661839003284,
      "sbg:fileTypes": "FASTQ, FQ, FASTQ.GZ, FQ.GZ, BAM, SAM",
      "batchType": [
        "metadata.sample_id"
      ],
      "id": "#input_fastq",
      "type": [
        {
          "items": "File",
          "name": "input_fastq",
          "type": "array"
        }
      ]
    },
    {
      "label": "database",
      "sbg:x": 1278.0003243982837,
      "sbg:y": 311.00000844895845,
      "sbg:fileTypes": "ZIP",
      "id": "#database",
      "type": [
        "File"
      ]
    }
  ],
  "sbg:batchBy": {
    "criteria": [
      "metadata.sample_id"
    ],
    "type": "criteria"
  },
  "sbg:canvas_x": -302,
  "label": "WXS haplotype caller-batch-newV3",
  "steps": [
    {
      "inputs": [
        {
          "source": [
            "#reference"
          ],
          "id": "#SBG_FASTA_Indices.reference"
        }
      ],
      "outputs": [
        {
          "id": "#SBG_FASTA_Indices.fasta_reference"
        },
        {
          "id": "#SBG_FASTA_Indices.fasta_index"
        },
        {
          "id": "#SBG_FASTA_Indices.fasta_dict"
        }
      ],
      "sbg:x": 460.000065187616,
      "run": {
        "inputs": [
          {
            "label": "FASTA file",
            "description": "FASTA file to be indexed",
            "inputBinding": {
              "prefix": "--REFERENCE",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:stageInput": "link",
            "id": "#reference",
            "required": true,
            "type": [
              "File"
            ]
          }
        ],
        "sbg:modifiedBy": "djordje_klisic",
        "sbg:modifiedOn": 1459163478,
        "stdout": "",
        "cwlVersion": "sbg:draft-2",
        "x": 460.000065187616,
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ]
          }
        ],
        "arguments": [
          {
            "separate": true,
            "valueFrom": "--dict"
          },
          {
            "separate": true,
            "valueFrom": "--fai"
          }
        ],
        "sbg:toolAuthor": "Sanja Mijalkovic, Seven Bridges Genomics, <sanja.mijalkovic@sbgenomics.com>",
        "sbg:createdBy": "sanja.mijalkovic",
        "label": "SBG FASTA Indices",
        "sbg:validationErrors": [],
        "sbg:revision": 4,
        "temporaryFailCodes": [],
        "sbg:id": "admin/sbg-public-data/sbg-fasta-indices/4",
        "sbg:cmdPreview": "python /opt/sbg-fasta-indices.py --REFERENCE /path/to/reference.ext  --dict  --fai",
        "y": 20.00000806649561,
        "id": "admin/sbg-public-data/sbg-fasta-indices/4",
        "sbg:job": {
          "inputs": {
            "reference": {
              "class": "File",
              "secondaryFiles": [],
              "size": 0,
              "path": "/path/to/reference.ext"
            }
          },
          "allocatedResources": {
            "cpu": 1,
            "mem": 2500
          }
        },
        "sbg:sbgMaintained": false,
        "outputs": [
          {
            "label": "Reference",
            "id": "#fasta_reference",
            "fileTypes": "FASTA, FA",
            "sbg:fileTypes": "FASTA",
            "outputBinding": {
              "glob": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  return $job.inputs.reference.path.split(\"/\").pop()\n}"
              },
              "secondaryFiles": [
                ".fai",
                "^.dict"
              ],
              "sbg:inheritMetadataFrom": "#reference"
            },
            "type": [
              "null",
              "File"
            ]
          },
          {
            "label": "FASTA Index",
            "id": "#fasta_index",
            "sbg:fileTypes": "FAI",
            "outputBinding": {
              "glob": "*.fai",
              "sbg:metadata": {}
            },
            "type": [
              "null",
              "File"
            ]
          },
          {
            "label": "FASTA Dictionary",
            "id": "#fasta_dict",
            "sbg:fileTypes": "DICT",
            "outputBinding": {
              "glob": "*.dict",
              "sbg:metadata": {}
            },
            "type": [
              "null",
              "File"
            ]
          }
        ],
        "baseCommand": [
          "python",
          "/opt/sbg-fasta-indices.py"
        ],
        "sbg:latestRevision": 4,
        "description": "Tool allows creating FASTA dictionary and index simultaneously which is necessary for running GATK tools. This version of tool for indexing uses SAMtools faidx command (toolkit version0.1.19), while for the FASTA dictionary is used Picard CreateFastaDictionary (toolkit version 1.140)",
        "sbg:project": "admin/sbg-public-data",
        "class": "CommandLineTool",
        "sbg:image_url": null,
        "sbg:createdOn": 1448043983,
        "sbg:contributors": [
          "sanja.mijalkovic",
          "djordje_klisic"
        ],
        "sbg:categories": [
          "Indexing"
        ],
        "successCodes": [],
        "sbg:license": "Apache License 2.0",
        "sbg:toolkit": "SBGTools",
        "stdin": "",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "sanja.mijalkovic",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1448043983,
            "sbg:revision": 0
          },
          {
            "sbg:modifiedBy": "djordje_klisic",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1459163478,
            "sbg:revision": 1
          },
          {
            "sbg:modifiedBy": "djordje_klisic",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1459163478,
            "sbg:revision": 2
          },
          {
            "sbg:modifiedBy": "djordje_klisic",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1459163478,
            "sbg:revision": 3
          },
          {
            "sbg:modifiedBy": "djordje_klisic",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1459163478,
            "sbg:revision": 4
          }
        ],
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerPull": "images.sbgenomics.com/djordje_klisic/sbg-fasta-indices:1.0",
            "dockerImageId": "b177f5bd06db"
          },
          {
            "class": "sbg:CPURequirement",
            "value": 1
          },
          {
            "class": "sbg:MemRequirement",
            "value": 2500
          }
        ]
      },
      "sbg:y": 20.00000806649561,
      "id": "#SBG_FASTA_Indices"
    },
    {
      "inputs": [
        {
          "id": "#Fqtrim_0_9_5.write_bases"
        },
        {
          "id": "#Fqtrim_0_9_5.verbose_trimming"
        },
        {
          "id": "#Fqtrim_0_9_5.trimming_report"
        },
        {
          "id": "#Fqtrim_0_9_5.trim_polyAT_at_both_ends"
        },
        {
          "id": "#Fqtrim_0_9_5.trim_max_len",
          "default": -28
        },
        {
          "id": "#Fqtrim_0_9_5.three_adapter"
        },
        {
          "id": "#Fqtrim_0_9_5.terminal_alignments"
        },
        {
          "id": "#Fqtrim_0_9_5.sliding_window_size"
        },
        {
          "id": "#Fqtrim_0_9_5.rename_prefix"
        },
        {
          "id": "#Fqtrim_0_9_5.read_name_consistency"
        },
        {
          "source": [
            "#input_fastq"
          ],
          "id": "#Fqtrim_0_9_5.read_files"
        },
        {
          "id": "#Fqtrim_0_9_5.pid5"
        },
        {
          "id": "#Fqtrim_0_9_5.pid3"
        },
        {
          "id": "#Fqtrim_0_9_5.phred_scores"
        },
        {
          "id": "#Fqtrim_0_9_5.output_suffix"
        },
        {
          "id": "#Fqtrim_0_9_5.mismatch_penalty"
        },
        {
          "id": "#Fqtrim_0_9_5.min_read_len",
          "default": 50
        },
        {
          "id": "#Fqtrim_0_9_5.min_quality",
          "default": 20
        },
        {
          "id": "#Fqtrim_0_9_5.min_poly"
        },
        {
          "id": "#Fqtrim_0_9_5.min_match"
        },
        {
          "id": "#Fqtrim_0_9_5.max_percN"
        },
        {
          "id": "#Fqtrim_0_9_5.match_reward"
        },
        {
          "id": "#Fqtrim_0_9_5.keep_only_trimmed_reads"
        },
        {
          "id": "#Fqtrim_0_9_5.five_adapter"
        },
        {
          "id": "#Fqtrim_0_9_5.dust_filter"
        },
        {
          "id": "#Fqtrim_0_9_5.dmask"
        },
        {
          "id": "#Fqtrim_0_9_5.disable_polyAT_trimming"
        },
        {
          "id": "#Fqtrim_0_9_5.convert_quality_values"
        },
        {
          "id": "#Fqtrim_0_9_5.compressed_output"
        },
        {
          "id": "#Fqtrim_0_9_5.collapse_duplicates"
        },
        {
          "id": "#Fqtrim_0_9_5.aidx"
        },
        {
          "id": "#Fqtrim_0_9_5.adapters_file"
        }
      ],
      "outputs": [
        {
          "id": "#Fqtrim_0_9_5.trimmed_reads"
        },
        {
          "id": "#Fqtrim_0_9_5.report"
        }
      ],
      "sbg:x": 188.00018791854654,
      "run": {
        "inputs": [
          {
            "sbg:toolDefaultValue": "off",
            "label": "Write number of trimmed bases",
            "description": "Write the number of bases trimmed at 5' and 3' ends after the read names n the FASTA/FASTQ output file(s).",
            "sbg:category": "Options",
            "sbg:stageInput": null,
            "inputBinding": {
              "prefix": "-T",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#write_bases",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "off",
            "label": "Show verbose trimming summary",
            "description": "Show verbose trimming summary.",
            "sbg:category": "Options",
            "sbg:stageInput": null,
            "inputBinding": {
              "prefix": "-V",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#verbose_trimming",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "off",
            "label": "Trimming report",
            "description": "Write a \"trimming report\" file listing the affected reads with a list of trimming operations.",
            "sbg:category": "Options",
            "sbg:stageInput": null,
            "inputBinding": {
              "prefix": "-r",
              "sbg:cmdInclude": true,
              "valueFrom": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  if ($job.inputs.trimming_report) {\n  function sharedStart(array){\n  var A= array.concat().sort(), \n      a1= A[0], a2= A[A.length-1], L= a1.length, i= 0;\n  while(i<L && a1.charAt(i)=== a2.charAt(i)) i++;\n  return a1.substring(0, i);\n  }\n  \n  if ($job.inputs.read_files) {\n  arr = [].concat($job.inputs.read_files)\n  path_list = []\n  arr.forEach(function(f){return path_list.push(f.path.replace(/\\\\/g,'/').replace( /.*\\//, '' ))})\n  common_prefix = sharedStart(path_list)\n  var x = common_prefix.replace( /\\-$|\\_$|\\.$/, '' )\n  return x +  \".trim_report.txt\"\n  }\n  }\n}"
              },
              "separate": true
            },
            "id": "#trimming_report",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "off",
            "label": "Trim polyA/T at both ends",
            "description": "Trim polyA/T at both ends (default: only poly-A at 3' end, poly-T at 5' end).",
            "sbg:category": "Options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "valueFrom": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  if ($job.inputs.disable_polyAT_trimming) {\n    return \"\" \n  } else if ($job.inputs.trim_polyAT_at_both_ends) {\n    return \"-B\" \n  }\n}"
              }
            },
            "id": "#trim_polyAT_at_both_ends",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "None",
            "label": "Maximum trimming lenght",
            "description": "If 'min_quality' threshold is given for trimming 3' reads, set here the length to which the maximum trimming at the 3' end is limited to.",
            "sbg:category": "Options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "valueFrom": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  if ($job.inputs.min_quality && $job.inputs.trim_max_len) {\n    return \"-t \" + $job.inputs.trim_max_len\n  } else {\n    return \"\"\n  }\n}"
              }
            },
            "id": "#trim_max_len",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "None",
            "label": "Three prime adapter",
            "description": "Trim the given adapter sequence at the 5' end of each read (e.g. -3 TCGTATGCCGTCTTCTGCTTG). If the adapters file is provided, then this input is not needed. Note that only one 3' adapter sequence can be specified this way (multiple -3 options are not recognized).",
            "sbg:category": "Options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "valueFrom": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  if ($job.inputs.adapters_file) {\n    return \"\" \n  } else if ($job.inputs.three_adapter) {\n    return \"-3 \" + $job.inputs.three_adapter\n  }\n}"
              }
            },
            "id": "#three_adapter",
            "type": [
              "null",
              "string"
            ]
          },
          {
            "sbg:toolDefaultValue": "off",
            "label": "Terminal alignments",
            "description": "Also look for terminal alignments with the reverse complement of the adapter sequence(s).",
            "sbg:category": "Advanced adapter/primer match options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "valueFrom": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  if ($job.inputs.terminal_alignments && ($job.inputs.adapters_file || $job.inputs.five_adapter || $job.inputs.three_adapter)) {\n    return \"-R\"\n  } else {\n    return \"\"\n  }\n}"
              }
            },
            "id": "#terminal_alignments",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "6",
            "label": "Sliding window size",
            "description": "If 'min_quality' threshold is given for trimming 3' reads, set here the sliding window size for calculating average quality.",
            "sbg:category": "Options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "valueFrom": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  if ($job.inputs.min_quality && $job.inputs.sliding_window_size) {\n    return \"-w \" + $job.inputs.sliding_window_size\n  } else {\n    return \"\"\n  }\n}"
              }
            },
            "id": "#sliding_window_size",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "None",
            "label": "Rename prefix",
            "description": "Rename the reads using the specified prefix, followed by a read counter; if the 'Colapse Duplicates' option is also provided, the suffix '_x<N>' is appended (where <N> is the read duplication count).",
            "sbg:category": "Options",
            "inputBinding": {
              "prefix": "-n",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#rename_prefix",
            "type": [
              "null",
              "string"
            ]
          },
          {
            "sbg:toolDefaultValue": "off",
            "label": "Disable read name consistency",
            "description": "Disable read name consistency for paired reads.",
            "sbg:category": "Options",
            "sbg:stageInput": null,
            "inputBinding": {
              "prefix": "-M",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#read_name_consistency",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Read files",
            "description": "Input FASTQ read files.",
            "sbg:category": "Inputs",
            "sbg:fileTypes": "FASTQ,FASTA",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "position": 1,
              "itemSeparator": " ",
              "valueFrom": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  if ($job.inputs.read_files) {\n  var list = [].concat($job.inputs.read_files)\n  \n  var resp = []\n  \n  if (list.length == 1){\n    resp.push(list[0].path)\n    \n  }else if (list.length == 2){    \n    \n    left = \"\"\n    right = \"\"\n      \n    for (index = 0; index < list.length; ++index) {\n      \n      if (list[index].metadata != null){\n        if (list[index].metadata.paired_end == 1){\n          left = list[index].path\n        }else if (list[index].metadata.paired_end == 2){\n          right = list[index].path\n        }\n      }\n    } \n    \n    if (left != \"\" && right != \"\"){      \n      resp.push(left)\n      resp.push(right)\n    }\n  }\n  \n  if(resp.length == 1){    \n    return resp[0]\n  } else if (resp.length == 2) {\n    return resp[0] + \",\" + resp[1]\n  } else {\n    return \"\"\n  }\n  }\n  \n}"
              }
            },
            "id": "#read_files",
            "required": true,
            "type": [
              {
                "items": "File",
                "name": "read_files",
                "type": "array"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "96.0",
            "label": "Percent identity 5'",
            "description": "Minimum percent identity for adapter match at 5' end.",
            "sbg:category": "Advanced adapter/primer match options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "valueFrom": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  if ($job.inputs.pid5 && ($job.inputs.adapters_file || $job.inputs.five_adapter || $job.inputs.three_adapter)) {\n    return \"--pid5 \" + $job.inputs.pid5\n  } else {\n    return \"\"\n  }\n}"
              }
            },
            "id": "#pid5",
            "type": [
              "null",
              "float"
            ]
          },
          {
            "sbg:toolDefaultValue": "94.0",
            "label": "Percent identity 5'",
            "description": "Minimum percent identity for adapter match at 3' end.",
            "sbg:category": "Advanced adapter/primer match options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "valueFrom": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  if ($job.inputs.pid3 && ($job.inputs.adapters_file || $job.inputs.five_adapter || $job.inputs.three_adapter)) {\n    return \"--pid3 \" + $job.inputs.pid3\n  } else {\n    return \"\"\n  }\n}"
              }
            },
            "id": "#pid3",
            "type": [
              "null",
              "float"
            ]
          },
          {
            "sbg:toolDefaultValue": "None",
            "label": "Phred scores",
            "description": "Input is phred64/phred33.",
            "sbg:category": "Options",
            "sbg:stageInput": null,
            "inputBinding": {
              "prefix": "-P",
              "sbg:cmdInclude": true,
              "separate": false
            },
            "id": "#phred_scores",
            "type": [
              "null",
              {
                "symbols": [
                  "64",
                  "33"
                ],
                "name": "phred_scores",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "'trimmed.fastq'",
            "label": "Output suffix",
            "description": "The suffix to be appended to the file name after trimming. Please also add the file type here as well (example: 'trimmed.fastq'). If you wish to compress your output files, do not add the compression type in the string here, but rather use the 'Compressed output' options to select one of the supported compression types.",
            "sbg:category": "Options",
            "inputBinding": {
              "prefix": "-o",
              "sbg:cmdInclude": true,
              "valueFrom": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  if ($job.inputs.output_suffix) {\n    if ($job.inputs.compressed_output) {\n      return $job.inputs.output_suffix + \".\" + $job.inputs.compressed_output\n    } else {\n      return $job.inputs.output_suffix\n    }\n  } else {\n    if ($job.inputs.compressed_output) {\n      return \"trimmed.fastq.\" + $job.inputs.compressed_output\n    } else {\n      return \"trimmed.fastq\"\n    }\n  }\n}"
              },
              "separate": true
            },
            "id": "#output_suffix",
            "type": [
              "null",
              "string"
            ]
          },
          {
            "sbg:toolDefaultValue": "3",
            "label": "Mismatch penalty",
            "description": "Mismatch penalty for scoring the adapter alignment.",
            "sbg:category": "Advanced adapter/primer match options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "valueFrom": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  if ($job.inputs.mismatch_penalty && ($job.inputs.adapters_file || $job.inputs.five_adapter || $job.inputs.three_adapter)) {\n    return \"--mism \" + $job.inputs.mismatch_penalty\n  } else {\n    return \"\"\n  }\n}"
              }
            },
            "id": "#mismatch_penalty",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "16",
            "label": "Minimum read length",
            "description": "Minimum read length after trimming (if the remaining sequence is shorter than this, the read will be discarded).",
            "sbg:category": "Options",
            "sbg:stageInput": null,
            "inputBinding": {
              "prefix": "-l",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#min_read_len",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "None",
            "label": "Quality value threshold",
            "description": "Trim 3' end of reads when the quality value drops below this value.",
            "sbg:category": "Options",
            "sbg:stageInput": null,
            "inputBinding": {
              "prefix": "-q",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#min_quality",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "6",
            "label": "Minimum poly-A/T lenght to remove",
            "description": "Minimum length of poly-A/T run to remove.",
            "sbg:category": "Options",
            "inputBinding": {
              "prefix": "-y",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#min_poly",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "6",
            "label": "Minimum suffix-prefix match",
            "description": "Minimum length of exact suffix-prefix match with adapter sequence that can be trimmed at either end of the read.",
            "sbg:category": "Advanced adapter/primer match options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "valueFrom": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  if ($job.inputs.min_match && ($job.inputs.adapters_file || $job.inputs.five_adapter || $job.inputs.three_adapter)) {\n    return \"-a \" + $job.inputs.min_match\n  } else {\n    return \"\"\n  }\n}"
              }
            },
            "id": "#min_match",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "5",
            "label": "Maximum percentage of Ns allowed",
            "description": "Maximum percentage of Ns allowed in a read after trimming.",
            "sbg:category": "Options",
            "sbg:stageInput": null,
            "inputBinding": {
              "prefix": "-m",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#max_percN",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "1",
            "label": "Match reward",
            "description": "Match reward for scoring the adapter alignment.",
            "sbg:category": "Advanced adapter/primer match options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "valueFrom": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  if ($job.inputs.match_reward && ($job.inputs.adapters_file || $job.inputs.five_adapter || $job.inputs.three_adapter)) {\n    return \"--match \" + $job.inputs.match_reward\n  } else {\n    return \"\"\n  }\n}"
              }
            },
            "id": "#match_reward",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "off",
            "label": "Keep only trimmed reads",
            "description": "Only reads affected by trimming will be kept.",
            "sbg:category": "Options",
            "inputBinding": {
              "prefix": "-O",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#keep_only_trimmed_reads",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "None",
            "label": "Five prime adapter",
            "description": "Trim the given adapter or primer sequence at the 5' end of each read (e.g. -5 CGACAGGTTCAGAGTTCTACAGTCCGACGATC). If the adapters file is provided, then this input is not needed. Note that only one 5' adapter sequence can be specified this way (multiple -5 options are not recognized).",
            "sbg:category": "Options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "valueFrom": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  if ($job.inputs.adapters_file) {\n    return \"\" \n  } else if ($job.inputs.five_adapter) {\n    return \"-5 \" + $job.inputs.five_adapter\n  }\n}"
              }
            },
            "id": "#five_adapter",
            "type": [
              "null",
              "string"
            ]
          },
          {
            "sbg:toolDefaultValue": "off",
            "label": "Dust filter",
            "description": "Pass reads through a low-complexity (dust) filter and discard any read that has over 50% of its length masked as low complexity.",
            "sbg:category": "Options",
            "sbg:stageInput": null,
            "inputBinding": {
              "prefix": "-D",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#dust_filter",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "off",
            "label": "Dust filter mask",
            "description": "This options is the same as 'dust filter', but in this case fqtrim will actually mask the low complexity regions with Ns in the output sequence of low-complexity sequence detected in the reads.",
            "sbg:category": "Options",
            "sbg:stageInput": null,
            "inputBinding": {
              "prefix": "--dmask",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#dmask",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "off",
            "label": "Disable polyA/T trimming",
            "description": "Disable polyA/T trimming (enabled by default).",
            "sbg:category": "Options",
            "inputBinding": {
              "prefix": "-A",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#disable_polyAT_trimming",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "off",
            "label": "Convert quality values",
            "description": "Convert quality values to the other Phred qv type.",
            "sbg:category": "Options",
            "sbg:stageInput": null,
            "inputBinding": {
              "prefix": "-Q",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#convert_quality_values",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "None",
            "label": "Compressed output",
            "description": "If the trimmed output is to be compressed, please select the type of compression here. Options are .gz, .gzip and .bz.",
            "sbg:category": "Options",
            "sbg:stageInput": null,
            "id": "#compressed_output",
            "type": [
              "null",
              {
                "symbols": [
                  "gz",
                  "gzip",
                  "bz2"
                ],
                "name": "compressed_output",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "off",
            "label": "Collapse duplicates",
            "description": "Collapse duplicate reads and append a _x<N>count suffix to the read name (where <N> is the duplication count). This option keeps the read sequence in memory so it should only be used for smaller data sets, like micro-RNA experiments.",
            "sbg:category": "Options",
            "sbg:stageInput": null,
            "inputBinding": {
              "prefix": "-C",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#collapse_duplicates",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "off",
            "label": "Order of adapter sequences encoding",
            "description": "This options can only be turned on if the adapters file is supplied and the options to generate trimmings report is turned on. Make all the vector/adapter trimming operations encoded as a,b,c,.. instead of V, corresponding to the order of adapter sequences in the adapters file.",
            "sbg:category": "Options",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "valueFrom": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  if ($job.inputs.adapters_file && $job.inputs.trimming_report && $job.inputs.aidx) {\n    return \"--aidx\"\n  } else {\n    return \"\"\n  }\n}"
              }
            },
            "id": "#aidx",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Adapters file",
            "description": "File with adapter sequences to trim, each line having this format: [<5_adapter_sequence>][ <3_adapter_sequence>]. The 5' and 3' adapter sequences can also be supplied separately in their own respective inputs, in which case this input can be left empty.",
            "sbg:category": "Options",
            "sbg:fileTypes": "TXT,TAB,TSV,NEXTERA",
            "inputBinding": {
              "prefix": "-f",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#adapters_file",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          }
        ],
        "sbg:modifiedBy": "kb472",
        "sbg:modifiedOn": 1494884197,
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ]
          }
        ],
        "x": 188.00018791854654,
        "sbg:toolkitVersion": "0.9.5",
        "arguments": [
          {
            "prefix": "-p",
            "valueFrom": "8",
            "separate": true
          }
        ],
        "sbg:validationErrors": [],
        "cwlVersion": "sbg:draft-2",
        "sbg:createdBy": "kb472",
        "label": "Fqtrim 0.9.5",
        "stdout": "",
        "temporaryFailCodes": [],
        "sbg:id": "YUGUSEV/liver-cancer-immuno-oncology-georgetown/fqtrim-0-9-5/0",
        "sbg:cmdPreview": "fqtrim -p 8  /path/to/read_files-1.ext,/path/to/read_files-2.ext",
        "baseCommand": [
          "fqtrim"
        ],
        "id": "YUGUSEV/liver-cancer-immuno-oncology-georgetown/fqtrim-0-9-5/0",
        "sbg:job": {
          "inputs": {
            "verbose_trimming": false,
            "dmask": false,
            "trim_polyAT_at_both_ends": false,
            "phred_scores": null,
            "max_percN": null,
            "pid5": null,
            "output_suffix": "",
            "mismatch_penalty": null,
            "dust_filter": false,
            "collapse_duplicates": false,
            "pid3": null,
            "sliding_window_size": null,
            "read_name_consistency": false,
            "read_files": [
              {
                "class": "File",
                "size": 0,
                "secondaryFiles": [],
                "metadata": {
                  "paired_end": "1"
                },
                "path": "/path/to/read_files-1.ext"
              },
              {
                "class": "File",
                "size": 0,
                "secondaryFiles": [],
                "metadata": {
                  "paired_end": "2"
                },
                "path": "/path/to/read_files-2.ext"
              }
            ],
            "min_quality": null,
            "min_poly": null,
            "write_bases": false,
            "trim_max_len": null,
            "terminal_alignments": false,
            "min_match": null,
            "aidx": false,
            "match_reward": null,
            "rename_prefix": "",
            "convert_quality_values": false,
            "keep_only_trimmed_reads": false,
            "three_adapter": "5",
            "disable_polyAT_trimming": true,
            "trimming_report": false,
            "five_adapter": "5",
            "compressed_output": "bz2",
            "min_read_len": null
          },
          "allocatedResources": {
            "cpu": 1,
            "mem": 1000
          }
        },
        "sbg:sbgMaintained": false,
        "outputs": [
          {
            "label": "Trimmed reads",
            "id": "#trimmed_reads",
            "description": "Trimmed FASTQ output reads.",
            "sbg:fileTypes": "FASTQ,FASTQ.GZ,FASTQ.GZIP,FASTQ.BZ2,FASTA",
            "outputBinding": {
              "glob": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  if ($job.inputs.output_suffix) {\n    if ($job.inputs.compressed_output) {\n      return \"*.\" + $job.inputs.output_suffix + \".\" + $job.inputs.compressed_output\n    } else {\n      return \"*.\" + $job.inputs.output_suffix\n    }\n  } else {\n    if ($job.inputs.compressed_output) {\n      return \"*.trimmed.fastq.\" + $job.inputs.compressed_output\n    } else {\n      return \"*.trimmed.fastq\"\n    }\n  }\n}"
              },
              "sbg:metadata": {
                "paired_end": {
                  "class": "Expression",
                  "engine": "#cwl-js-engine",
                  "script": "{\n  if ($job.inputs.output_suffix) {\n    var string = $job.inputs.output_suffix\n    filename = $self.path.split(\"/\").pop();\n    if (filename.lastIndexOf(string) !== 0) {\n      return filename[filename.lastIndexOf(string) - 1 ]\n    } else {\n      return \"\"\n    }\n  } else {\n    filename = $self.path.split(\"/\").pop();\n    if (filename.lastIndexOf(\".trimmed\") !== 0) {\n      return filename[filename.lastIndexOf(\".trimmed\") - 1 ]\n    } else {\n      return \"\"\n    }\n  }\n}"
                }
              },
              "sbg:inheritMetadataFrom": "#read_files"
            },
            "type": [
              "null",
              {
                "items": "File",
                "name": "trimmed_reads",
                "type": "array"
              }
            ]
          },
          {
            "label": "Trimming report",
            "id": "#report",
            "description": "File listing the affected reads with a list of trimming operations.",
            "sbg:fileTypes": "TXT",
            "outputBinding": {
              "glob": "*.trim_report.txt",
              "sbg:inheritMetadataFrom": "#read_files"
            },
            "type": [
              "null",
              "File"
            ]
          }
        ],
        "sbg:links": [
          {
            "label": "Homepage",
            "id": "http://ccb.jhu.edu/software/fqtrim/index.shtml"
          },
          {
            "label": "Source Code",
            "id": "https://github.com/gpertea"
          },
          {
            "label": "Download",
            "id": "http://ccb.jhu.edu/software/fqtrim/dl/fqtrim-0.9.5.Linux_x86_64.tar.gz"
          },
          {
            "label": "Documentation",
            "id": "http://ccb.jhu.edu/software/fqtrim/index.shtml"
          }
        ],
        "sbg:revision": 0,
        "sbg:latestRevision": 0,
        "description": "Fqtrim is a versatile stand-alone utility that can be used to trim adapters, poly-A tails, terminal unknown bases (Ns) and low quality 3' regions in reads from high-throughput next-generation sequencing machines. The program allows for inexact matching of adapters and poly-A sequences (thus accounting for mismatches and indels due to sequencing errors). This utility can also apply a low-complexity (\"dust\") filter to the reads, or count and collapse duplicate reads which can be particularly useful for micro-RNA analysis pipelines.\n\nFqtrim can be used as a pre-processing or filtering step for next-generation sequence analysis pipelines (e.g. mapping, assembly) or as a post-processing utility for the analysis and potential recovery of unmapped reads or singletons resulting from such a pipeline. \n\n### Common Issues ###\nMulti -5 and -3 options are not recognized - instead, supplying the adapters file is the only way to allow for multiple adapter sequences to be trimmed.",
        "sbg:projectName": "Liver Cancer immuno-oncology Georgetown",
        "class": "CommandLineTool",
        "sbg:image_url": null,
        "y": 444.632032672048,
        "sbg:contributors": [
          "kb472"
        ],
        "sbg:revisionNotes": "Copy of uros_sipetic/viral-alignment/fqtrim-0-9-5/1",
        "sbg:project": "YUGUSEV/liver-cancer-immuno-oncology-georgetown",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "kb472",
            "sbg:revisionNotes": "Copy of uros_sipetic/viral-alignment/fqtrim-0-9-5/1",
            "sbg:modifiedOn": 1494884197,
            "sbg:revision": 0
          }
        ],
        "sbg:categories": [
          "FASTQ-Processing"
        ],
        "sbg:copyOf": "uros_sipetic/viral-alignment/fqtrim-0-9-5/1",
        "sbg:toolAuthor": "John Hopkins University - Center for Computational Biology CCB",
        "sbg:license": "Artistic License 2.0",
        "sbg:createdOn": 1494884197,
        "sbg:toolkit": "Fqtrim",
        "stdin": "",
        "successCodes": [],
        "hints": [
          {
            "class": "sbg:CPURequirement",
            "value": 1
          },
          {
            "class": "sbg:MemRequirement",
            "value": 1000
          },
          {
            "class": "DockerRequirement",
            "dockerPull": "images.sbgenomics.com/uros_sipetic/fqtrim:0.9.5",
            "dockerImageId": ""
          }
        ]
      },
      "sbg:y": 444.632032672048,
      "id": "#Fqtrim_0_9_5"
    },
    {
      "inputs": [
        {
          "id": "#FastQC.threads"
        },
        {
          "id": "#FastQC.quiet"
        },
        {
          "id": "#FastQC.nogroup"
        },
        {
          "id": "#FastQC.nano"
        },
        {
          "id": "#FastQC.memory_per_job"
        },
        {
          "id": "#FastQC.limits_file"
        },
        {
          "id": "#FastQC.kmers"
        },
        {
          "source": [
            "#input_fastq"
          ],
          "id": "#FastQC.input_fastq"
        },
        {
          "id": "#FastQC.format"
        },
        {
          "id": "#FastQC.cpus_per_job"
        },
        {
          "id": "#FastQC.contaminants_file"
        },
        {
          "id": "#FastQC.casava"
        },
        {
          "id": "#FastQC.adapters_file"
        }
      ],
      "outputs": [
        {
          "id": "#FastQC.report_zip"
        }
      ],
      "sbg:x": 37.000089570881244,
      "run": {
        "inputs": [
          {
            "sbg:toolDefaultValue": "1",
            "sbg:altPrefix": "-t",
            "label": "Threads",
            "description": "Specifies the number of files which can be processed simultaneously.  Each thread will be allocated 250MB of memory so you shouldn't run more threads than your available memory will cope with, and not more than 6 threads on a 32 bit machine.",
            "sbg:category": "Options",
            "inputBinding": {
              "prefix": "--threads",
              "sbg:cmdInclude": true,
              "valueFrom": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n//if \"threads\" is not specified\n//number of threads is determined based on number of inputs\n  if (! $job.inputs.threads){\n    $job.inputs.threads = [].concat($job.inputs.input_fastq).length\n  }\n  return Math.min($job.inputs.threads,7)\n}"
              },
              "separate": true
            },
            "id": "#threads",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Quiet",
            "id": "#quiet",
            "description": "Supress all progress messages on stdout and only report errors.",
            "sbg:category": "Options",
            "inputBinding": {
              "prefix": "--quiet",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:altPrefix": "-q",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Nogroup",
            "description": "Disable grouping of bases for reads >50bp. All reports will show data for every base in the read.  WARNING: Using this option will cause fastqc to crash and burn if you use it on really long reads, and your plots may end up a ridiculous size. You have been warned.",
            "sbg:category": "Options",
            "inputBinding": {
              "prefix": "--nogroup",
              "sbg:cmdInclude": true,
              "separate": false
            },
            "id": "#nogroup",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Nano",
            "description": "Files come from naopore sequences and are in fast5 format. In this mode you can pass in directories to process and the program will take in all fast5 files within those directories and produce a single output file from the sequences found in all files.",
            "sbg:category": "Options",
            "inputBinding": {
              "prefix": "--nano",
              "sbg:cmdInclude": true,
              "separate": false
            },
            "id": "#nano",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "Determined by the number of input files",
            "label": "Amount of memory allocated per job execution.",
            "description": "Amount of memory allocated per execution of FastQC job.",
            "sbg:category": "Execution parameters",
            "id": "#memory_per_job",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:altPrefix": "-l",
            "label": "Limits",
            "description": "Specifies a non-default file which contains a set of criteria which will be used to determine the warn/error limits for the various modules.  This file can also be used to selectively remove some modules from the output all together.  The format needs to mirror the default limits.txt file found in the Configuration folder.",
            "sbg:category": "File inputs",
            "sbg:fileTypes": "TXT",
            "inputBinding": {
              "prefix": "--limits",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#limits_file",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          },
          {
            "sbg:toolDefaultValue": "7",
            "sbg:altPrefix": "-f",
            "label": "Kmers",
            "description": "Specifies the length of Kmer to look for in the Kmer content module. Specified Kmer length must be between 2 and 10. Default length is 7 if not specified.",
            "sbg:category": "Options",
            "inputBinding": {
              "prefix": "--kmers",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#kmers",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Input file",
            "description": "Input file.",
            "sbg:category": "File inputs",
            "sbg:fileTypes": "FASTQ, FQ, FASTQ.GZ, FQ.GZ, BAM, SAM",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "position": 100,
              "itemSeparator": null
            },
            "id": "#input_fastq",
            "required": true,
            "type": [
              {
                "items": "File",
                "name": "input_fastq",
                "type": "array"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "FASTQ",
            "sbg:altPrefix": "-f",
            "label": "Format",
            "description": "Bypasses the normal sequence file format detection and forces the program to use the specified format.  Valid formats are BAM, SAM, BAM_mapped, SAM_mapped and FASTQ.",
            "sbg:category": "Options",
            "inputBinding": {
              "prefix": "--format",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#format",
            "type": [
              "null",
              {
                "symbols": [
                  "bam",
                  "sam",
                  "bam_mapped",
                  "sam_mapped",
                  "fastq"
                ],
                "name": "format",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "Determined by the number of input files",
            "label": "Number of CPUs.",
            "description": "Number of CPUs to be allocated per execution of FastQC.",
            "sbg:category": "Execution parameters",
            "id": "#cpus_per_job",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:altPrefix": "-c",
            "label": "Contaminants",
            "description": "Specifies a non-default file which contains the list of contaminants to screen overrepresented sequences against. The file must contain sets of named contaminants in the form name[tab]sequence.  Lines prefixed with a hash will be ignored.",
            "sbg:category": "File inputs",
            "sbg:fileTypes": "TXT",
            "inputBinding": {
              "prefix": "--contaminants",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#contaminants_file",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          },
          {
            "label": "Casava",
            "description": "Files come from raw casava output. Files in the same sample group (differing only by the group number) will be analysed as a set rather than individually. Sequences with the filter flag set in the header will be excluded from the analysis. Files must have the same names given to them by casava (including being gzipped and ending with .gz) otherwise they won't be grouped together correctly.",
            "sbg:category": "Options",
            "inputBinding": {
              "prefix": "--casava",
              "sbg:cmdInclude": true,
              "separate": false
            },
            "id": "#casava",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:altPrefix": "-a",
            "label": "Adapters",
            "description": "Specifies a non-default file which contains the list of adapter sequences which will be explicity searched against the library. The file must contain sets of named adapters in the form name[tab]sequence.  Lines prefixed with a hash will be ignored.",
            "sbg:category": "File inputs",
            "sbg:fileTypes": "TXT",
            "inputBinding": {
              "prefix": "--adapters",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#adapters_file",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          }
        ],
        "sbg:modifiedBy": "admin",
        "sbg:modifiedOn": 1493298709,
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ]
          }
        ],
        "x": 37.000089570881244,
        "sbg:toolkitVersion": "0.11.4",
        "cwlVersion": "sbg:draft-2",
        "sbg:toolAuthor": "Babraham Institute",
        "sbg:createdBy": "mladenlSBG",
        "label": "FastQC",
        "sbg:validationErrors": [],
        "stdout": "",
        "temporaryFailCodes": [],
        "y": 656.6320433114772,
        "sbg:id": "admin/sbg-public-data/fastqc-0-11-4/8",
        "sbg:latestRevision": 8,
        "baseCommand": [
          "fastqc"
        ],
        "id": "admin/sbg-public-data/fastqc-0-11-4/8",
        "sbg:job": {
          "inputs": {
            "format": null,
            "input_fastq": [
              {
                "class": "File",
                "secondaryFiles": [],
                "size": 0,
                "path": "/path/to/input_fastq-1.fastq"
              },
              {
                "class": "File",
                "secondaryFiles": [],
                "size": 0,
                "path": "/path/to/input_fastq-2.fastq"
              }
            ],
            "cpus_per_job": null,
            "memory_per_job": null,
            "quiet": true,
            "threads": null
          },
          "allocatedResources": {
            "cpu": 2,
            "mem": 1624
          }
        },
        "sbg:sbgMaintained": false,
        "outputs": [
          {
            "label": "Report zip",
            "id": "#report_zip",
            "description": "Zip archive of the report.",
            "sbg:fileTypes": "ZIP",
            "outputBinding": {
              "glob": "*_fastqc.zip",
              "sbg:metadata": {
                "__inherit__": "input_fastq"
              },
              "sbg:inheritMetadataFrom": "#input_fastq"
            },
            "type": [
              "null",
              {
                "items": "File",
                "name": "report_zip",
                "type": "array"
              }
            ]
          }
        ],
        "sbg:links": [
          {
            "label": "Homepage",
            "id": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
          },
          {
            "label": "Source Code",
            "id": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/fastqc_v0.11.4_source.zip"
          },
          {
            "label": "Wiki",
            "id": "https://wiki.hpcc.msu.edu/display/Bioinfo/FastQC+Tutorial"
          },
          {
            "label": "Download",
            "id": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/fastqc_v0.11.4.zip"
          },
          {
            "label": "Publication",
            "id": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc"
          }
        ],
        "sbg:revision": 8,
        "sbg:cmdPreview": "fastqc  --noextract --outdir .  /path/to/input_fastq-1.fastq  /path/to/input_fastq-2.fastq",
        "description": "FastQC reads a set of sequence files and produces a quality control (QC) report from each one. These reports consist of a number of different modules, each of which will help identify a different type of potential problem in your data. \n\nSince it's necessary to convert the tool report in order to show them on Seven Bridges platform, it's recommended to use [FastQC Analysis workflow instead](https://igor.sbgenomics.com/public/apps#admin/sbg-public-data/fastqc-analysis/). \n\nFastQC is a tool which takes a FASTQ file and runs a series of tests on it to generate a comprehensive QC report.  This report will tell you if there is anything unusual about your sequence.  Each test is flagged as a pass, warning, or fail depending on how far it departs from what you would expect from a normal large dataset with no significant biases.  It is important to stress that warnings or even failures do not necessarily mean that there is a problem with your data, only that it is unusual.  It is possible that the biological nature of your sample means that you would expect this particular bias in your results.\n\n### Common Issues:\n\nOutput of the tool is ZIP archive. In order to view report on Seven Bridges platform, you can use SBG Html2b64 tool. It is advised to scatter SBG Html2b64 so it would be able to process an array of files. The example can be seen in [FastQC Analysis workflow](https://igor.sbgenomics.com/public/apps#admin/sbg-public-data/fastqc-analysis/) which you can also use instead of this tool.",
        "sbg:projectName": "SBG Public data",
        "class": "CommandLineTool",
        "sbg:image_url": null,
        "sbg:createdOn": 1447773725,
        "sbg:contributors": [
          "djordje_klisic",
          "admin",
          "mladenlSBG"
        ],
        "sbg:revisionNotes": "* Fixed the JS expression for the CPU and Memory allocation\n* Added cpus_per_job and memory_per_job parameters\n* Removed default version for format, so the tool can handle combinations of file formats",
        "sbg:project": "admin/sbg-public-data",
        "sbg:categories": [
          "FASTQ-Processing",
          "Quality-Control",
          "Quantification"
        ],
        "successCodes": [],
        "sbg:license": "GNU General Public License v3.0 only",
        "arguments": [
          {
            "prefix": "",
            "valueFrom": "--noextract",
            "separate": true
          },
          {
            "prefix": "--outdir",
            "valueFrom": ".",
            "separate": true
          }
        ],
        "sbg:toolkit": "FastQC",
        "stdin": "",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "mladenlSBG",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1447773725,
            "sbg:revision": 0
          },
          {
            "sbg:modifiedBy": "djordje_klisic",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1459957440,
            "sbg:revision": 1
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1471861482,
            "sbg:revision": 2
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "Input categories added.",
            "sbg:modifiedOn": 1476440178,
            "sbg:revision": 3
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "FASTQ input changed from single file to array. Added better thread handling. \n\nIMPORTANT NOTICE: If updating this tool in existing workflow, it's necessary to REMOVE SCATTER (uncheck it) from input_fastq or it might break the pipeline.",
            "sbg:modifiedOn": 1476440178,
            "sbg:revision": 4
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "FASTQ input changed from single file to array. Added better thread handling.\n\nIMPORTANT NOTICE: If updating this tool in existing workflow, it's necessary to REMOVE SCATTER (uncheck it) from input_fastq or it might break the pipeline.",
            "sbg:modifiedOn": 1476440178,
            "sbg:revision": 5
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "IMPORTANT NOTICE: If updating this tool in existing workflow, it's necessary to REMOVE SCATTER (uncheck it) from input_fastq or it might break the pipeline.\"\n\nAdded automatised handling of BAM and SAM files. Also, added security measures for better automated threading handling.",
            "sbg:modifiedOn": 1489067520,
            "sbg:revision": 6
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "Changed the file types of limits, adapters and contaminants files to be TXT, they have to be in format name[tab]sequence. Format should be similar to the one in the Configuration folder provided with FastQC, txt files.\n\n\"IMPORTANT NOTICE: If updating this tool in existing workflow, it's necessary to REMOVE SCATTER (uncheck it) from input_fastq or it might break the pipeline.\"",
            "sbg:modifiedOn": 1489067520,
            "sbg:revision": 7
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "* Fixed the JS expression for the CPU and Memory allocation\n* Added cpus_per_job and memory_per_job parameters\n* Removed default version for format, so the tool can handle combinations of file formats",
            "sbg:modifiedOn": 1493298709,
            "sbg:revision": 8
          }
        ],
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerPull": "images.sbgenomics.com/mladenlsbg/fastqc:0.11.4",
            "dockerImageId": "759c4c8fbafd"
          },
          {
            "class": "sbg:CPURequirement",
            "value": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  // if cpus_per_job is set, it takes precedence\n  if ($job.inputs.cpus_per_job) {\n    return $job.inputs.cpus_per_job \n  }\n  // if threads parameter is set, the number of CPUs is set based on that parametere\n  else if ($job.inputs.threads) {\n    return $job.inputs.threads\n  }\n  // else the number of CPUs is determined by the number of input files, up to 7 -- default\n  else return Math.min([].concat($job.inputs.input_fastq).length,7)\n}"
            }
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  // if memory_per_job is set, it takes precedence\n  if ($job.inputs.memory_per_job){\n    return $job.inputs.memory_per_job\n  }\n  // if threads parameter is set, memory req is set based on the number of threads\n  else if ($job.inputs.threads){\n    return 1024 + 300*$job.inputs.threads\n  }\n  // else the memory req is determined by the number of input files, up to 7 -- default\n  else return (1024 + 300*Math.min([].concat($job.inputs.input_fastq).length,7))\n}\n\n"
            }
          }
        ]
      },
      "sbg:y": 656.6320433114772,
      "id": "#FastQC"
    },
    {
      "inputs": [
        {
          "id": "#BWA_INDEX.total_memory"
        },
        {
          "source": [
            "#reference"
          ],
          "id": "#BWA_INDEX.reference"
        },
        {
          "id": "#BWA_INDEX.prefix_of_the_index_to_be_output"
        },
        {
          "id": "#BWA_INDEX.bwt_construction"
        },
        {
          "id": "#BWA_INDEX.block_size"
        },
        {
          "id": "#BWA_INDEX.add_64_to_fasta_name"
        }
      ],
      "outputs": [
        {
          "id": "#BWA_INDEX.indexed_reference"
        }
      ],
      "sbg:x": 281.0000981291186,
      "run": {
        "inputs": [
          {
            "label": "Total memory [Gb]",
            "description": "Total memory [GB] to be reserved for the tool (Default value is 1.5 x size_of_the_reference).",
            "type": [
              "null",
              "int"
            ],
            "id": "#total_memory",
            "sbg:category": "Configuration"
          },
          {
            "label": "Reference",
            "description": "Input reference fasta of TAR file with reference and indices.",
            "sbg:category": "File input",
            "type": [
              "File"
            ],
            "sbg:stageInput": "link",
            "id": "#reference",
            "required": true,
            "sbg:fileTypes": "FASTA,FA,FA.GZ,FASTA.GZ,TAR"
          },
          {
            "label": "Prefix of the index to be output",
            "description": "Prefix of the index [same as fasta name].",
            "type": [
              "null",
              "string"
            ],
            "id": "#prefix_of_the_index_to_be_output",
            "sbg:category": "Configuration"
          },
          {
            "sbg:toolDefaultValue": "auto",
            "label": "Bwt construction",
            "description": "Algorithm for constructing BWT index. Available options are:s\tIS linear-time algorithm for constructing suffix array. It requires 5.37N memory where N is the size of the database. IS is moderately fast, but does not work with database larger than 2GB. IS is the default algorithm due to its simplicity. The current codes for IS algorithm are reimplemented by Yuta Mori. bwtsw\tAlgorithm implemented in BWT-SW. This method works with the whole human genome. Warning: `-a bwtsw' does not work for short genomes, while `-a is' and `-a div' do not work not for long genomes.",
            "sbg:category": "Configuration",
            "inputBinding": {
              "prefix": "-a",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#bwt_construction",
            "type": [
              "null",
              {
                "symbols": [
                  "bwtsw",
                  "is",
                  "div"
                ],
                "name": "bwt_construction",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "10000000",
            "label": "Block size",
            "description": "Block size for the bwtsw algorithm (effective with -a bwtsw).",
            "sbg:category": "Configuration",
            "id": "#block_size",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Output index files renamed by adding 64",
            "description": "Index files named as <in.fasta>64 instead of <in.fasta>.*.",
            "type": [
              "null",
              "boolean"
            ],
            "id": "#add_64_to_fasta_name",
            "sbg:category": "Configuration"
          }
        ],
        "sbg:modifiedBy": "admin",
        "sbg:modifiedOn": 1471952990,
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ]
          }
        ],
        "x": 281.0000981291186,
        "sbg:toolkitVersion": "0.7.13",
        "arguments": [
          {
            "separate": true,
            "valueFrom": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar' || !$job.inputs.bwt_construction){\n    return ''\n  } else {\n    return '-a ' + $job.inputs.bwt_construction\n  }\n}"
            }
          },
          {
            "separate": true,
            "valueFrom": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar' || !$job.inputs.prefix){\n    return ''\n  } else {\n    return '-p ' + $job.inputs.prefix\n  }\n}\n"
            }
          },
          {
            "separate": true,
            "valueFrom": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar' || !$job.inputs.block_size){\n    return ''\n  } else {\n    return '-b ' + $job.inputs.block_size\n  }\n}\n\n"
            }
          },
          {
            "separate": true,
            "valueFrom": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar' || !$job.inputs.add_64_to_fasta_name){\n    return ''\n  } else {\n    return '-6 '\n  }\n}\n"
            }
          },
          {
            "separate": true,
            "valueFrom": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar'){\n    return ''\n  }\n  else{\n    tar_cmd = 'tar -cf ' + reference_file + '.tar ' + reference_file + ' *.amb' + ' *.ann' + ' *.bwt' + ' *.pac' + ' *.sa' \n    return ' ; ' + tar_cmd\n  }\n}"
            }
          }
        ],
        "sbg:toolAuthor": "Heng Li",
        "cwlVersion": "sbg:draft-2",
        "sbg:createdBy": "djordje_klisic",
        "label": "BWA INDEX",
        "sbg:validationErrors": [],
        "stdout": "",
        "temporaryFailCodes": [],
        "y": 197.63201059691121,
        "sbg:id": "admin/sbg-public-data/bwa-index/15",
        "sbg:cmdPreview": "/opt/bwa-0.7.13/bwa index reference.fasta   -a bwtsw      -6    ; tar -cf reference.fasta.tar reference.fasta *.amb *.ann *.bwt *.pac *.sa",
        "baseCommand": [
          {
            "class": "Expression",
            "engine": "#cwl-js-engine",
            "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar'){\n    return 'echo Index files passed without any processing!'\n  }\n  else{\n    index_cmd = '/opt/bwa-0.7.13/bwa index '+ reference_file + ' '\n    return index_cmd\n  }\n}"
          }
        ],
        "id": "admin/sbg-public-data/bwa-index/15",
        "sbg:job": {
          "inputs": {
            "prefix_of_the_index_to_be_output": "prefix",
            "add_64_to_fasta_name": true,
            "block_size": 0,
            "total_memory": null,
            "reference": {
              "class": "File",
              "secondaryFiles": [
                {
                  "path": ".amb"
                },
                {
                  "path": ".ann"
                },
                {
                  "path": ".bwt"
                },
                {
                  "path": ".pac"
                },
                {
                  "path": ".sa"
                }
              ],
              "size": 0,
              "path": "/path/to/the/reference.fasta"
            },
            "bwt_construction": "bwtsw"
          },
          "allocatedResources": {
            "cpu": 1,
            "mem": 1536
          }
        },
        "sbg:sbgMaintained": false,
        "outputs": [
          {
            "label": "TARed fasta with its BWA indices",
            "id": "#indexed_reference",
            "description": "TARed fasta with its BWA indices.",
            "sbg:fileTypes": "TAR",
            "outputBinding": {
              "glob": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar'){\n    return reference_file\n  }\n  else{\n    return reference_file + '.tar'\n  }\n}\n"
              },
              "sbg:inheritMetadataFrom": "#reference"
            },
            "type": [
              "null",
              "File"
            ]
          }
        ],
        "sbg:links": [
          {
            "label": "Homepage",
            "id": "http://bio-bwa.sourceforge.net/"
          },
          {
            "label": "Source code",
            "id": "https://github.com/lh3/bwa"
          },
          {
            "label": "Wiki",
            "id": "http://bio-bwa.sourceforge.net/bwa.shtml"
          },
          {
            "label": "Download",
            "id": "http://sourceforge.net/projects/bio-bwa/"
          },
          {
            "label": "Publication",
            "id": "http://www.ncbi.nlm.nih.gov/pubmed/19451168"
          }
        ],
        "sbg:revision": 15,
        "sbg:latestRevision": 15,
        "description": "BWA INDEX constructs the FM-index (Full-text index in Minute space) for the reference genome.\nGenerated index files will be used with BWA MEM, BWA ALN, BWA SAMPE and BWA SAMSE tools.\n\nIf input reference file has TAR extension it is assumed that BWA indices came together with it. BWA INDEX will only pass that TAR to the output. If input is not TAR, the creation of BWA indices and its packing in TAR file (together with the reference) will be performed.",
        "sbg:projectName": "SBG Public data",
        "class": "CommandLineTool",
        "sbg:image_url": null,
        "sbg:createdOn": 1459166596,
        "sbg:contributors": [
          "djordje_klisic",
          "admin"
        ],
        "sbg:project": "admin/sbg-public-data",
        "sbg:categories": [
          "Indexing",
          "FASTA-Processing"
        ],
        "successCodes": [],
        "sbg:license": "GNU Affero General Public License v3.0, MIT License",
        "sbg:toolkit": "BWA",
        "stdin": "",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "djordje_klisic",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1459166596,
            "sbg:revision": 0
          },
          {
            "sbg:modifiedBy": "djordje_klisic",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1459166596,
            "sbg:revision": 1
          },
          {
            "sbg:modifiedBy": "djordje_klisic",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1459166596,
            "sbg:revision": 2
          },
          {
            "sbg:modifiedBy": "djordje_klisic",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1461762512,
            "sbg:revision": 3
          },
          {
            "sbg:modifiedBy": "djordje_klisic",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1462904351,
            "sbg:revision": 4
          },
          {
            "sbg:modifiedBy": "djordje_klisic",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1465231737,
            "sbg:revision": 5
          },
          {
            "sbg:modifiedBy": "djordje_klisic",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1465298989,
            "sbg:revision": 6
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1471952990,
            "sbg:revision": 7
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1471952990,
            "sbg:revision": 8
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1471952990,
            "sbg:revision": 9
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1471952990,
            "sbg:revision": 10
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1471952990,
            "sbg:revision": 11
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1471952990,
            "sbg:revision": 12
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1471952990,
            "sbg:revision": 13
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1471952990,
            "sbg:revision": 14
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1471952990,
            "sbg:revision": 15
          }
        ],
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerPull": "images.sbgenomics.com/vladimirk/bwa:0.7.13",
            "dockerImageId": "2f813371e803"
          },
          {
            "class": "sbg:CPURequirement",
            "value": 1
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  GB_1 = 1024*1024*1024\n  reads_size = $job.inputs.reference.size\n\n  if(!reads_size) { reads_size = GB_1 }\n  \n  if($job.inputs.total_memory){\n    return $job.inputs.total_memory * 1024\n  } else {\n    return (parseInt(1.5 * reads_size / (1024*1024)))\n  }\n}"
            }
          }
        ]
      },
      "sbg:y": 197.63201059691121,
      "id": "#BWA_INDEX"
    },
    {
      "inputs": [
        {
          "id": "#BWA_MEM_Bundle.verbose_level"
        },
        {
          "id": "#BWA_MEM_Bundle.use_soft_clipping"
        },
        {
          "id": "#BWA_MEM_Bundle.unpaired_read_penalty"
        },
        {
          "id": "#BWA_MEM_Bundle.total_memory"
        },
        {
          "id": "#BWA_MEM_Bundle.threads"
        },
        {
          "id": "#BWA_MEM_Bundle.speficy_distribution_parameters"
        },
        {
          "id": "#BWA_MEM_Bundle.sort_memory"
        },
        {
          "id": "#BWA_MEM_Bundle.smart_pairing_in_input_fastq"
        },
        {
          "id": "#BWA_MEM_Bundle.skip_seeds"
        },
        {
          "id": "#BWA_MEM_Bundle.skip_pairing"
        },
        {
          "id": "#BWA_MEM_Bundle.skip_mate_rescue"
        },
        {
          "id": "#BWA_MEM_Bundle.select_seeds"
        },
        {
          "id": "#BWA_MEM_Bundle.seed_occurrence_for_the_3rd_round"
        },
        {
          "id": "#BWA_MEM_Bundle.score_for_a_sequence_match"
        },
        {
          "id": "#BWA_MEM_Bundle.sambamba_threads"
        },
        {
          "id": "#BWA_MEM_Bundle.rg_sample_id"
        },
        {
          "id": "#BWA_MEM_Bundle.rg_platform_unit_id"
        },
        {
          "id": "#BWA_MEM_Bundle.rg_platform",
          "default": "Illumina"
        },
        {
          "id": "#BWA_MEM_Bundle.rg_median_fragment_length"
        },
        {
          "id": "#BWA_MEM_Bundle.rg_library_id"
        },
        {
          "id": "#BWA_MEM_Bundle.rg_id"
        },
        {
          "id": "#BWA_MEM_Bundle.rg_data_submitting_center"
        },
        {
          "id": "#BWA_MEM_Bundle.reserved_threads"
        },
        {
          "source": [
            "#BWA_INDEX.indexed_reference"
          ],
          "id": "#BWA_MEM_Bundle.reference_index_tar"
        },
        {
          "id": "#BWA_MEM_Bundle.read_type"
        },
        {
          "id": "#BWA_MEM_Bundle.read_group_header"
        },
        {
          "id": "#BWA_MEM_Bundle.output_name"
        },
        {
          "id": "#BWA_MEM_Bundle.output_in_xa"
        },
        {
          "id": "#BWA_MEM_Bundle.output_header"
        },
        {
          "id": "#BWA_MEM_Bundle.output_format",
          "default": "BAM"
        },
        {
          "id": "#BWA_MEM_Bundle.output_alignments"
        },
        {
          "id": "#BWA_MEM_Bundle.mismatch_penalty"
        },
        {
          "id": "#BWA_MEM_Bundle.minimum_seed_length"
        },
        {
          "id": "#BWA_MEM_Bundle.minimum_output_score"
        },
        {
          "id": "#BWA_MEM_Bundle.mate_rescue_rounds"
        },
        {
          "id": "#BWA_MEM_Bundle.mark_shorter"
        },
        {
          "id": "#BWA_MEM_Bundle.insert_string_to_header"
        },
        {
          "source": [
            "#Fqtrim_0_9_5.trimmed_reads"
          ],
          "id": "#BWA_MEM_Bundle.input_reads"
        },
        {
          "id": "#BWA_MEM_Bundle.ignore_alt_file"
        },
        {
          "id": "#BWA_MEM_Bundle.gap_open_penalties"
        },
        {
          "id": "#BWA_MEM_Bundle.gap_extension_penalties"
        },
        {
          "id": "#BWA_MEM_Bundle.filter_out_secondary_alignments"
        },
        {
          "id": "#BWA_MEM_Bundle.dropoff"
        },
        {
          "id": "#BWA_MEM_Bundle.drop_chains_fraction"
        },
        {
          "id": "#BWA_MEM_Bundle.discard_exact_matches"
        },
        {
          "id": "#BWA_MEM_Bundle.discard_chain_length"
        },
        {
          "id": "#BWA_MEM_Bundle.deduplication",
          "default": "MarkDuplicates"
        },
        {
          "id": "#BWA_MEM_Bundle.clipping_penalty"
        },
        {
          "id": "#BWA_MEM_Bundle.band_width"
        },
        {
          "id": "#BWA_MEM_Bundle.append_comment"
        }
      ],
      "outputs": [
        {
          "id": "#BWA_MEM_Bundle.aligned_reads"
        }
      ],
      "sbg:x": 525.000031113625,
      "run": {
        "inputs": [
          {
            "sbg:toolDefaultValue": "3",
            "label": "Verbose level",
            "description": "Verbose level: 1=error, 2=warning, 3=message, 4+=debugging.",
            "sbg:category": "BWA Input/output options",
            "inputBinding": {
              "prefix": "-v",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#verbose_level",
            "type": [
              "null",
              {
                "symbols": [
                  "1",
                  "2",
                  "3",
                  "4"
                ],
                "name": "verbose_level",
                "type": "enum"
              }
            ]
          },
          {
            "label": "Use soft clipping",
            "description": "Use soft clipping for supplementary alignments.",
            "sbg:category": "BWA Input/output options",
            "inputBinding": {
              "prefix": "-Y",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#use_soft_clipping",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "17",
            "label": "Unpaired read penalty",
            "description": "Penalty for an unpaired read pair.",
            "sbg:category": "BWA Scoring options",
            "inputBinding": {
              "prefix": "-U",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#unpaired_read_penalty",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "15",
            "label": "Total memory",
            "description": "Total memory to be used by the tool in GB. It's sum of BWA, Sambamba Sort and Samblaster. For fastq files of total size less than 10GB, we suggest using the default setting of 15GB, for larger files we suggest using 58GB of memory (and 32CPU cores).",
            "sbg:category": "Execution",
            "sbg:stageInput": null,
            "id": "#total_memory",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "8",
            "label": "Threads",
            "description": "Number of threads for BWA, Samblaster and Sambamba sort process.",
            "sbg:category": "Execution",
            "id": "#threads",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Specify distribution parameters",
            "description": "Specify the mean, standard deviation (10% of the mean if absent), max (4 sigma from the mean if absent) and min of the insert size distribution.FR orientation only. This array can have maximum four values, where first two should be specified as FLOAT and last two as INT.",
            "sbg:category": "BWA Input/output options",
            "inputBinding": {
              "prefix": "-I",
              "sbg:cmdInclude": true,
              "separate": false,
              "itemSeparator": null
            },
            "id": "#speficy_distribution_parameters",
            "type": [
              "null",
              {
                "items": "float",
                "name": "speficy_distribution_parameters",
                "type": "array"
              }
            ]
          },
          {
            "label": "Memory for BAM sorting",
            "description": "Amount of RAM [Gb] to give to the sorting algorithm (if not provided will be set to one third of the total memory).",
            "type": [
              "null",
              "int"
            ],
            "id": "#sort_memory",
            "sbg:category": "Execution"
          },
          {
            "label": "Smart pairing in input FASTQ file",
            "description": "Smart pairing in input FASTQ file (ignoring in2.fq).",
            "sbg:category": "BWA Input/output options",
            "inputBinding": {
              "prefix": "-p",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#smart_pairing_in_input_fastq",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "500",
            "label": "Skip seeds with more than INT occurrences",
            "description": "Skip seeds with more than INT occurrences.",
            "sbg:category": "BWA Algorithm options",
            "inputBinding": {
              "prefix": "-c",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#skip_seeds",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Skip pairing",
            "description": "Skip pairing; mate rescue performed unless -S also in use.",
            "sbg:category": "BWA Algorithm options",
            "inputBinding": {
              "prefix": "-P",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#skip_pairing",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Skip mate rescue",
            "description": "Skip mate rescue.",
            "sbg:category": "BWA Algorithm options",
            "inputBinding": {
              "prefix": "-S",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#skip_mate_rescue",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "1.5",
            "label": "Select seeds",
            "description": "Look for internal seeds inside a seed longer than {-k} * FLOAT.",
            "sbg:category": "BWA Algorithm options",
            "inputBinding": {
              "prefix": "-r",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#select_seeds",
            "type": [
              "null",
              "float"
            ]
          },
          {
            "sbg:toolDefaultValue": "20",
            "label": "Seed occurrence for the 3rd round",
            "description": "Seed occurrence for the 3rd round seeding.",
            "sbg:category": "BWA Algorithm options",
            "inputBinding": {
              "prefix": "-y",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#seed_occurrence_for_the_3rd_round",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "1",
            "label": "Score for a sequence match",
            "description": "Score for a sequence match, which scales options -TdBOELU unless overridden.",
            "sbg:category": "BWA Scoring options",
            "inputBinding": {
              "prefix": "-A",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#score_for_a_sequence_match",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Sambamba Sort threads",
            "description": "Number of threads to pass to Sambamba sort, if used.",
            "type": [
              "null",
              "int"
            ],
            "id": "#sambamba_threads",
            "sbg:category": "Execution"
          },
          {
            "sbg:toolDefaultValue": "Inferred from metadata",
            "label": "Sample ID",
            "description": "Specify the sample ID for RG line - A human readable identifier for a sample or specimen, which could contain some metadata information. A sample or specimen is material taken from a biological entity for testing, diagnosis, propagation, treatment, or research purposes, including but not limited to tissues, body fluids, cells, organs, embryos, body excretory products, etc.",
            "sbg:category": "BWA Read Group Options",
            "id": "#rg_sample_id",
            "type": [
              "null",
              "string"
            ]
          },
          {
            "sbg:toolDefaultValue": "Inferred from metadata",
            "label": "Platform unit ID",
            "description": "Specify the platform unit (lane/slide) for RG line - An identifier for lanes (Illumina), or for slides (SOLiD) in the case that a library was split and ran over multiple lanes on the flow cell or slides.",
            "sbg:category": "BWA Read Group Options",
            "id": "#rg_platform_unit_id",
            "type": [
              "null",
              "string"
            ]
          },
          {
            "sbg:toolDefaultValue": "Inferred from metadata",
            "label": "Platform",
            "description": "Specify the version of the technology that was used for sequencing, which will be placed in RG line.",
            "sbg:category": "BWA Read Group Options",
            "id": "#rg_platform",
            "type": [
              "null",
              {
                "symbols": [
                  "454",
                  "Helicos",
                  "Illumina",
                  "Solid",
                  "IonTorrent"
                ],
                "name": "rg_platform",
                "type": "enum"
              }
            ]
          },
          {
            "label": "Median fragment length",
            "description": "Specify the median fragment length for RG line.",
            "type": [
              "null",
              "string"
            ],
            "id": "#rg_median_fragment_length",
            "sbg:category": "BWA Read Group Options"
          },
          {
            "sbg:toolDefaultValue": "Inferred from metadata",
            "label": "Library ID",
            "description": "Specify the identifier for the sequencing library preparation, which will be placed in RG line.",
            "sbg:category": "BWA Read Group Options",
            "id": "#rg_library_id",
            "type": [
              "null",
              "string"
            ]
          },
          {
            "sbg:toolDefaultValue": "1",
            "label": "Read group ID",
            "description": "Read group ID",
            "sbg:category": "Configuration",
            "id": "#rg_id",
            "type": [
              "null",
              "string"
            ]
          },
          {
            "label": "Data submitting center",
            "description": "Specify the data submitting center for RG line.",
            "type": [
              "null",
              "string"
            ],
            "id": "#rg_data_submitting_center",
            "sbg:category": "BWA Read Group Options"
          },
          {
            "sbg:toolDefaultValue": "1",
            "label": "Reserved number of threads on the instance",
            "description": "Reserved number of threads on the instance used by scheduler.",
            "sbg:category": "Configuration",
            "sbg:stageInput": null,
            "id": "#reserved_threads",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Reference Index TAR",
            "description": "Reference fasta file with BWA index files packed in TAR.",
            "sbg:category": "Input files",
            "type": [
              "File"
            ],
            "sbg:stageInput": "link",
            "id": "#reference_index_tar",
            "required": true,
            "sbg:fileTypes": "TAR"
          },
          {
            "label": "Sequencing technology-specific settings",
            "description": "Sequencing technology-specific settings; Setting -x changes multiple parameters unless overriden. pacbio: -k17 -W40 -r10 -A1 -B1 -O1 -E1 -L0  (PacBio reads to ref). ont2d: -k14 -W20 -r10 -A1 -B1 -O1 -E1 -L0  (Oxford Nanopore 2D-reads to ref). intractg: -B9 -O16 -L5  (intra-species contigs to ref).",
            "sbg:category": "BWA Scoring options",
            "inputBinding": {
              "prefix": "-x",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#read_type",
            "type": [
              "null",
              {
                "symbols": [
                  "pacbio",
                  "ont2d",
                  "intractg"
                ],
                "name": "read_type",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "Constructed from per-attribute parameters or inferred from metadata.",
            "label": "Read group header",
            "description": "Read group header line such as '@RG\\tID:foo\\tSM:bar'.  This value takes precedence over per-attribute parameters.",
            "sbg:category": "BWA Read Group Options",
            "id": "#read_group_header",
            "type": [
              "null",
              "string"
            ]
          },
          {
            "label": "Output SAM/BAM file name",
            "description": "Name of the output BAM file.",
            "type": [
              "null",
              "string"
            ],
            "id": "#output_name",
            "sbg:category": "Configuration"
          },
          {
            "sbg:toolDefaultValue": "[5, 200]",
            "label": "Output in XA",
            "description": "If there are <INT hits with score >80% of the max score, output all in XA. This array should have no more than two values.",
            "sbg:category": "BWA Input/output options",
            "inputBinding": {
              "prefix": "-h",
              "sbg:cmdInclude": true,
              "separate": false,
              "itemSeparator": ","
            },
            "id": "#output_in_xa",
            "type": [
              "null",
              {
                "items": "int",
                "type": "array"
              }
            ]
          },
          {
            "label": "Output header",
            "description": "Output the reference FASTA header in the XR tag.",
            "sbg:category": "BWA Input/output options",
            "inputBinding": {
              "prefix": "-V",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#output_header",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "SortedBAM",
            "label": "Output format",
            "description": "Specify output format (Sorted BAM option will output coordinate sorted BAM).",
            "sbg:category": "Execution",
            "id": "#output_format",
            "type": [
              "null",
              {
                "symbols": [
                  "SAM",
                  "BAM",
                  "SortedBAM"
                ],
                "name": "output_format",
                "type": "enum"
              }
            ]
          },
          {
            "label": "Output alignments",
            "description": "Output all alignments for SE or unpaired PE.",
            "sbg:category": "BWA Input/output options",
            "inputBinding": {
              "prefix": "-a",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#output_alignments",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "4",
            "label": "Mismatch penalty",
            "description": "Penalty for a mismatch.",
            "sbg:category": "BWA Scoring options",
            "inputBinding": {
              "prefix": "-B",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#mismatch_penalty",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "19",
            "label": "Minimum seed length",
            "description": "Minimum seed length for BWA MEM.",
            "sbg:category": "BWA Algorithm options",
            "inputBinding": {
              "prefix": "-k",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#minimum_seed_length",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "30",
            "label": "Minimum alignment score for a read to be output in SAM/BAM",
            "description": "Minimum alignment score for a read to be output in SAM/BAM.",
            "sbg:category": "BWA Input/output options",
            "inputBinding": {
              "prefix": "-T",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#minimum_output_score",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "50",
            "label": "Mate rescue rounds",
            "description": "Perform at most INT rounds of mate rescues for each read.",
            "sbg:category": "BWA Algorithm options",
            "inputBinding": {
              "prefix": "-m",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#mate_rescue_rounds",
            "type": [
              "null",
              "string"
            ]
          },
          {
            "label": "Mark shorter",
            "description": "Mark shorter split hits as secondary.",
            "sbg:category": "BWA Input/output options",
            "inputBinding": {
              "prefix": "-M",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#mark_shorter",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Insert string to output SAM or BAM header",
            "description": "Insert STR to header if it starts with @; or insert lines in FILE.",
            "sbg:category": "BWA Input/output options",
            "inputBinding": {
              "prefix": "-H",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#insert_string_to_header",
            "type": [
              "null",
              "string"
            ]
          },
          {
            "label": "Input reads",
            "description": "Input sequence reads.",
            "sbg:category": "Input files",
            "sbg:fileTypes": "FASTQ, FASTQ.GZ, FQ, FQ.GZ",
            "id": "#input_reads",
            "required": true,
            "type": [
              {
                "items": "File",
                "name": "input_reads",
                "type": "array"
              }
            ]
          },
          {
            "label": "Ignore ALT file",
            "description": "Treat ALT contigs as part of the primary assembly (i.e. ignore <idxbase>.alt file).",
            "sbg:category": "BWA Input/output options",
            "inputBinding": {
              "prefix": "-j",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#ignore_alt_file",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "[6,6]",
            "label": "Gap open penalties",
            "description": "Gap open penalties for deletions and insertions. This array can't have more than two values.",
            "sbg:category": "BWA Scoring options",
            "inputBinding": {
              "prefix": "-O",
              "sbg:cmdInclude": true,
              "separate": false,
              "itemSeparator": ","
            },
            "id": "#gap_open_penalties",
            "type": [
              "null",
              {
                "items": "int",
                "type": "array"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "[1,1]",
            "label": "Gap extension",
            "description": "Gap extension penalty; a gap of size k cost '{-O} + {-E}*k'. This array can't have more than two values.",
            "sbg:category": "BWA Scoring options",
            "inputBinding": {
              "prefix": "-E",
              "sbg:cmdInclude": true,
              "separate": false,
              "itemSeparator": ","
            },
            "id": "#gap_extension_penalties",
            "type": [
              "null",
              {
                "items": "int",
                "type": "array"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Filter out secondary alignments",
            "description": "Filter out secondary alignments. Sambamba view tool will be used to perform this internally.",
            "sbg:category": "Execution",
            "sbg:stageInput": null,
            "id": "#filter_out_secondary_alignments",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "100",
            "label": "Dropoff",
            "description": "Off-diagonal X-dropoff.",
            "sbg:category": "BWA Algorithm options",
            "inputBinding": {
              "prefix": "-d",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#dropoff",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "0.50",
            "label": "Drop chains fraction",
            "description": "Drop chains shorter than FLOAT fraction of the longest overlapping chain.",
            "sbg:category": "BWA Algorithm options",
            "inputBinding": {
              "prefix": "-D",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#drop_chains_fraction",
            "type": [
              "null",
              "float"
            ]
          },
          {
            "label": "Discard exact matches",
            "description": "Discard full-length exact matches.",
            "sbg:category": "BWA Algorithm options",
            "inputBinding": {
              "prefix": "-e",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#discard_exact_matches",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "0",
            "label": "Discard chain length",
            "description": "Discard a chain if seeded bases shorter than INT.",
            "sbg:category": "BWA Algorithm options",
            "inputBinding": {
              "prefix": "-W",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#discard_chain_length",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "MarkDuplicates",
            "label": "PCR duplicate detection",
            "description": "Use Samblaster for finding duplicates on sequence reads.",
            "sbg:category": "Samblaster parameters",
            "id": "#deduplication",
            "type": [
              "null",
              {
                "symbols": [
                  "None",
                  "MarkDuplicates",
                  "RemoveDuplicates"
                ],
                "name": "deduplication",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "[5,5]",
            "label": "Clipping penalty",
            "description": "Penalty for 5'- and 3'-end clipping.",
            "sbg:category": "BWA Scoring options",
            "inputBinding": {
              "prefix": "-L",
              "sbg:cmdInclude": true,
              "separate": false,
              "itemSeparator": ","
            },
            "id": "#clipping_penalty",
            "type": [
              "null",
              {
                "items": "int",
                "type": "array"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "100",
            "label": "Band width",
            "description": "Band width for banded alignment.",
            "sbg:category": "BWA Algorithm options",
            "inputBinding": {
              "prefix": "-w",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#band_width",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Append comment",
            "description": "Append FASTA/FASTQ comment to SAM output.",
            "sbg:category": "BWA Input/output options",
            "inputBinding": {
              "prefix": "-C",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#append_comment",
            "type": [
              "null",
              "boolean"
            ]
          }
        ],
        "sbg:modifiedBy": "admin",
        "sbg:modifiedOn": 1484824479,
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ]
          }
        ],
        "x": 525.000031113625,
        "sbg:toolkitVersion": "0.7.13",
        "cwlVersion": "sbg:draft-2",
        "sbg:toolAuthor": "Heng Li",
        "sbg:createdBy": "djordje_klisic",
        "label": "BWA MEM Bundle",
        "sbg:validationErrors": [],
        "stdout": "",
        "temporaryFailCodes": [],
        "y": 251.6320122658413,
        "sbg:id": "admin/sbg-public-data/bwa-mem-bundle-0-7-13/39",
        "sbg:latestRevision": 39,
        "baseCommand": [
          {
            "class": "Expression",
            "engine": "#cwl-js-engine",
            "script": "{\n  cmd = \"/bin/bash -c \\\"\"\n  return cmd\n}"
          },
          {
            "class": "Expression",
            "engine": "#cwl-js-engine",
            "script": "{\n  reference_file = $job.inputs.reference_index_tar.path.split('/')[$job.inputs.reference_index_tar.path.split('/').length-1]\n  return 'tar -xf ' + reference_file + ' ; '\n  \n}"
          },
          "/opt/bwa-0.7.13/bwa",
          "mem"
        ],
        "id": "admin/sbg-public-data/bwa-mem-bundle-0-7-13/39",
        "sbg:job": {
          "inputs": {
            "rg_platform_unit_id": "",
            "input_reads": [
              {
                "class": "File",
                "size": 30000000000,
                "secondaryFiles": [],
                "metadata": {
                  "sample_id": "dnk_sample",
                  "paired_end": "2",
                  "platform": "HiSeq X Ten"
                },
                "path": "/path/to/LP6005524-DNA_C01_lane_7.sorted.converted.filtered.pe_1.gz"
              },
              {
                "path": "/path/to/LP6005524-DNA_C01_lane_7.sorted.converted.filtered.pe_2.gz"
              }
            ],
            "read_group_header": "",
            "output_format": null,
            "rg_sample_id": "",
            "reserved_threads": 3,
            "threads": null,
            "deduplication": "MarkDuplicates",
            "sambamba_threads": null,
            "rg_library_id": "",
            "rg_data_submitting_center": "",
            "output_name": "",
            "band_width": null,
            "skip_seeds": null,
            "rg_id": "rg_id-string-value",
            "filter_out_secondary_alignments": false,
            "rg_median_fragment_length": "",
            "rg_platform": null,
            "reference_index_tar": {
              "class": "File",
              "secondaryFiles": [
                {
                  "path": ".amb"
                },
                {
                  "path": ".ann"
                },
                {
                  "path": ".bwt"
                },
                {
                  "path": ".pac"
                },
                {
                  "path": ".sa"
                }
              ],
              "size": 0,
              "path": "/path/to/reference.b37.fasta.gz.tar"
            },
            "total_memory": null,
            "sort_memory": 0
          },
          "allocatedResources": {
            "cpu": 3,
            "mem": 4096
          }
        },
        "sbg:sbgMaintained": false,
        "outputs": [
          {
            "label": "Aligned SAM/BAM",
            "id": "#aligned_reads",
            "description": "Aligned reads.",
            "sbg:fileTypes": "SAM, BAM",
            "outputBinding": {
              "glob": "{*.sam,*.bam}",
              "secondaryFiles": [
                ".bai",
                "^.bai"
              ],
              "sbg:inheritMetadataFrom": "#input_reads",
              "sbg:metadata": {
                "reference_genome": {
                  "class": "Expression",
                  "engine": "#cwl-js-engine",
                  "script": "{\n  reference_file = $job.inputs.reference_index_tar.path.split('/')[$job.inputs.reference_index_tar.path.split('/').length-1]\n  name = reference_file.slice(0, -4) // cut .tar extension \n  \n  name_list = name.split('.')\n  ext = name_list[name_list.length-1]\n\n  if (ext == 'gz' || ext == 'GZ'){\n    a = name_list.pop() // strip fasta.gz\n    a = name_list.pop()\n  } else\n    a = name_list.pop() //strip only fasta/fa\n  \n  return name_list.join('.')\n  \n}"
                }
              }
            },
            "type": [
              "null",
              "File"
            ]
          }
        ],
        "sbg:links": [
          {
            "label": "Homepage",
            "id": "http://bio-bwa.sourceforge.net/"
          },
          {
            "label": "Source code",
            "id": "https://github.com/lh3/bwa"
          },
          {
            "label": "Wiki",
            "id": "http://bio-bwa.sourceforge.net/bwa.shtml"
          },
          {
            "label": "Download",
            "id": "http://sourceforge.net/projects/bio-bwa/"
          },
          {
            "label": "Publication",
            "id": "http://arxiv.org/abs/1303.3997"
          },
          {
            "label": "Publication BWA Algorithm",
            "id": "http://www.ncbi.nlm.nih.gov/pubmed/19451168"
          }
        ],
        "sbg:revision": 39,
        "sbg:cmdPreview": "/bin/bash -c \" tar -xf reference.b37.fasta.gz.tar ;  /opt/bwa-0.7.13/bwa mem  -R '@RG\\tID:rg_id-string-value\\tPL:Illumina\\tSM:dnk_sample' -t 8  reference.b37.fasta.gz  /path/to/LP6005524-DNA_C01_lane_7.sorted.converted.filtered.pe_2.gz /path/to/LP6005524-DNA_C01_lane_7.sorted.converted.filtered.pe_1.gz  | /opt/samblaster/samblaster -i /dev/stdin -o /dev/stdout | /opt/sambamba_v0.6.0 view -t 8 -f bam -l 0 -S /dev/stdin | /opt/sambamba_v0.6.0 sort -t 8 -m 5GiB --tmpdir ./ -o LP6005524-DNA_C01_lane_7.sorted.converted.filtered.bam -l 5 /dev/stdin  ;declare -i pipe_statuses=(\\${PIPESTATUS[*]});len=\\${#pipe_statuses[@]};declare -i tot=0;echo \\${pipe_statuses[*]};for (( i=0; i<\\${len}; i++ ));do if [ \\${pipe_statuses[\\$i]} -ne 0 ];then tot=\\${pipe_statuses[\\$i]}; fi;done;if [ \\$tot -ne 0 ]; then >&2 echo Error in piping. Pipe statuses: \\${pipe_statuses[*]};fi; if [ \\$tot -ne 0 ]; then false;fi\"",
        "description": "**BWA MEM** is an algorithm designed for aligning sequence reads onto a large reference genome. BWA MEM is implemented as a component of BWA. The algorithm can automatically choose between performing end-to-end and local alignments. BWA MEM is capable of outputting multiple alignments, and finding chimeric reads. It can be applied to a wide range of read lengths, from 70 bp to several megabases. \n\nIn order to obtain possibilities for additional fast processing of aligned reads, two tools are embedded together into the same package with BWA MEM (0.7.13): Samblaster. (0.1.22) and Sambamba (v0.6.0). \nIf deduplication of alignments is needed, it can be done by setting the parameter 'Duplication'. **Samblaster** will be used internally to perform this action.\nBesides the standard BWA MEM SAM output file, BWA MEM package has been extended to support two additional output options: a BAM file obtained by piping through **Sambamba view** while filtering out the secondary alignments, as well as a Coordinate Sorted BAM option that additionally pipes the output through **Sambamba sort**, along with an accompanying .bai file produced by **Sambamba sort** as side effect. Sorted BAM is the default output of BWA MEM. Parameters responsible for these additional features are 'Filter out secondary alignments' and 'Output format'. Passing data from BWA MEM to Samblaster and Sambamba tools has been done through the pipes which saves processing times of two read and write of aligned reads into the hard drive. \n\nFor input reads fastq files of total size less than 10 GB we suggest using the default setting for parameter 'total memory' of 15GB, for larger files we suggest using 58 GB of memory and 32 CPU cores.\n\n**Important:**\nIn order to work BWA MEM Bundle requires fasta reference file accompanied with **bwa fasta indices** in TAR file.\nThere is the **known issue** with samblaster. It does not support processing when number of sequences in fasta is larger than 32768. If this is the case do not use deduplication option because the output BAM will be corrupted.",
        "sbg:projectName": "SBG Public data",
        "class": "CommandLineTool",
        "sbg:image_url": null,
        "sbg:createdOn": 1459166596,
        "sbg:contributors": [
          "djordje_klisic",
          "admin"
        ],
        "sbg:revisionNotes": "default threads parameter set to 8",
        "sbg:project": "admin/sbg-public-data",
        "sbg:categories": [
          "Alignment",
          "FASTQ-Processing"
        ],
        "successCodes": [],
        "sbg:license": "BWA: GNU Affero General Public License v3.0, MIT License. Sambamba: GNU GENERAL PUBLIC LICENSE. Samblaster: The MIT License (MIT)",
        "arguments": [
          {
            "prefix": "",
            "separate": false,
            "position": 111,
            "valueFrom": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{ \n     ///////////////////////////////////////////\n    ///  SAMBAMBA VIEW   //////////////////////\n   ///////////////////////////////////////////\nfunction common_substring(a,b) {\n  var i = 0;\n  \n  while(a[i] === b[i] && i < a.length)\n  {\n    i = i + 1;\n  }\n\n  return a.slice(0, i);\n}\n  \n   // Set output file name\n  if($job.inputs.input_reads[0] instanceof Array){\n    input_1 = $job.inputs.input_reads[0][0] // scatter mode\n    input_2 = $job.inputs.input_reads[0][1]\n  } else if($job.inputs.input_reads instanceof Array){\n    input_1 = $job.inputs.input_reads[0]\n    input_2 = $job.inputs.input_reads[1]\n  }else {\n    input_1 = [].concat($job.inputs.input_reads)[0]\n    input_2 = input_1\n  }\n  full_name = input_1.path.split('/')[input_1.path.split('/').length-1] \n\n  if($job.inputs.output_name){name = $job.inputs.output_name }\n  else if ($job.inputs.input_reads.length == 1){ \n    name = full_name\n\n    if(name.slice(-3, name.length) === '.gz' || name.slice(-3, name.length) === '.GZ')\n      name = name.slice(0, -3)   \n    if(name.slice(-3, name.length) === '.fq' || name.slice(-3, name.length) === '.FQ')\n      name = name.slice(0, -3)\n    if(name.slice(-6, name.length) === '.fastq' || name.slice(-6, name.length) === '.FASTQ')\n      name = name.slice(0, -6)\n       \n  }else{\n    full_name2 = input_2.path.split('/')[input_2.path.split('/').length-1] \n    name = common_substring(full_name, full_name2)\n    \n    if(name.slice(-1, name.length) === '_' || name.slice(-1, name.length) === '.')\n      name = name.slice(0, -1)\n    if(name.slice(-2, name.length) === 'p_' || name.slice(-1, name.length) === 'p.')\n      name = name.slice(0, -2)\n    if(name.slice(-2, name.length) === 'P_' || name.slice(-1, name.length) === 'P.')\n      name = name.slice(0, -2)\n    if(name.slice(-3, name.length) === '_p_' || name.slice(-3, name.length) === '.p.')\n      name = name.slice(0, -3)\n    if(name.slice(-3, name.length) === '_pe' || name.slice(-3, name.length) === '.pe')\n      name = name.slice(0, -3)\n  }\n  \n  // Read number of threads if defined\n  if ($job.inputs.sambamba_threads){\n    threads = $job.inputs.sambamba_threads\n  }\n  else if ($job.inputs.threads){\n    threads = $job.inputs.threads\n  }\n  else { threads = 8 }\n  \n  if ($job.inputs.filter_out_secondary_alignments){\n    filt_sec = ' --filter \\'not secondary_alignment\\' '\n  }\n  else {filt_sec=' '}\n   \n  // Set output command\n  sambamba_path = '/opt/sambamba_v0.6.0'\n  if ($job.inputs.output_format == 'BAM') {\n    return \"| \" + sambamba_path + \" view -t \"+ threads + filt_sec + \"-f bam -S /dev/stdin -o \"+ name + \".bam\"\n  }\n  else if ($job.inputs.output_format == 'SAM'){ // SAM\n    return \"> \" + name + \".sam\"\n  }\n  else { // SortedBAM is considered default\n    return \"| \" + sambamba_path + \" view -t \"+ threads + filt_sec + \"-f bam -l 0 -S /dev/stdin\"\n  }\n\n}"
            }
          },
          {
            "separate": false,
            "position": 112,
            "valueFrom": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  ///////////////////////////////////////////\n ///  SAMBAMBA SORT   //////////////////////\n///////////////////////////////////////////\n  \nfunction common_substring(a,b) {\n  var i = 0;\n  while(a[i] === b[i] && i < a.length)\n  {\n    i = i + 1;\n  }\n\n  return a.slice(0, i);\n}\n\n   // Set output file name\n  if($job.inputs.input_reads[0] instanceof Array){\n    input_1 = $job.inputs.input_reads[0][0] // scatter mode\n    input_2 = $job.inputs.input_reads[0][1]\n  } else if($job.inputs.input_reads instanceof Array){\n    input_1 = $job.inputs.input_reads[0]\n    input_2 = $job.inputs.input_reads[1]\n  }else {\n    input_1 = [].concat($job.inputs.input_reads)[0]\n    input_2 = input_1\n  }\n  full_name = input_1.path.split('/')[input_1.path.split('/').length-1] \n  \n  if($job.inputs.output_name){name = $job.inputs.output_name }\n  else if ($job.inputs.input_reads.length == 1){\n    name = full_name\n    if(name.slice(-3, name.length) === '.gz' || name.slice(-3, name.length) === '.GZ')\n      name = name.slice(0, -3)   \n    if(name.slice(-3, name.length) === '.fq' || name.slice(-3, name.length) === '.FQ')\n      name = name.slice(0, -3)\n    if(name.slice(-6, name.length) === '.fastq' || name.slice(-6, name.length) === '.FASTQ')\n      name = name.slice(0, -6)\n       \n  }else{\n    full_name2 = input_2.path.split('/')[input_2.path.split('/').length-1] \n    name = common_substring(full_name, full_name2)\n    \n    if(name.slice(-1, name.length) === '_' || name.slice(-1, name.length) === '.')\n      name = name.slice(0, -1)\n    if(name.slice(-2, name.length) === 'p_' || name.slice(-1, name.length) === 'p.')\n      name = name.slice(0, -2)\n    if(name.slice(-2, name.length) === 'P_' || name.slice(-1, name.length) === 'P.')\n      name = name.slice(0, -2)\n    if(name.slice(-3, name.length) === '_p_' || name.slice(-3, name.length) === '.p.')\n      name = name.slice(0, -3)\n    if(name.slice(-3, name.length) === '_pe' || name.slice(-3, name.length) === '.pe')\n      name = name.slice(0, -3)\n  }\n\n  //////////////////////////\n  // Set sort memory size\n  \n  reads_size = 0 // Not used because of situations when size does not exist!\n  GB_1 = 1024*1024*1024\n  if(reads_size < GB_1){ \n    suggested_memory = 4\n    suggested_cpus = 1\n  }\n  else if(reads_size < 10 * GB_1){ \n    suggested_memory = 15\n    suggested_cpus = 8\n  }\n  else { \n    suggested_memory = 58 \n    suggested_cpus = 31\n  }\n  \n  \n  if(!$job.inputs.total_memory){ total_memory = suggested_memory }\n  else{ total_memory = $job.inputs.total_memory }\n\n  // TODO:Rough estimation, should be fine-tuned!\n  if(total_memory > 16){ sorter_memory = parseInt(total_memory / 3) }\n  else{ sorter_memory = 5 }\n          \n  if ($job.inputs.sort_memory){\n    sorter_memory_string = $job.inputs.sort_memory +'GiB'\n  }\n  else sorter_memory_string = sorter_memory + 'GiB' \n  \n  // Read number of threads if defined  \n  suggested_cpus = 8\n  if ($job.inputs.sambamba_threads){\n    threads = $job.inputs.sambamba_threads\n  }\n  else if ($job.inputs.threads){\n    threads = $job.inputs.threads\n  }\n  else threads = suggested_cpus\n  \n  sambamba_path = '/opt/sambamba_v0.6.0'\n  \n  // SortedBAM is considered default\n  if (!(($job.inputs.output_format == 'BAM') || ($job.inputs.output_format == 'SAM'))){\n    cmd = \"| \" + sambamba_path + \" sort -t \" + threads\n    return cmd + \" -m \"+sorter_memory_string+\" --tmpdir ./ -o \"+ name +\".bam -l 5 /dev/stdin\"\n  }\n  else return \"\"\n}\n  \n"
            }
          },
          {
            "separate": true,
            "position": 110,
            "valueFrom": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n    ///////////////////////////////////////////\n    ///  SAMBLASTER      //////////////////////\n   ///////////////////////////////////////////\n  if ($job.inputs.deduplication == \"MarkDuplicates\"){\n    return \"| /opt/samblaster/samblaster -i /dev/stdin -o /dev/stdout\"\n  }\n  else if ($job.inputs.deduplication == \"RemoveDuplicates\"){\n    return \"| /opt/samblaster/samblaster -r -i /dev/stdin -o /dev/stdout\"\n  }\n  else{\n   return \"\" \n  }\n}"
            }
          },
          {
            "separate": true,
            "position": 1,
            "valueFrom": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  \n  if($job.inputs.read_group_header){\n  \treturn '-R ' + $job.inputs.read_group_header\n  }\n    \n  function add_param(key, val){\n    if(!val){\n      return\n\t}\n    param_list.push(key + ':' + val)\n  }\n\n  param_list = []\n\n  // Set output file name\n  if($job.inputs.input_reads[0] instanceof Array){\n    input_1 = $job.inputs.input_reads[0][0] // scatter mode\n  } else if($job.inputs.input_reads instanceof Array){\n    input_1 = $job.inputs.input_reads[0]\n  }else {\n    input_1 = [].concat($job.inputs.input_reads)[0]\n  }\n  \n  //Read metadata for input reads\n  read_metadata = input_1.metadata\n  if(!read_metadata) read_metadata = []\n\n  if($job.inputs.rg_id){\n    add_param('ID', $job.inputs.rg_id)\n  }\n  else {\n    add_param('ID', '1')\n  } \n   \n  \n  if($job.inputs.rg_data_submitting_center){\n  \tadd_param('CN', $job.inputs.rg_data_submitting_center)\n  }\n  else if('data_submitting_center' in  read_metadata){\n  \tadd_param('CN', read_metadata.data_submitting_center)\n  }\n  \n  if($job.inputs.rg_library_id){\n  \tadd_param('LB', $job.inputs.rg_library_id)\n  }\n  else if('library_id' in read_metadata){\n  \tadd_param('LB', read_metadata.library_id)\n  }\n  \n  if($job.inputs.rg_median_fragment_length){\n  \tadd_param('PI', $job.inputs.rg_median_fragment_length)\n  }\n\n  \n  if($job.inputs.rg_platform){\n  \tadd_param('PL', $job.inputs.rg_platform)\n  }\n  else if('platform' in read_metadata){\n    if(read_metadata.platform == 'HiSeq X Ten'){\n      rg_platform = 'Illumina'\n    }\n    else{\n      rg_platform = read_metadata.platform\n    }\n  \tadd_param('PL', rg_platform)\n  }\n  \n  if($job.inputs.rg_platform_unit_id){\n  \tadd_param('PU', $job.inputs.rg_platform_unit_id)\n  }\n  else if('platform_unit_id' in read_metadata){\n  \tadd_param('PU', read_metadata.platform_unit_id)\n  }\n  \n  if($job.inputs.rg_sample_id){\n  \tadd_param('SM', $job.inputs.rg_sample_id)\n  }\n  else if('sample_id' in  read_metadata){\n  \tadd_param('SM', read_metadata.sample_id)\n  }\n    \n  return \"-R '@RG\\\\t\" + param_list.join('\\\\t') + \"'\"\n  \n}"
            }
          },
          {
            "separate": true,
            "position": 101,
            "valueFrom": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  /////// Set input reads in the correct order depending of the paired end from metadata\n    \n     // Set output file name\n  if($job.inputs.input_reads[0] instanceof Array){\n    input_reads = $job.inputs.input_reads[0] // scatter mode\n  } else {\n    input_reads = $job.inputs.input_reads = [].concat($job.inputs.input_reads)\n  }\n  \n  \n  //Read metadata for input reads\n  read_metadata = input_reads[0].metadata\n  if(!read_metadata) read_metadata = []\n  \n  order = 0 // Consider this as normal order given at input: pe1 pe2\n  \n  // Check if paired end 1 corresponds to the first given read\n  if(read_metadata == []){ order = 0 }\n  else if('paired_end' in  read_metadata){ \n    pe1 = read_metadata.paired_end\n    if(pe1 != 1) order = 1 // change order\n  }\n\n  // Return reads in the correct order\n  if (input_reads.length == 1){\n    return input_reads[0].path // Only one read present\n  }\n  else if (input_reads.length == 2){\n    if (order == 0) return input_reads[0].path + ' ' + input_reads[1].path\n    else return input_reads[1].path + ' ' + input_reads[0].path\n  }\n\n}"
            }
          },
          {
            "prefix": "-t",
            "separate": true,
            "position": 2,
            "valueFrom": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  \n  /*reads_size = 0 \n\n  GB_1 = 1024*1024*1024\n  if(reads_size < GB_1){ suggested_threads = 1 }\n  else if(reads_size < 10 * GB_1){ suggested_threads = 8 }\n  else { suggested_threads = 31 }\n  */\n  suggested_threads = 8\n  \n  if(!$job.inputs.threads){  \treturn suggested_threads  }  \n  else{    return $job.inputs.threads  }\n}"
            }
          },
          {
            "separate": true,
            "position": 10,
            "valueFrom": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  reference_file = $job.inputs.reference_index_tar.path.split('/')[$job.inputs.reference_index_tar.path.split('/').length-1]\n  name = reference_file.slice(0, -4) // cut .tar extension \n  \n  return name\n  \n}"
            }
          },
          {
            "separate": true,
            "position": 10000,
            "valueFrom": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  cmd = \";declare -i pipe_statuses=(\\\\${PIPESTATUS[*]});len=\\\\${#pipe_statuses[@]};declare -i tot=0;echo \\\\${pipe_statuses[*]};for (( i=0; i<\\\\${len}; i++ ));do if [ \\\\${pipe_statuses[\\\\$i]} -ne 0 ];then tot=\\\\${pipe_statuses[\\\\$i]}; fi;done;if [ \\\\$tot -ne 0 ]; then >&2 echo Error in piping. Pipe statuses: \\\\${pipe_statuses[*]};fi; if [ \\\\$tot -ne 0 ]; then false;fi\\\"\"\n  return cmd\n}"
            }
          }
        ],
        "sbg:toolkit": "BWA",
        "stdin": "",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "djordje_klisic",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1459166596,
            "sbg:revision": 0
          },
          {
            "sbg:modifiedBy": "djordje_klisic",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1459166596,
            "sbg:revision": 1
          },
          {
            "sbg:modifiedBy": "djordje_klisic",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1459166596,
            "sbg:revision": 2
          },
          {
            "sbg:modifiedBy": "djordje_klisic",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1459166596,
            "sbg:revision": 3
          },
          {
            "sbg:modifiedBy": "djordje_klisic",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1459166596,
            "sbg:revision": 4
          },
          {
            "sbg:modifiedBy": "djordje_klisic",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1459166596,
            "sbg:revision": 5
          },
          {
            "sbg:modifiedBy": "djordje_klisic",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1461762512,
            "sbg:revision": 6
          },
          {
            "sbg:modifiedBy": "djordje_klisic",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1461762512,
            "sbg:revision": 7
          },
          {
            "sbg:modifiedBy": "djordje_klisic",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1461762512,
            "sbg:revision": 8
          },
          {
            "sbg:modifiedBy": "djordje_klisic",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1461762512,
            "sbg:revision": 9
          },
          {
            "sbg:modifiedBy": "djordje_klisic",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1462904351,
            "sbg:revision": 10
          },
          {
            "sbg:modifiedBy": "djordje_klisic",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1462904351,
            "sbg:revision": 11
          },
          {
            "sbg:modifiedBy": "djordje_klisic",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1465231737,
            "sbg:revision": 12
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1471952983,
            "sbg:revision": 13
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1471952983,
            "sbg:revision": 14
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1471952983,
            "sbg:revision": 15
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "Change red port type - FIX.",
            "sbg:modifiedOn": 1471952983,
            "sbg:revision": 16
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "port renamed to reference index tar",
            "sbg:modifiedOn": 1471952983,
            "sbg:revision": 17
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "reference_index_tar renamed in other expressions.",
            "sbg:modifiedOn": 1471952983,
            "sbg:revision": 18
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1471952983,
            "sbg:revision": 19
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "SortedBAM is default output type.",
            "sbg:modifiedOn": 1471952983,
            "sbg:revision": 20
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "Fix for single-ended reads.",
            "sbg:modifiedOn": 1471952983,
            "sbg:revision": 21
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "instanceof fix for common filename",
            "sbg:modifiedOn": 1471968887,
            "sbg:revision": 22
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "[]concat(input_reads)",
            "sbg:modifiedOn": 1471968887,
            "sbg:revision": 23
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "SortedBAM default - returned revision.",
            "sbg:modifiedOn": 1471968887,
            "sbg:revision": 24
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "Fix for same common sub-strings.",
            "sbg:modifiedOn": 1471968887,
            "sbg:revision": 25
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "Fix to support single FASTQ input.",
            "sbg:modifiedOn": 1471968887,
            "sbg:revision": 26
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "reads_size for sorter made more robust.",
            "sbg:modifiedOn": 1472135464,
            "sbg:revision": 27
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "FASTQs size use for memory and CPU estimation removed!",
            "sbg:modifiedOn": 1472135979,
            "sbg:revision": 28
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "reads size removed from estimating number of CPUs",
            "sbg:modifiedOn": 1472135979,
            "sbg:revision": 29
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "Added reference_genome metadata field to SAM/BAM.",
            "sbg:modifiedOn": 1473165032,
            "sbg:revision": 30
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "BAM/SAM metadata, reference_genome in the same format as in drop down menu.",
            "sbg:modifiedOn": 1473165032,
            "sbg:revision": 31
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "Added reserved number of threads as an input.",
            "sbg:modifiedOn": 1476440179,
            "sbg:revision": 32
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "added piping command status check",
            "sbg:modifiedOn": 1477931903,
            "sbg:revision": 33
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "BAM index output port removed",
            "sbg:modifiedOn": 1480071816,
            "sbg:revision": 34
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "Support for files with \"HiSeq X Ten\" in platform metadata field",
            "sbg:modifiedOn": 1480071816,
            "sbg:revision": 35
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "fix platform",
            "sbg:modifiedOn": 1480071816,
            "sbg:revision": 36
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "Added RG ID as optional input parameter",
            "sbg:modifiedOn": 1481648042,
            "sbg:revision": 37
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "Description - SortedBAM is default.",
            "sbg:modifiedOn": 1482513070,
            "sbg:revision": 38
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "default threads parameter set to 8",
            "sbg:modifiedOn": 1484824479,
            "sbg:revision": 39
          }
        ],
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerPull": "images.sbgenomics.com/vladimirk/bwa:0.7.13",
            "dockerImageId": ""
          },
          {
            "class": "sbg:CPURequirement",
            "value": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{  \n  // Calculate suggested number of CPUs depending of the input reads size\n  if ($job.inputs.input_reads.constructor == Array){\n    if ($job.inputs.input_reads[1]){\n      reads_size = $job.inputs.input_reads[0].size + $job.inputs.input_reads[1].size\n    } else{\n      reads_size = $job.inputs.input_reads[0].size\n    }\n  }\n  else{\n    reads_size = $job.inputs.input_reads.size\n  }\n  if(!reads_size) { reads_size = 0 }\n\n\n  GB_1 = 1024*1024*1024\n  if(reads_size < GB_1){ suggested_cpus = 1 }\n  else if(reads_size < 10 * GB_1){ suggested_cpus = 8 }\n  else { suggested_cpus = 31 }\n  \n  if($job.inputs.reserved_threads){ return $job.inputs.reserved_threads }\n  else if($job.inputs.threads){ return $job.inputs.threads } \n  else if($job.inputs.sambamba_threads) { return $job.inputs.sambamba_threads }\n  else{    return suggested_cpus  }\n}"
            }
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{  \n\n  // Calculate suggested number of CPUs depending of the input reads size\n  if ($job.inputs.input_reads.constructor == Array){\n    if ($job.inputs.input_reads[1]){\n      reads_size = $job.inputs.input_reads[0].size + $job.inputs.input_reads[1].size\n    } else{\n      reads_size = $job.inputs.input_reads[0].size\n    }\n  }\n  else{\n    reads_size = $job.inputs.input_reads.size\n  }\n  if(!reads_size) { reads_size = 0 }\n \n  GB_1 = 1024*1024*1024\n  if(reads_size < GB_1){ suggested_memory = 4 }\n  else if(reads_size < 10 * GB_1){ suggested_memory = 15 }\n  else { suggested_memory = 58 }\n  \n  if($job.inputs.total_memory){  \t\n    return  $job.inputs.total_memory* 1024  \n  } \n  else if($job.inputs.sort_memory){\n    return  $job.inputs.sort_memory* 1024\n  }\n  else{  \t\n    return suggested_memory * 1024  \n  }\n}"
            }
          }
        ]
      },
      "sbg:y": 251.6320122658413,
      "id": "#BWA_MEM_Bundle"
    },
    {
      "inputs": [
        {
          "id": "#Sambamba_Sort.uncompressed_chunks"
        },
        {
          "id": "#Sambamba_Sort.sort_by_name"
        },
        {
          "id": "#Sambamba_Sort.nthreads"
        },
        {
          "id": "#Sambamba_Sort.natural_sort"
        },
        {
          "id": "#Sambamba_Sort.memory_limit"
        },
        {
          "source": [
            "#BWA_MEM_Bundle.aligned_reads"
          ],
          "id": "#Sambamba_Sort.input"
        },
        {
          "id": "#Sambamba_Sort.filter"
        },
        {
          "id": "#Sambamba_Sort.compression_level"
        }
      ],
      "outputs": [
        {
          "id": "#Sambamba_Sort.sorted"
        }
      ],
      "sbg:x": 688.0000407695775,
      "run": {
        "inputs": [
          {
            "label": "Uncompressed chunks",
            "id": "#uncompressed_chunks",
            "description": "Write sorted chunks as uncompressed BAM (default is writing with compression level 1), that might be faster in some cases but uses more disk space.",
            "sbg:category": "Execution",
            "inputBinding": {
              "prefix": "--uncompressed-chunks",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:altPrefix": "u",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Sort by name",
            "id": "#sort_by_name",
            "description": "Sort by read name instead of coordinate (lexicographical order).",
            "sbg:category": "Execution",
            "inputBinding": {
              "prefix": "--sort-by-name",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:altPrefix": "n",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "8",
            "sbg:altPrefix": "-t",
            "label": "Number of threads",
            "description": "Number of threads to use.",
            "sbg:category": "Execution",
            "inputBinding": {
              "prefix": "--nthreads=",
              "sbg:cmdInclude": true,
              "valueFrom": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  if ($job.inputs.nthreads)\n    return $job.inputs.nthreads\n  else\n    return 8\n}"
              },
              "separate": false
            },
            "id": "#nthreads",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Natural sort",
            "id": "#natural_sort",
            "description": "Sort by read name instead of coordinate (so-called 'natural' sort as in samtools).",
            "sbg:category": "Execution",
            "inputBinding": {
              "prefix": "--natural-sort",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:altPrefix": "N",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "2",
            "sbg:altPrefix": "m",
            "label": "Memory limit [GB]",
            "description": "Approximate total memory limit for all threads in GB.",
            "sbg:category": "Execution",
            "inputBinding": {
              "prefix": "--memory-limit=",
              "sbg:cmdInclude": true,
              "valueFrom": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  if($job.inputs.memory_limit) \n    return $job.inputs.memory_limit + 'GiB'\n  else \n    return '2GiB'\n\n}"
              },
              "separate": false
            },
            "id": "#memory_limit",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Input BAM",
            "description": "BAM file.",
            "sbg:category": "File inputs",
            "sbg:stageInput": "link",
            "sbg:fileTypes": "BAM",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "position": 100,
              "itemSeparator": " "
            },
            "id": "#input",
            "required": true,
            "type": [
              "File"
            ]
          },
          {
            "label": "Filter",
            "id": "#filter",
            "description": "Set custom filter for alignments.",
            "sbg:category": "Basic Options",
            "inputBinding": {
              "prefix": "--filter",
              "sbg:cmdInclude": true,
              "valueFrom": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  if ($job.inputs.filter)\n  {\n  \treturn '\"'.concat($job.inputs.filter, '\"')\n  }\n}"
              },
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:altPrefix": "-F",
            "type": [
              "null",
              "string"
            ]
          },
          {
            "label": "Compression level",
            "id": "#compression_level",
            "description": "Specify compression level (from 0 to 9, works only for BAM output).",
            "sbg:category": "Execution",
            "inputBinding": {
              "prefix": "--compression-level",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:altPrefix": "l",
            "type": [
              "null",
              "int"
            ]
          }
        ],
        "sbg:modifiedBy": "admin",
        "sbg:modifiedOn": 1481308801,
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ]
          }
        ],
        "x": 688.0000407695775,
        "sbg:toolkitVersion": "0.5.9",
        "cwlVersion": "sbg:draft-2",
        "sbg:toolAuthor": "Artem Tarasov",
        "sbg:createdBy": "mladenlSBG",
        "label": "Sambamba Sort",
        "sbg:validationErrors": [],
        "stdout": "",
        "temporaryFailCodes": [],
        "y": 172.6319583599561,
        "sbg:id": "admin/sbg-public-data/sambamba-sort-0-5-9/11",
        "sbg:latestRevision": 11,
        "baseCommand": [
          "/opt/sambamba_0.5.9/sambamba_v0.5.9",
          "sort"
        ],
        "id": "admin/sbg-public-data/sambamba-sort-0-5-9/11",
        "sbg:job": {
          "inputs": {
            "filter": "",
            "uncompressed_chunks": true,
            "nthreads": 0,
            "compression_level": 0,
            "sort_by_name": true,
            "natural_sort": "natural_sort",
            "memory_limit": 4,
            "input": {
              "path": "/root/dir/example.bam"
            }
          },
          "allocatedResources": {
            "cpu": 1,
            "mem": 4096
          }
        },
        "sbg:sbgMaintained": false,
        "outputs": [
          {
            "label": "Sorted BAM",
            "id": "#sorted",
            "description": "Output sorted BAM file.",
            "sbg:fileTypes": "BAM",
            "outputBinding": {
              "glob": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  if ($job.inputs.input)\n  {\n   filename = $job.inputs.input.path\n\n    return filename.split('.').slice(0, -1).concat(\"sorted.bam\").join(\".\").replace(/^.*[\\\\\\/]/, '')\n  }\n}"
              },
              "secondaryFiles": [
                ".bai"
              ],
              "sbg:inheritMetadataFrom": "#input"
            },
            "type": [
              "null",
              "File"
            ]
          }
        ],
        "sbg:links": [
          {
            "label": "Homepage",
            "id": "http://lomereiter.github.io/sambamba/docs/sambamba-sort.html"
          },
          {
            "label": "Source code",
            "id": "https://github.com/lomereiter/sambamba"
          },
          {
            "label": "Wiki",
            "id": "https://github.com/lomereiter/sambamba/wiki"
          },
          {
            "label": "Download",
            "id": "https://github.com/lomereiter/sambamba/releases/tag/v0.5.9"
          },
          {
            "label": "Publication",
            "id": "http://lomereiter.github.io/sambamba/docs/sambamba-sort.html"
          }
        ],
        "sbg:revision": 11,
        "sbg:cmdPreview": "/opt/sambamba_0.5.9/sambamba_v0.5.9 sort --out=example.sorted.bam  /root/dir/example.bam",
        "description": "Sambamba Sort does an external sort on the input file. It reads the source BAM file in chunks that fit into its memory, sorts them, writes them to a temporary directory, and then merges them. After merging, the temporary files are automatically removed. The sort is stable, and efforts have been made to make it multithreaded.\n\nBAM files have either 'coordinate' or 'qname' sort order. The former sorts the file by (integer) reference ID. and sorts corresponding reads by its start coordinate. The latter sorts reads lexicographically by their names.\n\nSambamba Sort supports both sorting orders. The default sort order is 'coordinate,' because this is the one used for building index later. In order to switch to 'qname' sorting order, use the -n|--sort-by-name flag.",
        "sbg:projectName": "SBG Public data",
        "class": "CommandLineTool",
        "sbg:image_url": null,
        "sbg:createdOn": 1447773761,
        "sbg:contributors": [
          "djordje_klisic",
          "admin",
          "mladenlSBG"
        ],
        "sbg:revisionNotes": "Corrected error from last modification",
        "sbg:project": "admin/sbg-public-data",
        "sbg:categories": [
          "SAM/BAM-Processing"
        ],
        "successCodes": [],
        "sbg:license": "GNU General Public License v2.0 only",
        "arguments": [
          {
            "prefix": "--out=",
            "separate": false,
            "position": 3,
            "valueFrom": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  if ($job.inputs.input)\n  {\n    file = [].concat($job.inputs.input)\n    filename = file[0].path\n\n    return filename.split('.').slice(0, -1).concat(\"sorted.bam\").join(\".\").replace(/^.*[\\\\\\/]/, '')\n  }\n}"
            }
          }
        ],
        "sbg:toolkit": "Sambamba",
        "stdin": "",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "mladenlSBG",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1447773761,
            "sbg:revision": 0
          },
          {
            "sbg:modifiedBy": "mladenlSBG",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1448360694,
            "sbg:revision": 1
          },
          {
            "sbg:modifiedBy": "djordje_klisic",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1457686532,
            "sbg:revision": 2
          },
          {
            "sbg:modifiedBy": "djordje_klisic",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1457686532,
            "sbg:revision": 3
          },
          {
            "sbg:modifiedBy": "djordje_klisic",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1464422199,
            "sbg:revision": 4
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1471953007,
            "sbg:revision": 5
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "Changed Memory(MB) requirements.",
            "sbg:modifiedOn": 1471953007,
            "sbg:revision": 6
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1471953007,
            "sbg:revision": 7
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "Edited GiB input",
            "sbg:modifiedOn": 1476440182,
            "sbg:revision": 8
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "Edited glob",
            "sbg:modifiedOn": 1479155661,
            "sbg:revision": 9
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "Guard for output file name was missing",
            "sbg:modifiedOn": 1481308801,
            "sbg:revision": 10
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "Corrected error from last modification",
            "sbg:modifiedOn": 1481308801,
            "sbg:revision": 11
          }
        ],
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerPull": "images.sbgenomics.com/mladenlsbg/sambamba:0.5.9",
            "dockerImageId": "59e577b13d5d"
          },
          {
            "class": "sbg:CPURequirement",
            "value": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\nif($job.inputs.nthreads) {return $job.inputs.nthreads}\nelse {return 1}\n}"
            }
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  if($job.inputs.memory_limit) return $job.inputs.memory_limit*1024\n  else return 2048\n}"
            }
          }
        ]
      },
      "sbg:y": 172.6319583599561,
      "id": "#Sambamba_Sort"
    },
    {
      "inputs": [
        {
          "id": "#GATK_HaplotypeCaller.write_to_bam"
        },
        {
          "id": "#GATK_HaplotypeCaller.variant_index_type"
        },
        {
          "id": "#GATK_HaplotypeCaller.variant_index_parameter"
        },
        {
          "id": "#GATK_HaplotypeCaller.validation_strictness"
        },
        {
          "id": "#GATK_HaplotypeCaller.use_original_qualities"
        },
        {
          "id": "#GATK_HaplotypeCaller.use_filtered_reads"
        },
        {
          "id": "#GATK_HaplotypeCaller.use_allele_trigger"
        },
        {
          "id": "#GATK_HaplotypeCaller.unsafe"
        },
        {
          "id": "#GATK_HaplotypeCaller.threads_per_job"
        },
        {
          "id": "#GATK_HaplotypeCaller.tag"
        },
        {
          "id": "#GATK_HaplotypeCaller.standard_min_confidence_threshold_for_emitting"
        },
        {
          "id": "#GATK_HaplotypeCaller.standard_min_confidence_threshold_for_calling"
        },
        {
          "id": "#GATK_HaplotypeCaller.sites_only"
        },
        {
          "id": "#GATK_HaplotypeCaller.simplify_bam"
        },
        {
          "id": "#GATK_HaplotypeCaller.show_bam_list"
        },
        {
          "id": "#GATK_HaplotypeCaller.sample_rename_mapping_file"
        },
        {
          "id": "#GATK_HaplotypeCaller.sample_ploidy"
        },
        {
          "id": "#GATK_HaplotypeCaller.sample_name"
        },
        {
          "id": "#GATK_HaplotypeCaller.remove_program_records"
        },
        {
          "source": [
            "#SBG_FASTA_Indices.fasta_reference"
          ],
          "id": "#GATK_HaplotypeCaller.reference"
        },
        {
          "id": "#GATK_HaplotypeCaller.refactor_NDN_cigar_string"
        },
        {
          "source": [
            "#Sambamba_Index.indexed_bam"
          ],
          "id": "#GATK_HaplotypeCaller.reads"
        },
        {
          "id": "#GATK_HaplotypeCaller.read_group_black_list"
        },
        {
          "id": "#GATK_HaplotypeCaller.read_filter"
        },
        {
          "id": "#GATK_HaplotypeCaller.quantize_quals"
        },
        {
          "id": "#GATK_HaplotypeCaller.prob_threshold"
        },
        {
          "id": "#GATK_HaplotypeCaller.preserve_qscores_less_than"
        },
        {
          "id": "#GATK_HaplotypeCaller.phone_home"
        },
        {
          "id": "#GATK_HaplotypeCaller.performance_log"
        },
        {
          "id": "#GATK_HaplotypeCaller.pedigree_validation_type"
        },
        {
          "id": "#GATK_HaplotypeCaller.pedigree_string"
        },
        {
          "id": "#GATK_HaplotypeCaller.pedigree"
        },
        {
          "id": "#GATK_HaplotypeCaller.pcr_indel_model"
        },
        {
          "id": "#GATK_HaplotypeCaller.output_raw_activity"
        },
        {
          "id": "#GATK_HaplotypeCaller.out_mode"
        },
        {
          "id": "#GATK_HaplotypeCaller.num_bam_file_handles"
        },
        {
          "id": "#GATK_HaplotypeCaller.non_deterministic_random_seed"
        },
        {
          "id": "#GATK_HaplotypeCaller.no_soft_clipped"
        },
        {
          "id": "#GATK_HaplotypeCaller.no_active_region_trim"
        },
        {
          "id": "#GATK_HaplotypeCaller.never_trim_vcf_format_field"
        },
        {
          "id": "#GATK_HaplotypeCaller.monitor_thread_efficiency"
        },
        {
          "id": "#GATK_HaplotypeCaller.mismapping_rate"
        },
        {
          "id": "#GATK_HaplotypeCaller.min_reads_per_algn"
        },
        {
          "id": "#GATK_HaplotypeCaller.min_pruning_threshold"
        },
        {
          "id": "#GATK_HaplotypeCaller.min_length"
        },
        {
          "id": "#GATK_HaplotypeCaller.min_graph_pruning"
        },
        {
          "id": "#GATK_HaplotypeCaller.min_base_q_scores"
        },
        {
          "id": "#GATK_HaplotypeCaller.memory_per_job"
        },
        {
          "id": "#GATK_HaplotypeCaller.memory_overhead_per_job"
        },
        {
          "id": "#GATK_HaplotypeCaller.max_runtime_units"
        },
        {
          "id": "#GATK_HaplotypeCaller.max_runtime"
        },
        {
          "id": "#GATK_HaplotypeCaller.max_reads_active_reg"
        },
        {
          "id": "#GATK_HaplotypeCaller.max_haplotypes"
        },
        {
          "id": "#GATK_HaplotypeCaller.max_alternate_alleles"
        },
        {
          "id": "#GATK_HaplotypeCaller.max_active_region_size"
        },
        {
          "id": "#GATK_HaplotypeCaller.kmer_size"
        },
        {
          "id": "#GATK_HaplotypeCaller.keep_program_records"
        },
        {
          "id": "#GATK_HaplotypeCaller.intervals_string"
        },
        {
          "id": "#GATK_HaplotypeCaller.intervals_file"
        },
        {
          "id": "#GATK_HaplotypeCaller.interval_set_rule"
        },
        {
          "id": "#GATK_HaplotypeCaller.interval_padding"
        },
        {
          "id": "#GATK_HaplotypeCaller.interval_merging"
        },
        {
          "id": "#GATK_HaplotypeCaller.input_prior"
        },
        {
          "id": "#GATK_HaplotypeCaller.indel_size"
        },
        {
          "id": "#GATK_HaplotypeCaller.indel_heterozygosity"
        },
        {
          "id": "#GATK_HaplotypeCaller.include_interval_name_in_output_name"
        },
        {
          "id": "#GATK_HaplotypeCaller.heterozygosity"
        },
        {
          "id": "#GATK_HaplotypeCaller.graph_file"
        },
        {
          "id": "#GATK_HaplotypeCaller.gq_threshold"
        },
        {
          "id": "#GATK_HaplotypeCaller.global_q_score_prior"
        },
        {
          "id": "#GATK_HaplotypeCaller.genotyping_mode",
          "default": "DISCOVERY"
        },
        {
          "id": "#GATK_HaplotypeCaller.generate_md5"
        },
        {
          "id": "#GATK_HaplotypeCaller.gatk_key"
        },
        {
          "id": "#GATK_HaplotypeCaller.gap_penalty"
        },
        {
          "id": "#GATK_HaplotypeCaller.force_active"
        },
        {
          "id": "#GATK_HaplotypeCaller.fix_misencoded_quals"
        },
        {
          "id": "#GATK_HaplotypeCaller.exclude_intervals"
        },
        {
          "id": "#GATK_HaplotypeCaller.exclude_ann"
        },
        {
          "id": "#GATK_HaplotypeCaller.emit_ref_confidence"
        },
        {
          "id": "#GATK_HaplotypeCaller.emit_original_quals"
        },
        {
          "id": "#GATK_HaplotypeCaller.downsampling_type"
        },
        {
          "id": "#GATK_HaplotypeCaller.downsample_to_fraction"
        },
        {
          "id": "#GATK_HaplotypeCaller.downsample_to_coverage"
        },
        {
          "id": "#GATK_HaplotypeCaller.dont_increase_kmers"
        },
        {
          "id": "#GATK_HaplotypeCaller.disable_read_filter"
        },
        {
          "id": "#GATK_HaplotypeCaller.disable_phasing"
        },
        {
          "id": "#GATK_HaplotypeCaller.disable_opt"
        },
        {
          "id": "#GATK_HaplotypeCaller.disable_indel_quals"
        },
        {
          "id": "#GATK_HaplotypeCaller.disable_bam_indexing"
        },
        {
          "id": "#GATK_HaplotypeCaller.disable_auto_index"
        },
        {
          "id": "#GATK_HaplotypeCaller.default_base_qualities"
        },
        {
          "id": "#GATK_HaplotypeCaller.debug"
        },
        {
          "id": "#GATK_HaplotypeCaller.db_snp"
        },
        {
          "id": "#GATK_HaplotypeCaller.cpu_per_job"
        },
        {
          "id": "#GATK_HaplotypeCaller.contamination_fraction"
        },
        {
          "id": "#GATK_HaplotypeCaller.contamination_file"
        },
        {
          "id": "#GATK_HaplotypeCaller.consensus_mode"
        },
        {
          "id": "#GATK_HaplotypeCaller.comp_vcf"
        },
        {
          "id": "#GATK_HaplotypeCaller.bqsr"
        },
        {
          "id": "#GATK_HaplotypeCaller.baq_gap_open_penalty"
        },
        {
          "id": "#GATK_HaplotypeCaller.baq"
        },
        {
          "id": "#GATK_HaplotypeCaller.band_pass"
        },
        {
          "id": "#GATK_HaplotypeCaller.bamout"
        },
        {
          "id": "#GATK_HaplotypeCaller.bam_out"
        },
        {
          "id": "#GATK_HaplotypeCaller.bam_compression"
        },
        {
          "id": "#GATK_HaplotypeCaller.annotation_groups"
        },
        {
          "id": "#GATK_HaplotypeCaller.annotation"
        },
        {
          "id": "#GATK_HaplotypeCaller.annotate_nda"
        },
        {
          "id": "#GATK_HaplotypeCaller.annotate_all_sites_PLs"
        },
        {
          "id": "#GATK_HaplotypeCaller.allow_potentailly_misencoded_quals"
        },
        {
          "id": "#GATK_HaplotypeCaller.allow_non_unique_kmers"
        },
        {
          "id": "#GATK_HaplotypeCaller.alleles"
        },
        {
          "id": "#GATK_HaplotypeCaller.all_sites"
        },
        {
          "id": "#GATK_HaplotypeCaller.active_region_list"
        },
        {
          "id": "#GATK_HaplotypeCaller.active_reg_output_file_name"
        },
        {
          "id": "#GATK_HaplotypeCaller.active_reg_ext"
        }
      ],
      "outputs": [
        {
          "id": "#GATK_HaplotypeCaller.vcf_output"
        },
        {
          "id": "#GATK_HaplotypeCaller.bam_output"
        }
      ],
      "sbg:x": 1099.0000316351654,
      "run": {
        "inputs": [
          {
            "label": "Write haplotypes to BAM",
            "id": "#write_to_bam",
            "description": "Which haplotypes should be written to the BAM (ALL_POSSIBLE_HAPLOTYPES|CALLED_HAPLOTYPES)",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "prefix": "--bamWriterType",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:altPrefix": "-bamWriterType",
            "type": [
              "null",
              {
                "symbols": [
                  "ALL_POSSIBLE_HAPLOTYPES",
                  "CALLED_HAPLOTYPES"
                ],
                "name": "write_to_bam",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "sbg:altPrefix": "-variant_index_type",
            "label": "Variant index type",
            "description": "Type of IndexCreator to use for VCF/BCF indices.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--variant_index_type",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#variant_index_type",
            "type": [
              "null",
              {
                "symbols": [
                  "DYNAMIC_SEEK",
                  "DYNAMIC_SIZE",
                  "LINEAR",
                  "INTERVAL"
                ],
                "name": "variant_index_type",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "-1",
            "sbg:altPrefix": "-variant_index_parameter",
            "label": "Variant index parameter",
            "description": "Parameter to pass to the VCF/BCF IndexCreator.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--variant_index_parameter",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#variant_index_parameter",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "SILENT",
            "sbg:altPrefix": "-S",
            "label": "Validation Strictness",
            "description": "How strict should we be with validation.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--validation_strictness",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#validation_strictness",
            "type": [
              "null",
              {
                "symbols": [
                  "SILENT",
                  "LENIENT",
                  "STRICT"
                ],
                "name": "validation_strictness",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "sbg:altPrefix": "-OQ",
            "label": "Use Original Qualities",
            "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--useOriginalQualities",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#use_original_qualities",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Use filtered reads",
            "id": "#use_filtered_reads",
            "description": "Use the contamination-filtered read maps for the purposes of annotating variants",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "prefix": "--useFilteredReadsForAnnotations",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:altPrefix": "-useFilteredReadsForAnnotations",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Use alleles trigger",
            "id": "#use_allele_trigger",
            "description": "Use additional trigger on variants found in an external alleles file",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "prefix": "--useAllelesTrigger",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:altPrefix": "-allelesTrigger",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "sbg:altPrefix": "-U",
            "label": "Unsafe",
            "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--unsafe",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#unsafe",
            "type": [
              "null",
              {
                "symbols": [
                  "ALLOW_N_CIGAR_READS",
                  "ALLOW_UNINDEXED_BAM",
                  "ALLOW_UNSET_BAM_SORT_ORDER",
                  "NO_READ_ORDER_VERIFICATION",
                  "ALLOW_SEQ_DICT_INCOMPATIBILITY",
                  "LENIENT_VCF_PROCESSING",
                  "ALL"
                ],
                "name": "unsafe",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "0",
            "label": "Threads per job (nct)",
            "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used. Set to 0 for auto-detect (use with caution,as auto-detect will find the optimal value in most cases).",
            "sbg:category": "Execution",
            "inputBinding": {
              "prefix": "-nct",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#threads_per_job",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "sbg:altPrefix": "-tag",
            "label": "Tag",
            "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--tag",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#tag",
            "type": [
              "null",
              "string"
            ]
          },
          {
            "sbg:toolDefaultValue": "30.0",
            "sbg:altPrefix": "-stand_emit_conf",
            "label": "Standard emit confidence",
            "description": "The minimum phred-scaled confidence threshold at which variants should be emitted (and filtered with LowQual if less than the calling threshold). The minimum phred-scaled Qscore threshold to separate high confidence from low confidence calls. Only genotypes with confidence >= this threshold are emitted as called sites. A reasonable threshold is 30 for high-pass calling (this is the default).",
            "sbg:category": "Genotype GVCFs",
            "inputBinding": {
              "prefix": "--standard_min_confidence_threshold_for_emitting",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#standard_min_confidence_threshold_for_emitting",
            "type": [
              "null",
              "float"
            ]
          },
          {
            "sbg:toolDefaultValue": "30.0",
            "sbg:altPrefix": "-stand_call_conf",
            "label": "Standard call confidence",
            "description": "The minimum phred-scaled confidence threshold at which variants should be called. The minimum phred-scaled Qscore threshold to separate high confidence from low confidence calls. Only genotypes with confidence >= this threshold are emitted as called sites. A reasonable threshold is 30 for high-pass calling (this is the default).",
            "sbg:category": "Genotype GVCFs",
            "inputBinding": {
              "prefix": "--standard_min_confidence_threshold_for_calling",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#standard_min_confidence_threshold_for_calling",
            "type": [
              "null",
              "float"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "sbg:altPrefix": "-sites_only",
            "label": "Siteslo only",
            "description": "Just output sites without genotypes (i.e. only the first 8 columns of the VCF).",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--sites_only",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#sites_only",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "sbg:altPrefix": "-simplifyBAM",
            "label": "Simplify bam",
            "description": "If provided, output BAM files will be simplified to include just key reads for downstream variation discovery analyses (removing duplicates, PF-, non-primary reads), as well stripping all extended tags from the kept reads except the read group identifier.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--simplifyBAM",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#simplify_bam",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "sbg:altPrefix": "",
            "label": "BAM list log entry",
            "description": "Emit a log entry (level INFO) containing the full list of sequence data files to be includedin the analysis (including files inside .bam.list files).",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--showFullBamList",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#show_bam_list",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "sbg:altPrefix": "-sample_rename_mapping_file",
            "label": "Sample rename mapping file",
            "description": "Rename sample IDs on-the-fly at runtime using the provided mapping file.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--sample_rename_mapping_file",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#sample_rename_mapping_file",
            "type": [
              "null",
              "string"
            ]
          },
          {
            "sbg:toolDefaultValue": "2",
            "sbg:altPrefix": "-ploidy",
            "label": "Sample Ploidy",
            "description": "Plody (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy).",
            "sbg:category": "Genotype GVCFs",
            "inputBinding": {
              "prefix": "--sample_ploidy",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#sample_ploidy",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Sample name",
            "id": "#sample_name",
            "description": "Name of single sample to use from a multi-sample bam",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "prefix": "--sample_name",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:altPrefix": "-sn",
            "type": [
              "null",
              "string"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "sbg:altPrefix": "-rpr",
            "label": "Remove Program Records",
            "description": "Should we override the Walker's default and remove program records from the SAM header.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--remove_program_records",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#remove_program_records",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:altPrefix": "-R",
            "label": "Reference Genome",
            "description": "Reference Genome in FASTA format.",
            "sbg:category": "Input Files",
            "sbg:fileTypes": "FASTA, FA",
            "inputBinding": {
              "secondaryFiles": [
                ".fai",
                "^.dict"
              ],
              "sbg:cmdInclude": true,
              "prefix": "--reference_sequence",
              "itemSeparator": " ",
              "separate": true
            },
            "id": "#reference",
            "required": true,
            "type": [
              "File"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "sbg:altPrefix": "-fixNDN",
            "label": "Refactor ndn cigar string",
            "description": "Refactor cigar string with NDN elements to one element.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--refactor_NDN_cigar_string",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#refactor_NDN_cigar_string",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:altPrefix": "-I",
            "label": "Input BAM/CRAM files",
            "description": "Input BAM or CRAM files",
            "sbg:category": "Input file(s) containing sequence data",
            "sbg:fileTypes": "BAM, CRAM",
            "inputBinding": {
              "secondaryFiles": [
                ".bai"
              ],
              "sbg:cmdInclude": true,
              "prefix": "--input_file",
              "itemSeparator": null,
              "separate": true
            },
            "id": "#reads",
            "required": true,
            "type": [
              {
                "items": "File",
                "name": "reads",
                "type": "array"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "[]",
            "sbg:altPrefix": "-rgbl",
            "label": "Read Group Black List",
            "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--read_group_black_list",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#read_group_black_list",
            "type": [
              "null",
              {
                "items": "string",
                "type": "array"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "[]",
            "sbg:altPrefix": "-rf",
            "label": "Read Filter",
            "description": "Specify filtration criteria to apply to each read individually.",
            "sbg:category": "GATK General",
            "sbg:stageInput": null,
            "inputBinding": {
              "prefix": "--read_filter",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#read_filter",
            "type": [
              "null",
              {
                "items": "string",
                "name": "read_filter",
                "type": "array"
              }
            ]
          },
          {
            "label": "Quantize BQ Scores",
            "id": "#quantize_quals",
            "description": "Quantize quality scores to a given number of levels (with -BQSR).",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--quantize_quals",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "sbg:altPrefix": "-qq",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Active probability threshold",
            "id": "#prob_threshold",
            "description": "Threshold for the probability of a profile state being active.",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "prefix": "--activeProbabilityThreshold",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:altPrefix": "-ActProbThresh",
            "type": [
              "null",
              "float"
            ]
          },
          {
            "sbg:toolDefaultValue": "6",
            "sbg:altPrefix": "-preserveQ",
            "label": "Preserve Qscores Less Than",
            "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR).",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--preserve_qscores_less_than",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#preserve_qscores_less_than",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "AWS",
            "sbg:altPrefix": "-et",
            "label": "Phone Home",
            "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--phone_home",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#phone_home",
            "type": [
              "null",
              {
                "symbols": [
                  "NO_ET",
                  "AWS",
                  "STDOUT"
                ],
                "name": "phone_home",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "sbg:altPrefix": "-PF",
            "label": "Runtime performance log",
            "description": "Write GATK runtime performance long. Specify the file name of this log.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--performanceLog",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#performance_log",
            "type": [
              "null",
              "string"
            ]
          },
          {
            "sbg:toolDefaultValue": "STRICT",
            "sbg:altPrefix": "-pedValidationType",
            "label": "Pedigree Validation Type",
            "description": "How strict should we be in validating the pedigree information?.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--pedigreeValidationType",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#pedigree_validation_type",
            "type": [
              "null",
              {
                "symbols": [
                  "STRICT",
                  "SILENT"
                ],
                "name": "pedigree_validation_type",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "[]",
            "sbg:altPrefix": "-pedString",
            "label": "Pedigree String",
            "description": "Pedigree string for samples.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--pedigreeString",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#pedigree_string",
            "type": [
              "null",
              {
                "items": "string",
                "type": "array"
              }
            ]
          },
          {
            "sbg:altPrefix": "-ped",
            "label": "Pedigree",
            "description": "Pedigree files for samples.",
            "sbg:category": "Input Files",
            "sbg:fileTypes": "PED, TXT",
            "inputBinding": {
              "prefix": "--pedigree",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#pedigree",
            "required": false,
            "type": [
              "null",
              {
                "items": "File",
                "name": "pedigree",
                "type": "array"
              }
            ]
          },
          {
            "label": "PCR indel model",
            "id": "#pcr_indel_model",
            "description": "The PCR indel model to use (NONE|HOSTILE|AGGRESSIVE|CONSERVATIVE)",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "prefix": "--pcr_indel_model",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:altPrefix": "-pcrModel",
            "type": [
              "null",
              {
                "symbols": [
                  "NONE",
                  "HOSTILE",
                  "AGGRESSIVE",
                  "CONSERVATIVE"
                ],
                "name": "pcr_indel_model",
                "type": "enum"
              }
            ]
          },
          {
            "label": "Raw activity profile output",
            "id": "#output_raw_activity",
            "description": "Output the raw activity profile results in IGV format",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "prefix": "--activityProfileOut",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:altPrefix": "-APO",
            "type": [
              "null",
              "string"
            ]
          },
          {
            "label": "Out mode",
            "id": "#out_mode",
            "description": "Specifies which type of calls we should output (EMIT_VARIANTS_ONLY|EMIT_ALL_CONFIDENT_SITES|EMIT_ALL_SITES)",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "prefix": "--output_mode",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:altPrefix": "-out_mode",
            "type": [
              "null",
              {
                "symbols": [
                  "EMIT_VARIANTS_ONLY",
                  "EMIT_ALL_CONFIDENT_SITES",
                  "EMIT_ALL_SITES"
                ],
                "name": "out_mode",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "sbg:altPrefix": "-bfh",
            "label": "Num bam file handles",
            "description": "Total number of BAM file handles to keep open simultaneously.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--num_bam_file_handles",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#num_bam_file_handles",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "sbg:altPrefix": "-ndrs",
            "label": "Non Deterministic Random Seed",
            "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--nonDeterministicRandomSeed",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#non_deterministic_random_seed",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Dont use softclipeed bases",
            "id": "#no_soft_clipped",
            "description": "Do not analyze soft clipped bases in the reads",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "prefix": "--dontUseSoftClippedBases",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:altPrefix": "-dontUseSoftClippedBases",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Don't trim active regions",
            "id": "#no_active_region_trim",
            "description": "If specified, we will not trim down the active region from the full region (active + extension) to just the active interval for genotyping",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "prefix": "--dontTrimActiveRegions",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:altPrefix": "-dontTrimActiveRegions",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "sbg:altPrefix": "-writeFullFormat",
            "label": "Never trim vcf format field",
            "description": "Always output all the records in VCF FORMAT fields, even if some are missing.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--never_trim_vcf_format_field",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#never_trim_vcf_format_field",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "sbg:altPrefix": "-mte",
            "label": "Monitor thread efficiency",
            "description": "Enable threading efficiency monitoring.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--monitorThreadEfficiency",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#monitor_thread_efficiency",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Phred mismapping rate",
            "id": "#mismapping_rate",
            "description": "The global assumed mismapping rate for reads",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "prefix": "--phredScaledGlobalReadMismappingRate",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:altPrefix": "-globalMAPQ",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Minimum reads per aligment",
            "id": "#min_reads_per_algn",
            "description": "Minimum number of reads sharing the same alignment start for each genomic location in an active region",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "prefix": "--minReadsPerAlignmentStart",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:altPrefix": "-minReadsPerAlignStart",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Minimum pruning threshold",
            "id": "#min_pruning_threshold",
            "description": "Number of samples that must pass the minPruning threshold",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "prefix": "--numPruningSamples",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:altPrefix": "-numPruningSamples",
            "type": [
              "null",
              "string"
            ]
          },
          {
            "label": "Minimum dangling branch length",
            "id": "#min_length",
            "description": "Minimum length of a dangling branch to attempt recovery",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "prefix": "--minDanglingBranchLength",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:altPrefix": "-minDanglingBranchLength",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Minimum graph pruning",
            "id": "#min_graph_pruning",
            "description": "Minimum support to not prune paths in the graph",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "prefix": "--minPruning",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:altPrefix": "-minPruning",
            "type": [
              "null",
              "string"
            ]
          },
          {
            "label": "Minimum base quality scores",
            "id": "#min_base_q_scores",
            "description": "Minimum base quality required to consider a base for calling",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "prefix": "--min_base_quality_score",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:altPrefix": "-mbq",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "2048",
            "label": "Memory per job",
            "description": "Amount of RAM memory to be used per job. Defaults to 2048MB for Single threaded jobs,and all of the available memory on the instance for multi-threaded jobs. .",
            "sbg:category": "Execution",
            "id": "#memory_per_job",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "0",
            "label": "Memory overhead per job",
            "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
            "sbg:category": "Execution",
            "id": "#memory_overhead_per_job",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "MINUTES",
            "sbg:altPrefix": "-maxRuntimeUnits",
            "label": "Max Runtime Units",
            "description": "The TimeUnit for maxRuntime.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--maxRuntimeUnits",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#max_runtime_units",
            "type": [
              "null",
              {
                "symbols": [
                  "NANOSECONDS",
                  "MICROSECONDS",
                  "MILLISECONDS",
                  "SECONDS",
                  "MINUTES",
                  "HOURS",
                  "DAYS"
                ],
                "name": "max_runtime_units",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "-1",
            "sbg:altPrefix": "maxRuntime",
            "label": "Max Runtime",
            "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--maxRuntime",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#max_runtime",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Maximum reads in active region",
            "id": "#max_reads_active_reg",
            "description": "Maximum reads in an active region",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "prefix": "--maxReadsInRegionPerSample",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:altPrefix": "-maxReadsInRegionPerSample",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Maximum number of haplotypes",
            "id": "#max_haplotypes",
            "description": "Maximum number of haplotypes to consider for your population",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "prefix": "--maxNumHaplotypesInPopulation",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:altPrefix": "-maxNumHaplotypesInPopulation",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "6",
            "sbg:altPrefix": "-maxAltAlleles",
            "label": "Max Alternate Alleles",
            "description": "Maximum number of alternate alleles to genotype.",
            "sbg:category": "Genotype GVCFs",
            "inputBinding": {
              "prefix": "--max_alternate_alleles",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#max_alternate_alleles",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Maximum size of active region",
            "id": "#max_active_region_size",
            "description": "The active region maximum size; if not provided defaults to Walker annotated default",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "prefix": "--activeRegionMaxSize",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:altPrefix": "-activeRegionMaxSize",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "K-mer size",
            "id": "#kmer_size",
            "description": "Kmer size to use in the read threading assembler",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "prefix": "--kmerSize",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:altPrefix": "-kmerSize",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "sbg:altPrefix": "-kpr",
            "label": "Keep Program Records",
            "description": "Should we override the Walker's default and keep program records from the SAM header.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--keep_program_records",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#keep_program_records",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "sbg:altPrefix": "-L",
            "label": "Intervals",
            "description": "One or more genomic intervals over which to operate.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--intervals",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#intervals_string",
            "type": [
              "null",
              "string"
            ]
          },
          {
            "sbg:altPrefix": "-L",
            "label": "Intervals",
            "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file.",
            "sbg:category": "Input Files",
            "sbg:stageInput": "link",
            "sbg:fileTypes": "TXT, BED, VCF",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "valueFrom": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  if($job.inputs.intervals_file){\n    if($job.inputs.intervals_file instanceof Array){\n      if($job.inputs.intervals_file.length > 1){\n        if([].concat($job.inputs.reads)[0].metadata)\n          if([].concat($job.inputs.reads)[0].metadata.intervals_file)\n            return '--intervals ' + [].concat($job.inputs.reads)[0].metadata.intervals_file\n      } else return '--intervals ' + [].concat($job.inputs.intervals_file)[0].path\n    } else return '--intervals ' + [].concat($job.inputs.intervals_file)[0].path\n  } else\n    return ''\n}"
              },
              "itemSeparator": null
            },
            "id": "#intervals_file",
            "required": false,
            "type": [
              "null",
              {
                "items": "File",
                "name": "intervals_file",
                "type": "array"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "UNION",
            "sbg:altPrefix": "-isr",
            "label": "Interval Set Rule",
            "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--interval_set_rule",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#interval_set_rule",
            "type": [
              "null",
              {
                "symbols": [
                  "UNION",
                  "INTERSECTION"
                ],
                "name": "interval_set_rule",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "0",
            "sbg:altPrefix": "-ip",
            "label": "Interval Padding",
            "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--interval_padding",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#interval_padding",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "ALL",
            "sbg:altPrefix": "-im",
            "label": "Interval Merging",
            "description": "Indicates the interval merging rule we should use for abutting intervals.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--interval_merging",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#interval_merging",
            "type": [
              "null",
              {
                "symbols": [
                  "ALL",
                  "OVERLAPPING_ONLY"
                ],
                "name": "interval_merging",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "sbg:altPrefix": "-inputPrior",
            "label": "Input prior",
            "description": "Input prior for calls.",
            "sbg:category": "Genotype GVCFs",
            "inputBinding": {
              "prefix": "--input_prior",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#input_prior",
            "type": [
              "null",
              "float"
            ]
          },
          {
            "label": "Indel size",
            "id": "#indel_size",
            "description": "The size of an indel to check for in the reference model",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "prefix": "--indelSizeToEliminateInRefModel",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:altPrefix": "-ERCIS",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "0.000125",
            "sbg:altPrefix": "-indelHeterozygosity",
            "label": "Indel Heterozygosity",
            "description": "Heterozygosity for indel calling.",
            "sbg:category": "Genotype GVCFs",
            "inputBinding": {
              "prefix": "--indel_heterozygosity",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#indel_heterozygosity",
            "type": [
              "null",
              "float"
            ]
          },
          {
            "sbg:toolDefaultValue": "false",
            "label": "Include interval name",
            "description": "Include interval name in output file name.",
            "sbg:stageInput": null,
            "id": "#include_interval_name_in_output_name",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "0.001",
            "sbg:altPrefix": "-hets",
            "label": "Heterozygosity",
            "description": "Heterozygosity value used to compute prior likelihoods for any locus.",
            "sbg:category": "Genotype GVCFs",
            "inputBinding": {
              "prefix": "--heterozygosity",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#heterozygosity",
            "type": [
              "null",
              "float"
            ]
          },
          {
            "label": "Graph file output",
            "id": "#graph_file",
            "description": "Write debug assembly graph information to this file",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "prefix": "--graphOutput",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:altPrefix": "-graph",
            "type": [
              "null",
              "string"
            ]
          },
          {
            "label": "GQ threshold",
            "id": "#gq_threshold",
            "description": "GQ thresholds for reference confidence bands",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "prefix": "--GVCFGQBands",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "sbg:altPrefix": "-GQB",
            "type": [
              "null",
              {
                "items": "int",
                "name": "gq_threshold",
                "type": "array"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "-1.0",
            "sbg:altPrefix": "-globalQScorePrior",
            "label": "Global q score prior",
            "description": "Global Qscore Bayesian prior to use for BQSR.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--globalQScorePrior",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#global_q_score_prior",
            "type": [
              "null",
              "float"
            ]
          },
          {
            "label": "Genotyping mode",
            "id": "#genotyping_mode",
            "description": "Specifies how to determine the alternate alleles to use for genotyping (DISCOVERY|GENOTYPE_GIVEN_ALLELES)",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "prefix": "--genotyping_mode",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:altPrefix": "-gt_mode",
            "type": [
              "null",
              {
                "symbols": [
                  "DISCOVERY",
                  "GENOTYPE_GIVEN_ALLELES"
                ],
                "name": "genotyping_mode",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "sbg:altPrefix": "",
            "label": "Generate MD5",
            "description": "Enable on-the-fly creation of md5s for output BAM files.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--generate_md5",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#generate_md5",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:altPrefix": "-K",
            "label": "Gatk key",
            "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
            "sbg:category": "Input Files",
            "sbg:fileTypes": "KEY, LICENSE",
            "inputBinding": {
              "prefix": "--gatk_key",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#gatk_key",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          },
          {
            "label": "Gap continuation penalty",
            "id": "#gap_penalty",
            "description": "Flat gap continuation penalty for use in the Pair HMM",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "prefix": "--gcpHMM",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:altPrefix": "-gcpHMM",
            "type": [
              "null",
              "float"
            ]
          },
          {
            "label": "Force active bases",
            "id": "#force_active",
            "description": "If provided, all bases will be tagged as active",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "prefix": "--forceActive",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:altPrefix": "-forceActive",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "sbg:altPrefix": "-fixMisencodedQuals",
            "label": "Fix Misencoded Quals",
            "description": "Fix mis-encoded base quality scores.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--fix_misencoded_quality_scores",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#fix_misencoded_quals",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:altPrefix": "-XL",
            "label": "Exclude Intervals",
            "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file.",
            "sbg:category": "Input Files",
            "sbg:fileTypes": "TXT, BED, VCF",
            "inputBinding": {
              "prefix": "--excludeIntervals",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#exclude_intervals",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          },
          {
            "label": "Exclude annotation",
            "id": "#exclude_ann",
            "description": "One or more specific annotations to exclude",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "prefix": "--excludeAnnotation",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "sbg:altPrefix": "-XA",
            "type": [
              "null",
              {
                "items": "string",
                "name": "exclude_ann",
                "type": "array"
              }
            ]
          },
          {
            "label": "Emit reference confidence",
            "id": "#emit_ref_confidence",
            "description": "Mode for emitting reference confidence scores (NONE|BP_RESOLUTION|GVCF)",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "prefix": "--emitRefConfidence",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:altPrefix": "-ERC",
            "type": [
              "null",
              {
                "symbols": [
                  "NONE",
                  "BP_RESOLUTION",
                  "GVCF"
                ],
                "name": "emit_ref_confidence",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "sbg:altPrefix": "-EOQ",
            "label": "Emit Original Quals",
            "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR).",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--emit_original_quals",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#emit_original_quals",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "sbg:altPrefix": "-dt",
            "label": "Downsampling Type",
            "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--downsampling_type",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#downsampling_type",
            "type": [
              "null",
              {
                "symbols": [
                  "NONE",
                  "ALL_READS",
                  "BY_SAMPLE"
                ],
                "name": "downsampling_type",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "sbg:altPrefix": "-dfrac",
            "label": "Downsample to Fraction",
            "description": "Fraction [0.0-1.0] of reads to downsample to.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--downsample_to_fraction",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#downsample_to_fraction",
            "type": [
              "null",
              "float"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "sbg:altPrefix": "-dcov",
            "label": "Downsample to Coverage",
            "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--downsample_to_coverage",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#downsample_to_coverage",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Don't increase K-mer size",
            "id": "#dont_increase_kmers",
            "description": "Disable iterating over kmer sizes when graph cycles are detected",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "prefix": "--dontIncreaseKmerSizesForCycles",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:altPrefix": "-dontIncreaseKmerSizesForCycles",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "sbg:altPrefix": "-drf",
            "label": "Read filter(s) to disable",
            "description": "Read filters to disable. Specify which filter(s) to disable.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--disable_read_filter",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#disable_read_filter",
            "type": [
              "null",
              {
                "symbols": [],
                "name": "disable_read_filter",
                "type": "enum"
              }
            ]
          },
          {
            "label": "Disable phasing",
            "id": "#disable_phasing",
            "description": "Disable physical phasing",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "prefix": "--doNotRunPhysicalPhasing",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:altPrefix": "-doNotRunPhysicalPhasing",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Disable optimizations",
            "id": "#disable_opt",
            "description": "Don't skip calculations in ActiveRegions with no variants",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "prefix": "--disableOptimizations",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:altPrefix": "-disableOptimizations",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "sbg:altPrefix": "-DIQ",
            "label": "Disable Indel Quals",
            "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--disable_indel_quals",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#disable_indel_quals",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "sbg:altPrefix": null,
            "label": "Disable bam indexing",
            "description": "Turn off on-the-fly creation of indices for output BAM files.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--disable_bam_indexing",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#disable_bam_indexing",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "sbg:altPrefix": "-d_locking_when_reading_rods",
            "label": "Disable index generation and locking",
            "description": "Disable both auto-generation of index files and index file locking.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--disable_auto_index_creation_and_locking_when_reading_rods",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#disable_auto_index",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "0",
            "sbg:altPrefix": "-DBQ",
            "label": "Default Base Qualities",
            "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--defaultBaseQualities",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#default_base_qualities",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Debug",
            "id": "#debug",
            "description": "Print out very verbose debug information about each triggering active region",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "prefix": "--debug",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:altPrefix": "-debug",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:altPrefix": "-D",
            "description": "DB SNP file",
            "label": "DB SNP file",
            "type": [
              "null",
              "File"
            ],
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "valueFrom": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  if($job.inputs.db_snp)\n    return '--dbsnp ' + [].concat($job.inputs.db_snp)[0].path\n  else return ''\n}"
              }
            },
            "id": "#db_snp",
            "required": false,
            "sbg:fileTypes": "VCF"
          },
          {
            "sbg:toolDefaultValue": "1",
            "label": "CPU per job",
            "description": "Number of CPUs per job.",
            "sbg:category": "Execution",
            "id": "#cpu_per_job",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Contamination fraction",
            "id": "#contamination_fraction",
            "description": "Fraction of contamination in sequencing data (for all samples) to aggressively remove",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "prefix": "--contamination_fraction_to_filter",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:altPrefix": "-contamination",
            "type": [
              "null",
              "float"
            ]
          },
          {
            "sbg:altPrefix": "-contaminationFile",
            "label": "Contamination file",
            "description": "Tab-separated File containing fraction of contamination in sequencing data (per sample) to aggressively remove. Format should be SampleID><TAB><Contamination>\" (Contamination is double) per line; No header.",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "prefix": "--contamination_fraction_per_sample_file",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#contamination_file",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          },
          {
            "label": "Consensus mode",
            "id": "#consensus_mode",
            "description": "1000G consensus mode",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "prefix": "--consensus",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:altPrefix": "-consensus",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:altPrefix": "-comp",
            "label": "Comparison VCF file",
            "description": "Comparison VCF file",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "prefix": "--comp",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#comp_vcf",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          },
          {
            "sbg:altPrefix": "-BQSR",
            "label": "BQSR",
            "description": "Any recalibration table without a specific role.",
            "sbg:category": "Input Files",
            "sbg:fileTypes": "GRP, TXT, TABLE",
            "inputBinding": {
              "prefix": "--BQSR",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#bqsr",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          },
          {
            "sbg:toolDefaultValue": "40.0",
            "sbg:altPrefix": "-baqGOP",
            "label": "BAQ Gap Open Penalty",
            "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--baqGapOpenPenalty",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#baq_gap_open_penalty",
            "type": [
              "null",
              "float"
            ]
          },
          {
            "sbg:toolDefaultValue": "OFF",
            "sbg:altPrefix": "-baq",
            "label": "BAQ Calculation Type",
            "description": "Type of BAQ calculation to apply in the engine.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--baq",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#baq",
            "type": [
              "null",
              {
                "symbols": [
                  "OFF",
                  "CALCULATE_AS_NECESSARY",
                  "RECALCULATE"
                ],
                "name": "baq",
                "type": "enum"
              }
            ]
          },
          {
            "label": "Band pass sigma",
            "id": "#band_pass",
            "description": "The sigma of the band pass filter Gaussian kernel; if not provided defaults to Walker annotated default",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "prefix": "--bandPassSigma",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:altPrefix": "-bandPassSigma",
            "type": [
              "null",
              "string"
            ]
          },
          {
            "label": "BAM output",
            "id": "#bamout",
            "description": "File to which assembled haplotypes should be written.",
            "sbg:category": "Advanced Outputs",
            "sbg:altPrefix": "--bamOutput",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Write haplotypes to specified BAM",
            "id": "#bam_out",
            "description": "File to which assembled haplotypes should be written",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "prefix": "--bamOutput",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:altPrefix": "-bamout",
            "type": [
              "null",
              "string"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "sbg:altPrefix": "-compress",
            "label": "Bam compression",
            "description": "Compression level to use for writing BAM files (0 - 9, higher is more compressed).",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--bam_compression",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#bam_compression",
            "type": [
              "null",
              {
                "symbols": [
                  "0",
                  "1",
                  "2",
                  "3",
                  "4",
                  "5",
                  "6",
                  "7",
                  "8",
                  "9"
                ],
                "name": "bam_compression",
                "type": "enum"
              }
            ]
          },
          {
            "label": "Apply groups of annotaitons",
            "id": "#annotation_groups",
            "description": "One or more classes/groups of annotations to apply to variant calls",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "prefix": "--group",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "sbg:altPrefix": "-G",
            "type": [
              "null",
              {
                "items": "string",
                "name": "annotation_groups",
                "type": "array"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "[]",
            "sbg:altPrefix": "-A",
            "label": "Annotation",
            "description": "One or more specific annotations to apply to variant calls.",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "prefix": "--annotation",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#annotation",
            "type": [
              "null",
              {
                "items": "string",
                "name": "annotation",
                "type": "array"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "sbg:altPrefix": "-nda",
            "label": "Annotate Nda",
            "description": "If provided, we will annotate records with the number of alternate alleles that were discovered (but not necessarily genotyped) at a given site.",
            "sbg:category": "Genotype GVCFs",
            "inputBinding": {
              "prefix": "--annotateNDA",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#annotate_nda",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Annotate all sites with PLs",
            "id": "#annotate_all_sites_PLs",
            "description": "Annotate all sites with PLs",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "prefix": "--allSitePLs",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:altPrefix": "-allSitePLs",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "sbg:altPrefix": "-allowPotentiallyMisencodedQuals",
            "label": "Allow Potentially Misencoded Quals",
            "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--allow_potentially_misencoded_quality_scores",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#allow_potentailly_misencoded_quals",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Allow non-unique K-mers in graph",
            "id": "#allow_non_unique_kmers",
            "description": "Allow graphs that have non-unique kmers in the reference",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "prefix": "--allowNonUniqueKmersInRef",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:altPrefix": "-allowNonUniqueKmersInRef",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:altPrefix": "-alleles",
            "label": "Alleles",
            "description": "The set of alleles at which to genotype when --genotyping_mode is GENOTYPE_GIVEN_ALLELES",
            "sbg:category": "Haplotype Caller",
            "sbg:fileTypes": "BCF2,VCF,VCF3",
            "inputBinding": {
              "prefix": "--alleles",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#alleles",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "sbg:altPrefix": "-allSites",
            "label": "Include non-variants",
            "description": "Include loci found to be non-variant after genotyping.",
            "sbg:category": "Genotype GVCFs",
            "inputBinding": {
              "prefix": "--includeNonVariantSites",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#all_sites",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:altPrefix": "-AR",
            "label": "Active region list file",
            "description": "Use this interval list file as the active regions to process",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "valueFrom": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  region = ''\n  if ($job.inputs.active_region_list)\n    region = [].concat($job.inputs.active_region_list)[0].path\n\n\n  if($job.inputs.intervals_file){\n    if($job.inputs.intervals_file instanceof Array){\n      if($job.inputs.intervals_file.length > 1){\n        if([].concat($job.inputs.reads)[0].metadata)\n          if([].concat($job.inputs.reads)[0].metadata.intervals_file)\n            region = [].concat($job.inputs.reads)[0].metadata.intervals_file\n      } else region = [].concat($job.inputs.intervals_file)[0].path\n    } else region = [].concat($job.inputs.intervals_file)[0].path\n  } \n  \n  if ($job.inputs.force_active && region != '')\n    return '--activeRegionIn ' + region\n  else \n    return ''\n}"
              }
            },
            "id": "#active_region_list",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          },
          {
            "label": "Output IGV formatted file",
            "id": "#active_reg_output_file_name",
            "description": "Output the active region to this IGV formatted file",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "prefix": "--activeRegionOut",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:altPrefix": "-ARO",
            "type": [
              "null",
              "string"
            ]
          },
          {
            "label": "Active region extension",
            "id": "#active_reg_ext",
            "description": "The active region extension; if not provided defaults to Walker annotated default",
            "sbg:category": "Haplotype Caller",
            "inputBinding": {
              "prefix": "--activeRegionExtension",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:altPrefix": "-activeRegionExtension",
            "type": [
              "null",
              "string"
            ]
          }
        ],
        "sbg:modifiedBy": "bogdang",
        "sbg:modifiedOn": 1497395361,
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ]
          }
        ],
        "x": 1099.0000316351654,
        "sbg:toolkitVersion": "3.5",
        "arguments": [
          {
            "prefix": "--out",
            "valueFrom": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\t\n  interval_name = \"\"\n  if ($job.inputs.include_interval_name_in_output_name)\n  \tif($job.inputs.intervals_file)\n    \tif($job.inputs.intervals_file instanceof Array)\n      \t\tif([].concat($job.inputs.reads)[0].metadata)\n        \t\tif([].concat($job.inputs.reads)[0].metadata.intervals_file)\n     \t\t\t\tinterval_name = \".\" + [].concat($job.inputs.reads)[0].metadata.intervals_file.split(\".\")[0]\n    \n  if($job.inputs.emit_ref_confidence == 'GVCF')\n  {\n    read_name = [].concat($job.inputs.reads)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  \tread_namebase = read_name.slice(0, read_name.length-1).join('.')\n  \treturn read_namebase + interval_name + '.g.vcf'\n  }\n  else\n  \tread_name = [].concat($job.inputs.reads)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  \tread_namebase = read_name.slice(0, read_name.length-1).join('.')\n  \treturn read_namebase + interval_name +  '.vcf'\n}"
            },
            "separate": true
          },
          {
            "separate": true,
            "position": 100,
            "valueFrom": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{//bamout\n  reads = [].concat($job.inputs.reads)\n  \n  if ($job.inputs.bamout) {\n    \n    return '-bamout ' + reads[0].path.split('/').pop().split('.').slice(0,-1).join('.') + '.reassembled.bam'\n    \n  } else {\n    \n    return ''\n    \n  }\n  \n}"
            }
          }
        ],
        "sbg:validationErrors": [],
        "cwlVersion": "sbg:draft-2",
        "sbg:createdBy": "bogdang",
        "label": "GATK HaplotypeCaller",
        "stdout": "",
        "temporaryFailCodes": [],
        "sbg:id": "kb472/wxs-haplotypecaller-test/gatk-haplotypecaller/0",
        "sbg:cmdPreview": "java -Xmx2048M -jar /opt/GenomeAnalysisTK_3.5-0-g36282e4.jar --analysis_type HaplotypeCaller --reference_sequence example.fasta --input_file /path/example.bam --out example.chr1.vcf  -bamout example.reassembled.bam",
        "baseCommand": [
          "java",
          {
            "class": "Expression",
            "engine": "#cwl-js-engine",
            "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }\n  return '-Xmx2048M'\n}"
          },
          "-jar",
          "/opt/GenomeAnalysisTK_3.5-0-g36282e4.jar",
          "--analysis_type",
          "HaplotypeCaller"
        ],
        "id": "kb472/wxs-haplotypecaller-test/gatk-haplotypecaller/0",
        "sbg:job": {
          "inputs": {
            "consensus_mode": false,
            "bqsr": {
              "class": "File",
              "secondaryFiles": [],
              "size": 0,
              "path": "/path/to/bqsr.ext"
            },
            "max_active_region_size": null,
            "gq_threshold": [
              null
            ],
            "out_mode": "EMIT_VARIANTS_ONLY",
            "allow_non_unique_kmers": true,
            "bamout": true,
            "write_to_bam": null,
            "band_pass": "",
            "min_reads_per_algn": null,
            "use_allele_trigger": false,
            "emit_ref_confidence": null,
            "min_graph_pruning": "",
            "max_reads_active_reg": null,
            "max_haplotypes": null,
            "no_active_region_trim": false,
            "active_reg_ext": "",
            "bam_out": "",
            "disable_opt": false,
            "reads": [
              {
                "secondaryFiles": [],
                "metadata": {
                  "intervals_file": "chr1.bed"
                },
                "path": "/path/example.bam"
              }
            ],
            "min_pruning_threshold": "",
            "debug": false,
            "reference": {
              "secondaryFiles": [
                {
                  "path": ".fai"
                },
                {
                  "path": "^.dict"
                }
              ],
              "path": "example.fasta"
            },
            "active_region_list": {
              "class": "File",
              "secondaryFiles": [],
              "size": 0,
              "path": "ssss"
            },
            "output_raw_activity": "",
            "dont_increase_kmers": false,
            "annotate_all_sites_PLs": false,
            "genotyping_mode": "DISCOVERY",
            "mismapping_rate": null,
            "min_length": null,
            "db_snp": {
              "class": "File",
              "secondaryFiles": [],
              "size": 0,
              "path": "/path/to/db_snp.ext"
            },
            "kmer_size": null,
            "intervals_file": [
              {
                "class": "File",
                "secondaryFiles": [],
                "size": 0,
                "path": "/path/to/intervals_file-1.ext"
              },
              {
                "class": "File",
                "secondaryFiles": [],
                "size": 0,
                "path": "/path/to/intervals_file-2.ext"
              }
            ],
            "gap_penalty": null,
            "include_interval_name_in_output_name": true,
            "active_reg_output_file_name": "",
            "no_soft_clipped": false,
            "disable_phasing": false,
            "graph_file": "",
            "exclude_ann": [
              ""
            ],
            "force_active": false,
            "alleles": {
              "class": "File",
              "secondaryFiles": [],
              "size": 0,
              "path": "/path/to/alleles.ext"
            },
            "use_filtered_reads": false,
            "annotation_groups": [
              ""
            ],
            "indel_size": null,
            "min_base_q_scores": null,
            "contamination_fraction": null,
            "pcr_indel_model": null,
            "sample_name": "sample_name",
            "prob_threshold": null
          },
          "allocatedResources": {
            "cpu": 1,
            "mem": 2048
          }
        },
        "sbg:sbgMaintained": false,
        "outputs": [
          {
            "label": "VCF",
            "id": "#vcf_output",
            "description": "A raw, unfiltered, highly specific callset in VCF format.",
            "sbg:fileTypes": "VCF",
            "outputBinding": {
              "glob": "*.vcf",
              "sbg:inheritMetadataFrom": "#reads"
            },
            "type": [
              "null",
              "File"
            ]
          },
          {
            "label": "Output BAM",
            "id": "#bam_output",
            "description": "Reassembled BAM outputted if the appropriate flag is set.",
            "sbg:fileTypes": "BAM",
            "outputBinding": {
              "glob": "*.bam",
              "sbg:inheritMetadataFrom": "#reads"
            },
            "type": [
              "null",
              "File"
            ]
          }
        ],
        "sbg:links": [
          {
            "label": "Homepage",
            "id": "https://www.broadinstitute.org/gatk/index.php"
          },
          {
            "label": "Source code",
            "id": "https://github.com/broadgsa/gatk-protected"
          },
          {
            "label": "Wiki",
            "id": "https://www.broadinstitute.org/gatk/guide/tooldocs/"
          },
          {
            "label": "Download",
            "id": "https://www.broadinstitute.org/gatk/download/"
          },
          {
            "label": "Publication",
            "id": "https://www.broadinstitute.org/gatk/about/#in-the-literature"
          },
          {
            "label": "Documentation",
            "id": "https://www.broadinstitute.org/gatk/guide/tooldocs/org_broadinstitute_gatk_tools_walkers_haplotypecaller_HaplotypeCaller.php"
          }
        ],
        "sbg:revision": 0,
        "sbg:latestRevision": 0,
        "description": "###**Overview**  \n\nThe HaplotypeCaller is capable of calling SNPs and indels simultaneously via local de-novo assembly of haplotypes in an active region. In other words, whenever the program encounters a region showing signs of variation, it discards the existing mapping information and completely reassembles the reads in that region. This allows the HaplotypeCaller to be more accurate when calling regions that are traditionally difficult to call, for example when they contain different types of variants close to each other. It also makes the HaplotypeCaller much better at calling indels than position-based callers like UnifiedGenotyper.  \n\nIn the so-called GVCF mode used for scalable variant calling in DNA sequence data, HaplotypeCaller runs per-sample to generate an intermediate genomic gVCF (gVCF), which can then be used for joint genotyping of multiple samples in a very efficient way, which enables rapid incremental processing of samples as they roll off the sequencer, as well as scaling to very large cohort sizes (e.g. the 92K exomes of ExAC).  \n\nIn addition, HaplotypeCaller is able to handle non-diploid organisms as well as pooled experiment data. Note however that the algorithms used to calculate variant likelihoods is not well suited to extreme allele frequencies (relative to ploidy) so its use is not recommended for somatic (cancer) variant discovery. For that purpose, use MuTect2 instead.  \n\nFinally, HaplotypeCaller is also able to correctly handle the splice junctions that make RNAseq a challenge for most variant callers.  \n\n###**Input**  \nInput bam file(s) from which to make calls\n\n###**Output**  \nEither a VCF or gVCF file with raw, unfiltered SNP and indel calls. Regular VCFs must be filtered either by variant recalibration (best) or hard-filtering before use in downstream analyses. If using the reference-confidence model workflow for cohort analysis, the output is a GVCF file that must first be run through GenotypeGVCFs and then filtering before further analysis.\n\n###**Usage examples**  \nThese are example commands that show how to run HaplotypeCaller for typical use cases. \nSquare brackets (\"[ ]\") indicate optional arguments. Note that parameter values shown here may not be the latest recommended; see the Best Practices documentation for detailed recommendations.\n\nSingle-sample GVCF calling on DNAseq (for ***-ERC GVCF*** cohort analysis workflow)  \n\n    java -jar GenomeAnalysisTK.jar \\  \n         -R reference.fasta \\  \n         -T HaplotypeCaller \\  \n         -I sample1.bam \\  \n         --emitRefConfidence GVCF \\  \n         [--dbsnp dbSNP.vcf] \\  \n         [-L targets.interval_list] \\  \n         -o output.raw.snps.indels.g.vcf  \n\nVariant-only calling on DNAseq  \n\n    java -jar GenomeAnalysisTK.jar \\  \n         -R reference.fasta \\  \n         -T HaplotypeCaller \\  \n         -I sample1.bam [-I sample2.bam ...] \\  \n          [--dbsnp dbSNP.vcf] \\  \n          [-stand_call_conf 30] \\  \n          [-stand_emit_conf 10] \\  \n          [-L targets.interval_list] \\  \n          -o output.raw.snps.indels.vcf  \n\nVariant-only calling on RNAseq  \n\n     java -jar GenomeAnalysisTK.jar \\  \n          -R reference.fasta \\  \n          -T HaplotypeCaller \\  \n          -I sample1.bam \\  \n          [--dbsnp dbSNP.vcf] \\  \n          -stand_call_conf 20 \\  \n          -stand_emit_conf 20 \\  \n          -o output.raw.snps.indels.vcf  \n\n###**IMPORTANT NOTICE**  \n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding *.fai* (fasta index) and *.dict* (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the '***SBG FASTA Indices***' tool within your GATK based workflow before using any of the GATK tools.",
        "sbg:projectName": "WXS haplotypeCaller Test ",
        "class": "CommandLineTool",
        "sbg:image_url": null,
        "y": -21.99998019635649,
        "sbg:contributors": [
          "bogdang"
        ],
        "sbg:revisionNotes": "Copy of bogdang/test-quality-adjuster/gatk-haplotypecaller/1",
        "sbg:project": "kb472/wxs-haplotypecaller-test",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "bogdang",
            "sbg:revisionNotes": "Copy of bogdang/test-quality-adjuster/gatk-haplotypecaller/1",
            "sbg:modifiedOn": 1497395361,
            "sbg:revision": 0
          }
        ],
        "sbg:categories": [
          "Variant-Calling"
        ],
        "sbg:copyOf": "bogdang/test-quality-adjuster/gatk-haplotypecaller/1",
        "sbg:toolAuthor": "Broad Institute",
        "sbg:license": "MIT License",
        "sbg:createdOn": 1497395361,
        "sbg:toolkit": "GATK",
        "stdin": "",
        "successCodes": [],
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerPull": "images.sbgenomics.com/aleksandar_mihajlovic/gatk3:3.5.0",
            "dockerImageId": "3c3b8e0ed4e5"
          },
          {
            "class": "sbg:CPURequirement",
            "value": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  if($job.inputs.cpu_per_job){\n  \treturn $job.inputs.cpu_per_job\n  }\n  return 1\n}"
            }
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}"
            }
          }
        ]
      },
      "sbg:y": -21.99998019635649,
      "id": "#GATK_HaplotypeCaller"
    },
    {
      "inputs": [
        {
          "source": [
            "#GATK_VariantFiltration_1.filtered_vcf"
          ],
          "id": "#SnpEff.variants_file"
        },
        {
          "id": "#SnpEff.use_csv_stats"
        },
        {
          "id": "#SnpEff.up_down_stream_len"
        },
        {
          "id": "#SnpEff.total_memory"
        },
        {
          "id": "#SnpEff.threads"
        },
        {
          "id": "#SnpEff.strict"
        },
        {
          "id": "#SnpEff.stats"
        },
        {
          "id": "#SnpEff.splicesitesize"
        },
        {
          "id": "#SnpEff.splice_region_exons_size"
        },
        {
          "id": "#SnpEff.sequenceontology"
        },
        {
          "id": "#SnpEff.reg"
        },
        {
          "id": "#SnpEff.output_format"
        },
        {
          "id": "#SnpEff.onlyreg"
        },
        {
          "id": "#SnpEff.only_protein"
        },
        {
          "id": "#SnpEff.oicr"
        },
        {
          "id": "#SnpEff.nostats"
        },
        {
          "id": "#SnpEff.no_utr"
        },
        {
          "id": "#SnpEff.no_upstream"
        },
        {
          "id": "#SnpEff.no_shift_hgvs"
        },
        {
          "id": "#SnpEff.no_next_prot"
        },
        {
          "id": "#SnpEff.no_motif"
        },
        {
          "id": "#SnpEff.no_lof"
        },
        {
          "id": "#SnpEff.no_intron"
        },
        {
          "id": "#SnpEff.no_intergenic"
        },
        {
          "id": "#SnpEff.no_interaction"
        },
        {
          "id": "#SnpEff.no_hgvs"
        },
        {
          "id": "#SnpEff.no_genome"
        },
        {
          "id": "#SnpEff.no_downstream"
        },
        {
          "id": "#SnpEff.nextprot"
        },
        {
          "id": "#SnpEff.motif"
        },
        {
          "id": "#SnpEff.max_tsl"
        },
        {
          "id": "#SnpEff.interval"
        },
        {
          "id": "#SnpEff.interaction"
        },
        {
          "id": "#SnpEff.input_format"
        },
        {
          "id": "#SnpEff.hgvs_tr_id"
        },
        {
          "id": "#SnpEff.hgvs_1_letter"
        },
        {
          "id": "#SnpEff.geneid"
        },
        {
          "id": "#SnpEff.format_eff"
        },
        {
          "id": "#SnpEff.filterinterval"
        },
        {
          "source": [
            "#database"
          ],
          "id": "#SnpEff.database"
        },
        {
          "id": "#SnpEff.csvstats"
        },
        {
          "id": "#SnpEff.configuration_file"
        },
        {
          "id": "#SnpEff.classic"
        },
        {
          "id": "#SnpEff.canon"
        },
        {
          "id": "#SnpEff.cancersamples"
        },
        {
          "id": "#SnpEff.cancer"
        },
        {
          "id": "#SnpEff.add_lof_tag"
        },
        {
          "id": "#SnpEff.add_hgvs_anno"
        }
      ],
      "outputs": [
        {
          "id": "#SnpEff.summary_text"
        },
        {
          "id": "#SnpEff.summary"
        },
        {
          "id": "#SnpEff.csvstats_file"
        },
        {
          "id": "#SnpEff.annotated"
        }
      ],
      "sbg:x": 1453,
      "run": {
        "inputs": [
          {
            "label": "Input variants file",
            "description": "Input variants file.",
            "sbg:category": "File type inputs",
            "sbg:fileTypes": "VCF, TXT, PILEUP, BED",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "position": 2001
            },
            "id": "#variants_file",
            "required": true,
            "type": [
              "File"
            ]
          },
          {
            "sbg:toolDefaultValue": "CSV",
            "label": "Use CSV statistics",
            "description": "Use CSV statistics for metrics output.",
            "sbg:category": "Statistics",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "valueFrom": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  if ($job.inputs.use_csv_stats)\n  {\n    if ($job.inputs.csvstats)\n    {\n      return '-csvStats ' + $job.inputs.csvstats.concat(\".snpeffsummary.csv\")\n    }\n    else\n    {\n      return '-csvStats ' + [].concat($job.inputs.variants_file)[0].path.split(\"/\").splice(-1)[0].split(\".\")[0].concat(\".snpeffsummary.csv\")\n    }\n  }\n}\n\n"
              }
            },
            "id": "#use_csv_stats",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Upstream downstream interval length",
            "description": "Set upstream downstream interval length (in bases).",
            "sbg:category": "Database optins",
            "inputBinding": {
              "prefix": "-upDownStreamLen",
              "sbg:cmdInclude": true,
              "position": 490,
              "separate": true
            },
            "sbg:stageInput": null,
            "id": "#up_down_stream_len",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "8",
            "label": "Memory for the task [Gb]",
            "description": "RAM requirement for the java process execution [Gb].",
            "sbg:category": "Other input types",
            "id": "#total_memory",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "FALSE",
            "label": "Use multiple threads (implies '-noStats')",
            "description": "Use multiple threads (implies '-noStats'). Default: False.",
            "sbg:category": "Other input types",
            "inputBinding": {
              "prefix": "-t",
              "sbg:cmdInclude": true,
              "position": 280,
              "separate": true
            },
            "id": "#threads",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Only use validated transcripts",
            "description": "Only use 'validated' transcripts (i.e. sequence has been checked). Default: false.",
            "sbg:category": "Database optins",
            "inputBinding": {
              "prefix": "-strict",
              "sbg:cmdInclude": true,
              "position": 480,
              "separate": true
            },
            "sbg:stageInput": null,
            "id": "#strict",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "snpEff_summary.html",
            "sbg:altPrefix": "-s",
            "label": "Name of stats file (summary)",
            "description": "Name of stats file (summary).",
            "sbg:category": "Other input types",
            "inputBinding": {
              "prefix": "-stats",
              "sbg:cmdInclude": true,
              "position": 60,
              "separate": true,
              "valueFrom": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  if ($job.inputs.stats)\n  {\n    return $job.inputs.stats.concat(\".snpeffsummary.html\")\n  }\n  else\n  {\n    return [].concat($job.inputs.variants_file)[0].path.split(\"/\").splice(-1)[0].split(\".\")[0].concat(\".snpeffsummary.html\")\n  }\n}"
              }
            },
            "id": "#stats",
            "type": [
              "null",
              "string"
            ]
          },
          {
            "sbg:toolDefaultValue": "2",
            "sbg:altPrefix": "-ss",
            "label": "Set size for splice sites (donor and acceptor) in bases",
            "description": "Set size for splice sites (donor and acceptor) in bases.",
            "sbg:category": "Other input types",
            "inputBinding": {
              "prefix": "--spliceSiteSize",
              "sbg:cmdInclude": true,
              "position": 430,
              "separate": true
            },
            "id": "#splicesitesize",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "3",
            "label": "Set size for splice site region within exons",
            "description": "Set size for splice site region within exons. Default: 3 bases.",
            "sbg:category": "Database options",
            "inputBinding": {
              "prefix": "-spliceRegionExonSize",
              "sbg:cmdInclude": true,
              "position": 440,
              "separate": true
            },
            "id": "#splice_region_exons_size",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "FALSE",
            "label": "Use Sequence Ontology terms",
            "description": "Use Sequence Ontology terms. Default: false.",
            "sbg:category": "Annotations options",
            "inputBinding": {
              "prefix": "-sequenceOntology",
              "sbg:cmdInclude": true,
              "position": 250,
              "separate": true
            },
            "id": "#sequenceontology",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Regulation track to use (this option can be used add several times)",
            "description": "Regulation track to use (this option can be used add several times).",
            "sbg:category": "Other input types",
            "inputBinding": {
              "prefix": "-reg",
              "sbg:cmdInclude": true,
              "position": 420,
              "itemSeparator": null,
              "separate": true
            },
            "id": "#reg",
            "type": [
              "null",
              {
                "items": {
                  "type": "string"
                },
                "name": "reg",
                "type": "array"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "vcf",
            "label": "Ouput format",
            "description": "Ouput format. Possible values: {txt, vcf, gatk, bed, bedAnn}.",
            "sbg:category": "Other input types",
            "inputBinding": {
              "prefix": "-o",
              "sbg:cmdInclude": true,
              "position": 50,
              "separate": true
            },
            "id": "#output_format",
            "type": [
              "null",
              {
                "symbols": [
                  "txt",
                  "vcf",
                  "gatk",
                  "bed",
                  "bedAnn"
                ],
                "name": "output_format",
                "type": "enum"
              }
            ]
          },
          {
            "label": "Only use regulation tracks",
            "description": "Only use regulation tracks.",
            "sbg:category": "Other input types",
            "inputBinding": {
              "prefix": "-onlyReg",
              "sbg:cmdInclude": true,
              "position": 400,
              "separate": true
            },
            "id": "#onlyreg",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "FALSE",
            "label": "Only protein",
            "description": "Only use protein coding transcripts. Default: false.",
            "sbg:category": "Database optins",
            "inputBinding": {
              "prefix": "-onlyProtein",
              "sbg:cmdInclude": true,
              "position": 410,
              "separate": true
            },
            "id": "#only_protein",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "FALSE",
            "label": "Add OICR tag in VCF file",
            "description": "Add OICR tag in VCF file. Default: false.",
            "sbg:category": "Annotations options",
            "inputBinding": {
              "prefix": "-oicr",
              "sbg:cmdInclude": true,
              "position": 240,
              "separate": true
            },
            "id": "#oicr",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Do not create stats (summary) file",
            "description": "Do not create stats (summary) file.",
            "sbg:category": "Other input types",
            "inputBinding": {
              "prefix": "-noStats",
              "sbg:cmdInclude": true,
              "position": 70,
              "separate": true
            },
            "id": "#nostats",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Do not show 5_PRIME_UTR or 3_PRIME_UTR changes",
            "description": "Do not show 5_PRIME_UTR or 3_PRIME_UTR changes.",
            "sbg:category": "Results filter options",
            "inputBinding": {
              "prefix": "-no-utr",
              "sbg:cmdInclude": true,
              "position": 130,
              "separate": true
            },
            "id": "#no_utr",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Do not show UPSTREAM changes",
            "description": "Do not show UPSTREAM changes.",
            "sbg:category": "Results filter options",
            "inputBinding": {
              "prefix": "-no-upstream",
              "sbg:cmdInclude": true,
              "position": 120,
              "separate": true
            },
            "id": "#no_upstream",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Do not shift variants according to HGVS",
            "description": "Do not shift variants according to HGVS notation (most 3prime end).",
            "sbg:category": "Annotations options",
            "sbg:stageInput": null,
            "inputBinding": {
              "prefix": "-noShiftHgvs",
              "sbg:cmdInclude": true,
              "position": 230,
              "separate": true
            },
            "id": "#no_shift_hgvs",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Disable NextProt annotations",
            "description": "Disable NextProt annotations.",
            "sbg:category": "Database options",
            "inputBinding": {
              "prefix": "-noNextProt",
              "sbg:cmdInclude": true,
              "position": 390,
              "separate": true
            },
            "sbg:stageInput": null,
            "id": "#no_next_prot",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Disable motif annotations",
            "description": "Disable motif annotations.",
            "sbg:category": "Database options",
            "inputBinding": {
              "prefix": "-noMotif",
              "sbg:cmdInclude": true,
              "position": 380,
              "separate": true
            },
            "sbg:stageInput": null,
            "id": "#no_motif",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "label": "Do not add LOF and NMD annotations",
            "description": "Do not add LOF and NMD annotations.",
            "sbg:category": "Annotations options",
            "inputBinding": {
              "prefix": "-noLof",
              "sbg:cmdInclude": true,
              "position": 220,
              "separate": true
            },
            "id": "#no_lof",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Do not show INTRON changes",
            "description": "Do not show INTRON changes.",
            "sbg:category": "Results filter options",
            "inputBinding": {
              "prefix": "-no-intron",
              "sbg:cmdInclude": true,
              "position": 110,
              "separate": true
            },
            "id": "#no_intron",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Do not show INTERGENIC changes",
            "description": "Do not show INTERGENIC changes.",
            "sbg:category": "Results filter options",
            "inputBinding": {
              "prefix": "-no-intergenic",
              "sbg:cmdInclude": true,
              "position": 100,
              "separate": true
            },
            "id": "#no_intergenic",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "FALSE",
            "label": "Disable interaction annotations",
            "description": "Disable interaction annotations. Default: false.",
            "sbg:category": "Database options",
            "inputBinding": {
              "prefix": "-noInteraction",
              "sbg:cmdInclude": true,
              "position": 370,
              "separate": true
            },
            "id": "#no_interaction",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Do not add HGVS annotations",
            "description": "Do not add HGVS annotations.",
            "sbg:category": "Annotations options",
            "inputBinding": {
              "prefix": "-noHgvs",
              "sbg:cmdInclude": true,
              "position": 210,
              "separate": true
            },
            "sbg:stageInput": null,
            "id": "#no_hgvs",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Do not load any genomic database",
            "description": "Do not load any genomic database (e.g. annotate using custom files).",
            "sbg:category": "Database options",
            "inputBinding": {
              "prefix": "-noGenome",
              "sbg:cmdInclude": true,
              "position": 360,
              "separate": true
            },
            "sbg:stageInput": null,
            "id": "#no_genome",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Do not show DOWNSTREAM changes",
            "description": "Do not show DOWNSTREAM changes.",
            "sbg:category": "Results filter options",
            "inputBinding": {
              "prefix": "-no-downstream",
              "sbg:cmdInclude": true,
              "position": 90,
              "separate": true
            },
            "id": "#no_downstream",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Annotate using NextProt (requires NextProt database)",
            "description": "Annotate using NextProt (requires NextProt database).",
            "sbg:category": "Other input types",
            "inputBinding": {
              "prefix": "-nextProt",
              "sbg:cmdInclude": true,
              "position": 350,
              "separate": true
            },
            "id": "#nextprot",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Annotate using motifs (requires Motif database)",
            "description": "Annotate using motifs (requires Motif database).",
            "sbg:category": "Other input types",
            "inputBinding": {
              "prefix": "-motif",
              "sbg:cmdInclude": true,
              "position": 340,
              "separate": true
            },
            "id": "#motif",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Max TSL",
            "description": "Only use transcripts having Transcript Support Level lower than <TSL_number>.",
            "sbg:category": "Database options",
            "inputBinding": {
              "prefix": "-maxTSL",
              "sbg:cmdInclude": true,
              "position": 330,
              "separate": true
            },
            "sbg:stageInput": null,
            "id": "#max_tsl",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Use a custom intervals in TXT/BED/BigBed/VCF/GFF file (you may use this option many times)",
            "description": "Use a custom intervals in TXT/BED/BigBed/VCF/GFF file (you may use this option many times).",
            "sbg:category": "Other input types",
            "sbg:stageInput": "link",
            "sbg:fileTypes": "interval",
            "inputBinding": {
              "prefix": "-interval",
              "sbg:cmdInclude": true,
              "position": 320,
              "separate": true
            },
            "id": "#interval",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          },
          {
            "sbg:toolDefaultValue": "TRUE",
            "label": "Annotate using interactions",
            "description": "Annotate using inteactions (requires interaciton database). Default: true.",
            "sbg:category": "Database options",
            "inputBinding": {
              "prefix": "-interaction",
              "sbg:cmdInclude": true,
              "position": 310,
              "separate": true
            },
            "id": "#interaction",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "vcf",
            "label": "Input format",
            "description": "Input format. Possible values: {vcf, txt, pileup, bed}. [Default: vcf].",
            "sbg:category": "Other input types",
            "inputBinding": {
              "prefix": "-i",
              "sbg:cmdInclude": true,
              "position": 40,
              "separate": true
            },
            "id": "#input_format",
            "type": [
              "null",
              {
                "symbols": [
                  "vcf",
                  " txt",
                  " pileup",
                  " bed"
                ],
                "name": "input_format",
                "type": "enum"
              }
            ]
          },
          {
            "label": "Use transcript ID in HGVS",
            "description": "Use transcript ID in HGVS notation. Default: false.",
            "sbg:category": "Configuration",
            "inputBinding": {
              "prefix": "-hgvsTrId",
              "sbg:cmdInclude": true,
              "position": 190,
              "separate": true
            },
            "id": "#hgvs_tr_id",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Use one letter Amino acid codes in HGVS",
            "description": "Use one letter Amino acid codes in HGVS notation. Default: false.",
            "sbg:category": "Annotations options",
            "inputBinding": {
              "prefix": "-hgvs1LetterAa",
              "sbg:cmdInclude": true,
              "position": 180,
              "separate": true
            },
            "sbg:stageInput": null,
            "id": "#hgvs_1_letter",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "FALSE",
            "label": "Use gene ID instead of gene name (VCF output)",
            "description": "Use gene ID instead of gene name (VCF output). Default: false.",
            "sbg:category": "Annotations options",
            "inputBinding": {
              "prefix": "-geneId",
              "sbg:cmdInclude": true,
              "position": 170,
              "separate": true
            },
            "id": "#geneid",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Use EFF field",
            "description": "Use 'EFF' field compatible with older versions (instead of 'ANN').",
            "sbg:category": "Annotations options",
            "inputBinding": {
              "prefix": "-formatEff",
              "sbg:cmdInclude": true,
              "position": 160,
              "separate": true
            },
            "id": "#format_eff",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:altPrefix": "-fi",
            "label": "Only analyze changes that intersect with the intervals specified in this file (you may use this option many times)",
            "description": "Only analyze changes that intersect with the intervals specified in this file.",
            "sbg:category": "Results filter options",
            "sbg:fileTypes": "interval",
            "inputBinding": {
              "prefix": "--filterInterval",
              "sbg:cmdInclude": true,
              "position": 80,
              "separate": true
            },
            "id": "#filterinterval",
            "required": false,
            "type": [
              "null",
              {
                "items": "File",
                "name": "filterinterval",
                "type": "array"
              }
            ]
          },
          {
            "label": "SnpEff database file",
            "description": "SnpEff database file is zip archive that can be downloaded from the SnpEff official site, or using the SnpEff download app.",
            "sbg:category": "File type inputs",
            "sbg:fileTypes": "ZIP",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "position": 2000,
              "valueFrom": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  input_database = $job.inputs.database\n  full_name = input_database.path.split('/')[input_database.path.split('/').length-1] \n  name = full_name.slice(0, -4) // Cut .zip extension\n  return name\n}"
              }
            },
            "id": "#database",
            "required": true,
            "type": [
              "File"
            ]
          },
          {
            "label": "Create CSV summary file instead of HTML",
            "description": "Create CSV summary file instead of HTML.",
            "sbg:category": "Other input types",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "position": 20,
              "valueFrom": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  if ($job.inputs.csvstats)\n  {\n    return '-csvStats ' + $job.inputs.csvstats.concat(\".csv\")\n  }\n}"
              }
            },
            "id": "#csvstats",
            "type": [
              "null",
              "string"
            ]
          },
          {
            "label": "Configuration file",
            "description": "Specify config file.",
            "sbg:category": "Generic options",
            "sbg:stageInput": "link",
            "sbg:fileTypes": "config",
            "inputBinding": {
              "prefix": "-c",
              "sbg:cmdInclude": true,
              "position": 260,
              "separate": true
            },
            "id": "#configuration_file",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          },
          {
            "label": "Use old style annotations",
            "description": "Use old style annotations instead of Sequence Ontology and Hgvs.",
            "sbg:category": "General options",
            "inputBinding": {
              "prefix": "-classic",
              "sbg:cmdInclude": true,
              "position": 10,
              "separate": true
            },
            "id": "#classic",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Only use canonical transcripts",
            "description": "Only use canonical transcripts.",
            "sbg:category": "Database options",
            "inputBinding": {
              "prefix": "-canon",
              "sbg:cmdInclude": true,
              "position": 300,
              "separate": true
            },
            "id": "#canon",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Two column TXT file defining 'original and derived' samples",
            "description": "Two column TXT file defining 'original \\t derived' samples.",
            "sbg:category": "Annotations options",
            "sbg:fileTypes": "TXT",
            "inputBinding": {
              "prefix": "-cancerSamples",
              "sbg:cmdInclude": true,
              "position": 150,
              "separate": true
            },
            "id": "#cancersamples",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          },
          {
            "sbg:toolDefaultValue": "FALSE",
            "label": "Perform 'cancer' comparisons (Somatic vs Germline)",
            "description": "Perform 'cancer' comparisons (Somatic vs Germline).",
            "sbg:category": "Annotations options",
            "inputBinding": {
              "prefix": "-cancer",
              "sbg:cmdInclude": true,
              "position": 140,
              "separate": true
            },
            "id": "#cancer",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Add loss of function (LOF) and Nonsense mediated decay (NMD) tags",
            "description": "Add loss of function (LOF) and Nonsense mediated decay (NMD) tags.",
            "sbg:category": "Other input types",
            "inputBinding": {
              "prefix": "-lof",
              "sbg:cmdInclude": true,
              "position": 200,
              "separate": true
            },
            "id": "#add_lof_tag",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "TRUE",
            "label": "Use HGVS annotations for amino acid sub-field",
            "description": "Use HGVS annotations for amino acid sub-field. Default: true.",
            "sbg:category": "Annotations options",
            "inputBinding": {
              "prefix": "-hgvs",
              "sbg:cmdInclude": true,
              "position": 170,
              "separate": true
            },
            "id": "#add_hgvs_anno",
            "type": [
              "null",
              "boolean"
            ]
          }
        ],
        "sbg:modifiedBy": "bogdang",
        "sbg:modifiedOn": 1497606665,
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ]
          }
        ],
        "x": 1453,
        "sbg:toolkitVersion": "4.2",
        "arguments": [
          {
            "separate": true,
            "position": 5000,
            "valueFrom": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\t\n  filename = [].concat($job.inputs.variants_file)[0].path\n  basename = filename.split('.').slice(0, filename.split('.').length-1).join('.').replace(/^.*[\\\\\\/]/, '')\n \n  \n  if($job.inputs.output_format === \"txt\")\n  {\n    name = basename.concat(\".snpEff_annotated.txt\")\n  }\n  else if ($job.inputs.output_format === \"bed\" || $job.inputs.output_format === \"bedAnn\")\n  {\n    name = basename.concat(\".snpEff_annotated.bed\")\n  }\n  else\n  {\n    name = basename.concat(\".snpEff_annotated.vcf\")\n  }\n  return '> ' + name\n}\n"
            }
          },
          {
            "separate": true,
            "position": 0,
            "valueFrom": "-nodownload"
          },
          {
            "separate": true,
            "position": 0,
            "valueFrom": "-noLog"
          }
        ],
        "sbg:toolAuthor": "Pablo Cingolani/Broad Institue",
        "cwlVersion": "sbg:draft-2",
        "sbg:createdBy": "bogdang",
        "label": "SnpEff",
        "sbg:validationErrors": [],
        "stdout": "",
        "temporaryFailCodes": [],
        "y": 238,
        "sbg:id": "kb472/wxs-haplotypecaller-test/snpeff-updated/1",
        "sbg:cmdPreview": "unzip -o /path/to/database/GRCh37.75.zip -d /opt/snpEff ; java -Xmx3072M -jar /opt/snpEff/snpEff.jar  -nodownload  -noLog  GRCh37.75  path/to/variants.vcf  > variants.snpEff_annotated.vcf",
        "baseCommand": [
          {
            "class": "Expression",
            "engine": "#cwl-js-engine",
            "script": "{\n  return 'unzip -o ' + $job.inputs.database.path + ' -d /opt/snpEff ;'\n}"
          },
          "java",
          {
            "class": "Expression",
            "engine": "#cwl-js-engine",
            "script": "{\n  //java -Xmx4g path/to/snpEff/snpEff.jar -c path/to/snpEff/snpEff.config GRCh37.75 path/to/snps.vcf\n  if($job.inputs.total_memory){\n    mem_mb = parseInt($job.inputs.total_memory) * 1024\n  \treturn '-Xmx'.concat(mem_mb, 'M')\n  }\n  \treturn '-Xmx8192M'\n}\n\n"
          },
          "-jar",
          "/opt/snpEff/snpEff.jar"
        ],
        "id": "kb472/wxs-haplotypecaller-test/snpeff-updated/1",
        "sbg:job": {
          "inputs": {
            "no_interaction": false,
            "no_next_prot": false,
            "database": {
              "secondaryFiles": [],
              "metadata": {},
              "path": "/path/to/database/GRCh37.75.zip"
            },
            "classic": false,
            "no_hgvs": false,
            "add_hgvs_anno": false,
            "format_eff": false,
            "no_motif": false,
            "hgvs_tr_id": false,
            "splice_region_exons_size": null,
            "use_csv_stats": false,
            "interaction": false,
            "max_tsl": null,
            "nostats": false,
            "no_genome": false,
            "only_protein": false,
            "configuration_file": {
              "class": "File",
              "secondaryFiles": [],
              "size": 0,
              "path": null
            },
            "no_shift_hgvs": false,
            "hgvs_1_letter": false,
            "stats": "",
            "oicr": false,
            "threads": true,
            "up_down_stream_len": null,
            "strict": false,
            "no_lof": false,
            "output_format": "vcf",
            "csvstats": "",
            "input_format": "vcf",
            "total_memory": 3,
            "variants_file": {
              "class": "File",
              "secondaryFiles": [],
              "size": 0,
              "path": "path/to/variants.vcf"
            },
            "interval": {
              "class": "File",
              "secondaryFiles": [],
              "size": 0,
              "path": "/path/to/interval.ext"
            }
          },
          "allocatedResources": {
            "cpu": 1,
            "mem": 3072
          }
        },
        "sbg:sbgMaintained": false,
        "outputs": [
          {
            "label": "Summary",
            "id": "#summary_text",
            "description": "SnpEff Summary in text format.",
            "sbg:fileTypes": "TXT",
            "outputBinding": {
              "glob": "*.txt",
              "sbg:inheritMetadataFrom": "#variants_file"
            },
            "type": [
              "null",
              "File"
            ]
          },
          {
            "label": "Summary file",
            "id": "#summary",
            "description": "SnpEff summary file in HTML or CSV file format.",
            "sbg:fileTypes": "HTML, CSV",
            "outputBinding": {
              "glob": "*.html",
              "sbg:inheritMetadataFrom": "#variants_file"
            },
            "type": [
              "null",
              "File"
            ]
          },
          {
            "label": "CSV summary file",
            "id": "#csvstats_file",
            "description": "CSV summary file.",
            "sbg:fileTypes": "CSV",
            "outputBinding": {
              "glob": "*.csv"
            },
            "type": [
              "null",
              "File"
            ]
          },
          {
            "label": "SnpEff Annotated file",
            "id": "#annotated",
            "description": "SnpEff Annotated file.",
            "sbg:fileTypes": "VCF, TXT, GATK, BED, BEDANN",
            "outputBinding": {
              "glob": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\t\n  filename = [].concat($job.inputs.variants_file)[0].path\n  basename = filename.split('.').slice(0, filename.split('.').length-1).join('.').replace(/^.*[\\\\\\/]/, '')\n \n  \n  if($job.inputs.output_format === \"txt\")\n  {\n    return basename.concat(\".snpEff_annotated.txt\")\n  }\n  else if ($job.inputs.output_format === \"bed\" || $job.inputs.output_format === \"bedAnn\")\n  {\n    return basename.concat(\".snpEff_annotated.bed\")\n  }\n  else\n  {\n    return basename.concat(\".snpEff_annotated.vcf\")\n  }\n}"
              },
              "sbg:inheritMetadataFrom": "#variants_file"
            },
            "type": [
              "null",
              "File"
            ]
          }
        ],
        "sbg:links": [
          {
            "label": "Homepage",
            "id": "http://snpeff.sourceforge.net/index.html"
          },
          {
            "label": "Source Code",
            "id": "https://github.com/pcingola/SnpEff"
          },
          {
            "label": "Wiki",
            "id": "http://snpeff.sourceforge.net/SnpEff_manual.html"
          },
          {
            "label": "Download",
            "id": "http://sourceforge.net/projects/snpeff/files/snpEff_latest_core.zip"
          },
          {
            "label": "Publication",
            "id": "http://snpeff.sourceforge.net/SnpEff_paper.pdf"
          }
        ],
        "sbg:revision": 1,
        "sbg:latestRevision": 1,
        "description": "SnpEff is a variant annotation and effect prediction\u200b tool. It annotates and predicts the effects of variants on genes, such as amino acid changes.\n\nTypical usage assumes the user chooses inputs that are predicted variants (SNPs, insertions, deletions, and MNPs). This input file is usually the result of a sequencing experiment, and it is usually in variant call format (VCF). SnpEff analyzes the input variants and, in the process, it annotates the variants and calculates the effects they produce on known genes (e.g. amino acid changes). The output file can be in several file formats. The most common format is VCF.\n\nThere is also a command line option to control the amount of RAM in MB [-Xmx%m] for java, which is a custom parameter.\nCommon issues:\n- Name of the snpEff file with database must contain the name that exactly relates to the reference that it is for (e.g. GRCh37.75.zip, hg19.zip).",
        "sbg:projectName": "WXS haplotypeCaller Test ",
        "class": "CommandLineTool",
        "sbg:image_url": null,
        "sbg:createdOn": 1497606604,
        "sbg:contributors": [
          "bogdang"
        ],
        "sbg:project": "kb472/wxs-haplotypecaller-test",
        "sbg:categories": [
          "Annotation",
          "VCF-Processing"
        ],
        "successCodes": [],
        "sbg:license": "GNU Lesser General Public License v3.0 only",
        "sbg:toolkit": "SnpEff",
        "stdin": "",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "bogdang",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1497606604,
            "sbg:revision": 0
          },
          {
            "sbg:modifiedBy": "bogdang",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1497606665,
            "sbg:revision": 1
          }
        ],
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerPull": "images.sbgenomics.com/vladimirk/snpeff:4.2",
            "dockerImageId": "aae3dcb89b53"
          },
          {
            "class": "sbg:CPURequirement",
            "value": 1
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  if ($job.inputs.total_memory)\n  {\n    return $job.inputs.total_memory * 1024\n  }\n  \n  else\n  {\n    return 8192\n  }\n}"
            }
          }
        ]
      },
      "sbg:y": 238,
      "id": "#SnpEff"
    },
    {
      "inputs": [
        {
          "source": [
            "#FastQC.report_zip"
          ],
          "id": "#SBG_Html2b64.input_file"
        }
      ],
      "outputs": [
        {
          "id": "#SBG_Html2b64.b64html"
        }
      ],
      "sbg:x": 207.00004224479255,
      "sbg:y": 747.0000253021719,
      "run": {
        "inputs": [
          {
            "label": "Input file",
            "description": "Compressed archive.",
            "sbg:category": "File input.",
            "sbg:fileTypes": "ZIP, HTML",
            "inputBinding": {
              "prefix": "--input",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#input_file",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          }
        ],
        "sbg:modifiedBy": "admin",
        "sbg:modifiedOn": 1496674570,
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "requirements": [
          {
            "class": "CreateFileRequirement",
            "fileDef": [
              {
                "fileContent": "\"\"\"\nUsage:\n    sbg_html_to_b64.py --input FILE [--select FILE]\n\nDescription:\n    This tool is used for conversion of html file to b64 html file so it can be easily displayed in browsers.\n\nOptions:\n    -h, --help      Show this help message and exit. (For third class of tools it's required to put\n                    this option).\n\n    -v, --version   Show version and exit.\n\n    --input FILE    Input file is archive containing html and all other files included in the html file(images, etc).\n\n    --select FILE If we wish to select specific html file from folder that we wish to parse.\n\nExamples:\n    python sbg_html_to_b64.py --input sample_fastqc.zip\n\"\"\"\n\nimport os\nfrom docopt import docopt\nimport os.path\nimport base64\nimport mimetypes\nfrom bs4 import BeautifulSoup\nfrom path import Path\nfrom subprocess import call, check_output\nimport re\n\n\ndef dataurl(data, mime=None):\n    isfile = os.path.isfile(data)\n    if not isfile and not mime:\n        raise Exception('Mimetype must be provided when encoding data is not a valid file path.')\n    if not mime:\n        mimetypes.init()\n        mime, enc = mimetypes.guess_type(os.path.join('file://', data))\n        if mime is None:\n            raise Exception('rfc2397: failed to determine file type')\n    if isfile:\n        with open(data, 'r') as fpp:\n            data = fpp.read()\n    return 'data:%s;base64,%s' % (mime, base64.b64encode(data))\n\n\ndef compact_html(html_file):\n    with open(html_file) as f:\n        html = f.read()\n\n    if 'snpEff_summary' in html_file:\n        for l in html.split('\\n'):\n            if str(l).startswith('<a name'):\n                html = html.replace(str(l), str(l) + '</a>')\n        html = html.replace('<p>', '<p></p>')\n        html = html[:-358]\n        soup = BeautifulSoup(html, \"html5lib\")\n\n        js = \"javascript: void(0); document.getElementById('%s').scrollIntoView(true);\"\n        for anchor in soup.findAll('a'):\n            if 'href' in str(anchor):\n                if anchor['href'].startswith('#'):\n                    anchor['href'] = js % anchor['href'][1:]\n                else:\n                    anchor.decompose()\n            else:\n                anchor['id'] = anchor['name']\n\n        return soup.prettify()\n\n    else:\n        html = html.replace('&ge;', '>=')\n        html = html.replace('&gt;', '>')\n        html = html.replace('&lt;', '<')\n        html = html.replace('&le;', '<=')\n        html = re.sub(re.compile(\"/\\*.*?\\*/\", re.DOTALL), \"\", html)\n        base_dir = os.path.split(html_file)[0]\n        soup = BeautifulSoup(html, \"html5lib\")\n        for img in soup.findAll('img'):\n            if img['src'].find('data:') == 0:\n                durl_img = img['src']\n            else:\n                durl_img = dataurl(os.path.join(base_dir, img['src']))\n            img['src'] = durl_img\n        return soup.prettify()\n\n\ndef html_to_dataurl(html_file):\n    return dataurl(compact_html(html_file), mime='text/html')\n\nif __name__ == \"__main__\":\n    args = docopt(__doc__, version='1.0')\n    filename = args.get('--input')\n\n    # unzipping the archive\n    if Path(filename).ext == '.zip':\n        cmd = [\"unzip\", filename, \"-d\", \"./unzip\"]\n        call(cmd)\n\n        if args.get('--select'):\n            selected_file = args.get('--select')\n            filepath = \"./unzip/\" + args.get('--select')\n            if os.path.isfile(filepath):\n                html_file = filepath\n                b64_html = selected_file + '.b64html'\n            else:\n                raise Exception(\"File not present!\")\n        else:\n            html_file = check_output([\"find\", \"./unzip\", \"-iname\", \"*.html\"]).split('\\n')[:-1]\n            if len(html_file) == 1:\n                b64_html = Path(filename).namebase + '.b64html'\n                html_file = html_file[0]                                # conversion from list to string\n            else:\n                b64_html = [x.split('/')[-1] + '.b64html' for x in html_file]\n    else:\n        html_file = filename\n        b64_html = Path(filename).namebase + '.b64html'\n\n    # check if we need to process single or list of html files. if it is a single file then html_file is type string\n    if type(html_file) is str:\n        with open(b64_html, 'wa') as fp:\n            fp.write(html_to_dataurl(html_file))\n    elif type(b64_html) is list:\n        for i, elem in enumerate(b64_html):\n            with open(elem, 'wa') as fp:\n                print html_file[i]\n                fp.write(html_to_dataurl(html_file[i]))\n    else:\n        raise Exception('This is not good.')",
                "filename": "sbg_html_to_b64.py"
              }
            ]
          }
        ],
        "x": 207.00004224479255,
        "sbg:toolkitVersion": "1.0",
        "arguments": [],
        "sbg:validationErrors": [],
        "cwlVersion": "sbg:draft-2",
        "sbg:createdBy": "mladenlSBG",
        "label": "SBG Html2b64",
        "stdout": "",
        "temporaryFailCodes": [],
        "y": 747.0000253021719,
        "sbg:id": "admin/sbg-public-data/sbg-html2b64/6",
        "sbg:cmdPreview": "python sbg_html_to_b64.py",
        "baseCommand": [
          "python",
          "sbg_html_to_b64.py"
        ],
        "id": "admin/sbg-public-data/sbg-html2b64/6",
        "sbg:job": {
          "inputs": {
            "input_file": {
              "class": "File",
              "secondaryFiles": [],
              "size": 0,
              "path": "input_file.ext"
            }
          },
          "allocatedResources": {
            "cpu": 1,
            "mem": 1000
          }
        },
        "sbg:sbgMaintained": false,
        "outputs": [
          {
            "label": "B64html",
            "id": "#b64html",
            "description": "Output file, b64html.",
            "sbg:fileTypes": "HTML, B64HTML",
            "outputBinding": {
              "glob": "*b64html",
              "sbg:metadata": {},
              "sbg:inheritMetadataFrom": "#input_file"
            },
            "type": [
              "null",
              "File"
            ]
          }
        ],
        "sbg:revision": 6,
        "sbg:latestRevision": 6,
        "description": "Tool for converting HTML reports of FastQC, SnpEff, MultiQC (simple report only) and ChimeraScan to b64html so it can easily be displayed on SBG platform.",
        "sbg:projectName": "SBG Public data",
        "class": "CommandLineTool",
        "sbg:image_url": null,
        "sbg:createdOn": 1447773689,
        "sbg:contributors": [
          "djordje_klisic",
          "admin",
          "mladenlSBG"
        ],
        "appUrl": "/public/apps/#tool/admin/sbg-public-data/sbg-html2b64/6",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "mladenlSBG",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1447773689,
            "sbg:revision": 0
          },
          {
            "sbg:modifiedBy": "djordje_klisic",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1459977556,
            "sbg:revision": 1
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "MulitQC, ChimeraScan added",
            "sbg:modifiedOn": 1496321089,
            "sbg:revision": 2
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1496321089,
            "sbg:revision": 3
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1496670366,
            "sbg:revision": 4
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "bug fixed",
            "sbg:modifiedOn": 1496674570,
            "sbg:revision": 5
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1496674570,
            "sbg:revision": 6
          }
        ],
        "sbg:project": "admin/sbg-public-data",
        "sbg:categories": [
          "Converters",
          "Plotting-and-Rendering"
        ],
        "sbg:toolAuthor": "Seven Bridges",
        "sbg:license": "Apache License 2.0",
        "sbg:toolkit": "SBGTools",
        "stdin": "",
        "successCodes": [],
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerPull": "images.sbgenomics.com/medjo/sbg-html:1.0",
            "dockerImageId": "8c35d2a2d8d1"
          },
          {
            "class": "sbg:CPURequirement",
            "value": 1
          },
          {
            "class": "sbg:MemRequirement",
            "value": 1000
          }
        ]
      },
      "scatter": "#SBG_Html2b64.input_file",
      "id": "#SBG_Html2b64"
    },
    {
      "inputs": [
        {
          "id": "#FastQC_1.threads"
        },
        {
          "id": "#FastQC_1.quiet"
        },
        {
          "id": "#FastQC_1.nogroup"
        },
        {
          "id": "#FastQC_1.nano"
        },
        {
          "id": "#FastQC_1.memory_per_job"
        },
        {
          "id": "#FastQC_1.limits_file"
        },
        {
          "id": "#FastQC_1.kmers"
        },
        {
          "source": [
            "#Fqtrim_0_9_5.trimmed_reads"
          ],
          "id": "#FastQC_1.input_fastq"
        },
        {
          "id": "#FastQC_1.format"
        },
        {
          "id": "#FastQC_1.cpus_per_job"
        },
        {
          "id": "#FastQC_1.contaminants_file"
        },
        {
          "id": "#FastQC_1.casava"
        },
        {
          "id": "#FastQC_1.adapters_file"
        }
      ],
      "outputs": [
        {
          "id": "#FastQC_1.report_zip"
        }
      ],
      "sbg:x": 376.00009199977046,
      "sbg:y": 615.1563199185775,
      "run": {
        "inputs": [
          {
            "sbg:toolDefaultValue": "1",
            "sbg:altPrefix": "-t",
            "label": "Threads",
            "description": "Specifies the number of files which can be processed simultaneously.  Each thread will be allocated 250MB of memory so you shouldn't run more threads than your available memory will cope with, and not more than 6 threads on a 32 bit machine.",
            "sbg:category": "Options",
            "inputBinding": {
              "prefix": "--threads",
              "sbg:cmdInclude": true,
              "valueFrom": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n//if \"threads\" is not specified\n//number of threads is determined based on number of inputs\n  if (! $job.inputs.threads){\n    $job.inputs.threads = [].concat($job.inputs.input_fastq).length\n  }\n  return Math.min($job.inputs.threads,7)\n}"
              },
              "separate": true
            },
            "id": "#threads",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:altPrefix": "-q",
            "label": "Quiet",
            "description": "Supress all progress messages on stdout and only report errors.",
            "sbg:category": "Options",
            "inputBinding": {
              "prefix": "--quiet",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#quiet",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Nogroup",
            "description": "Disable grouping of bases for reads >50bp. All reports will show data for every base in the read.  WARNING: Using this option will cause fastqc to crash and burn if you use it on really long reads, and your plots may end up a ridiculous size. You have been warned.",
            "sbg:category": "Options",
            "inputBinding": {
              "prefix": "--nogroup",
              "sbg:cmdInclude": true,
              "separate": false
            },
            "id": "#nogroup",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Nano",
            "description": "Files come from naopore sequences and are in fast5 format. In this mode you can pass in directories to process and the program will take in all fast5 files within those directories and produce a single output file from the sequences found in all files.",
            "sbg:category": "Options",
            "inputBinding": {
              "prefix": "--nano",
              "sbg:cmdInclude": true,
              "separate": false
            },
            "id": "#nano",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "Determined by the number of input files",
            "label": "Amount of memory allocated per job execution.",
            "description": "Amount of memory allocated per execution of FastQC job.",
            "sbg:category": "Execution parameters",
            "id": "#memory_per_job",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:altPrefix": "-l",
            "label": "Limits",
            "description": "Specifies a non-default file which contains a set of criteria which will be used to determine the warn/error limits for the various modules.  This file can also be used to selectively remove some modules from the output all together.  The format needs to mirror the default limits.txt file found in the Configuration folder.",
            "sbg:category": "File inputs",
            "sbg:fileTypes": "TXT",
            "inputBinding": {
              "prefix": "--limits",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#limits_file",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          },
          {
            "sbg:toolDefaultValue": "7",
            "sbg:altPrefix": "-f",
            "label": "Kmers",
            "description": "Specifies the length of Kmer to look for in the Kmer content module. Specified Kmer length must be between 2 and 10. Default length is 7 if not specified.",
            "sbg:category": "Options",
            "inputBinding": {
              "prefix": "--kmers",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#kmers",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Input file",
            "description": "Input file.",
            "sbg:category": "File inputs",
            "sbg:fileTypes": "FASTQ, FQ, FASTQ.GZ, FQ.GZ, BAM, SAM",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "position": 100,
              "itemSeparator": null
            },
            "id": "#input_fastq",
            "required": true,
            "type": [
              {
                "items": "File",
                "name": "input_fastq",
                "type": "array"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "FASTQ",
            "sbg:altPrefix": "-f",
            "label": "Format",
            "description": "Bypasses the normal sequence file format detection and forces the program to use the specified format.  Valid formats are BAM, SAM, BAM_mapped, SAM_mapped and FASTQ.",
            "sbg:category": "Options",
            "inputBinding": {
              "prefix": "--format",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#format",
            "required": false,
            "type": [
              "null",
              {
                "symbols": [
                  "bam",
                  "sam",
                  "bam_mapped",
                  "sam_mapped",
                  "fastq"
                ],
                "name": "format",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "Determined by the number of input files",
            "label": "Number of CPUs.",
            "description": "Number of CPUs to be allocated per execution of FastQC.",
            "sbg:category": "Execution parameters",
            "id": "#cpus_per_job",
            "required": false,
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:altPrefix": "-c",
            "label": "Contaminants",
            "description": "Specifies a non-default file which contains the list of contaminants to screen overrepresented sequences against. The file must contain sets of named contaminants in the form name[tab]sequence.  Lines prefixed with a hash will be ignored.",
            "sbg:category": "File inputs",
            "sbg:fileTypes": "TXT",
            "inputBinding": {
              "prefix": "--contaminants",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#contaminants_file",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          },
          {
            "label": "Casava",
            "description": "Files come from raw casava output. Files in the same sample group (differing only by the group number) will be analysed as a set rather than individually. Sequences with the filter flag set in the header will be excluded from the analysis. Files must have the same names given to them by casava (including being gzipped and ending with .gz) otherwise they won't be grouped together correctly.",
            "sbg:category": "Options",
            "inputBinding": {
              "prefix": "--casava",
              "sbg:cmdInclude": true,
              "separate": false
            },
            "id": "#casava",
            "required": false,
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:altPrefix": "-a",
            "label": "Adapters",
            "description": "Specifies a non-default file which contains the list of adapter sequences which will be explicity searched against the library. The file must contain sets of named adapters in the form name[tab]sequence.  Lines prefixed with a hash will be ignored.",
            "sbg:category": "File inputs",
            "sbg:fileTypes": "TXT",
            "inputBinding": {
              "prefix": "--adapters",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#adapters_file",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          }
        ],
        "sbg:revisionNotes": "* Fixed the JS expression for the CPU and Memory allocation\n* Added cpus_per_job and memory_per_job parameters\n* Removed default version for format, so the tool can handle combinations of file formats",
        "sbg:modifiedOn": 1493298709,
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ]
          }
        ],
        "x": 376.00009199977046,
        "sbg:toolkitVersion": "0.11.4",
        "arguments": [
          {
            "prefix": "",
            "valueFrom": "--noextract",
            "separate": true
          },
          {
            "prefix": "--outdir",
            "valueFrom": ".",
            "separate": true
          }
        ],
        "sbg:validationErrors": [],
        "cwlVersion": "sbg:draft-2",
        "sbg:createdBy": "mladenlSBG",
        "label": "FastQC",
        "sbg:modifiedBy": "admin",
        "temporaryFailCodes": [],
        "y": 615.1563199185775,
        "sbg:id": "admin/sbg-public-data/fastqc-0-11-4/8",
        "sbg:cmdPreview": "fastqc  --noextract --outdir .  /path/to/input_fastq-1.fastq  /path/to/input_fastq-2.fastq",
        "baseCommand": [
          "fastqc"
        ],
        "id": "admin/sbg-public-data/fastqc-0-11-4/8",
        "sbg:job": {
          "inputs": {
            "format": null,
            "input_fastq": [
              {
                "class": "File",
                "secondaryFiles": [],
                "size": 0,
                "path": "/path/to/input_fastq-1.fastq"
              },
              {
                "class": "File",
                "secondaryFiles": [],
                "size": 0,
                "path": "/path/to/input_fastq-2.fastq"
              }
            ],
            "cpus_per_job": null,
            "memory_per_job": null,
            "quiet": true,
            "threads": null
          },
          "allocatedResources": {
            "cpu": 2,
            "mem": 1624
          }
        },
        "sbg:sbgMaintained": false,
        "outputs": [
          {
            "label": "Report zip",
            "id": "#report_zip",
            "description": "Zip archive of the report.",
            "sbg:fileTypes": "ZIP",
            "outputBinding": {
              "glob": "*_fastqc.zip",
              "sbg:metadata": {
                "__inherit__": "input_fastq"
              },
              "sbg:inheritMetadataFrom": "#input_fastq"
            },
            "type": [
              "null",
              {
                "items": "File",
                "name": "report_zip",
                "type": "array"
              }
            ]
          }
        ],
        "sbg:links": [
          {
            "label": "Homepage",
            "id": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
          },
          {
            "label": "Source Code",
            "id": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/fastqc_v0.11.4_source.zip"
          },
          {
            "label": "Wiki",
            "id": "https://wiki.hpcc.msu.edu/display/Bioinfo/FastQC+Tutorial"
          },
          {
            "label": "Download",
            "id": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/fastqc_v0.11.4.zip"
          },
          {
            "label": "Publication",
            "id": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc"
          }
        ],
        "sbg:revision": 8,
        "sbg:latestRevision": 8,
        "description": "FastQC reads a set of sequence files and produces a quality control (QC) report from each one. These reports consist of a number of different modules, each of which will help identify a different type of potential problem in your data. \n\nSince it's necessary to convert the tool report in order to show them on Seven Bridges platform, it's recommended to use [FastQC Analysis workflow instead](https://igor.sbgenomics.com/public/apps#admin/sbg-public-data/fastqc-analysis/). \n\nFastQC is a tool which takes a FASTQ file and runs a series of tests on it to generate a comprehensive QC report.  This report will tell you if there is anything unusual about your sequence.  Each test is flagged as a pass, warning, or fail depending on how far it departs from what you would expect from a normal large dataset with no significant biases.  It is important to stress that warnings or even failures do not necessarily mean that there is a problem with your data, only that it is unusual.  It is possible that the biological nature of your sample means that you would expect this particular bias in your results.\n\n### Common Issues:\n\nOutput of the tool is ZIP archive. In order to view report on Seven Bridges platform, you can use SBG Html2b64 tool. It is advised to scatter SBG Html2b64 so it would be able to process an array of files. The example can be seen in [FastQC Analysis workflow](https://igor.sbgenomics.com/public/apps#admin/sbg-public-data/fastqc-analysis/) which you can also use instead of this tool.",
        "sbg:projectName": "SBG Public data",
        "class": "CommandLineTool",
        "sbg:image_url": null,
        "successCodes": [],
        "sbg:contributors": [
          "djordje_klisic",
          "admin",
          "mladenlSBG"
        ],
        "stdout": "",
        "sbg:categories": [
          "FASTQ-Processing",
          "Quality-Control",
          "Quantification"
        ],
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "mladenlSBG",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1447773725,
            "sbg:revision": 0
          },
          {
            "sbg:modifiedBy": "djordje_klisic",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1459957440,
            "sbg:revision": 1
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1471861482,
            "sbg:revision": 2
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "Input categories added.",
            "sbg:modifiedOn": 1476440178,
            "sbg:revision": 3
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "FASTQ input changed from single file to array. Added better thread handling. \n\nIMPORTANT NOTICE: If updating this tool in existing workflow, it's necessary to REMOVE SCATTER (uncheck it) from input_fastq or it might break the pipeline.",
            "sbg:modifiedOn": 1476440178,
            "sbg:revision": 4
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "FASTQ input changed from single file to array. Added better thread handling.\n\nIMPORTANT NOTICE: If updating this tool in existing workflow, it's necessary to REMOVE SCATTER (uncheck it) from input_fastq or it might break the pipeline.",
            "sbg:modifiedOn": 1476440178,
            "sbg:revision": 5
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "IMPORTANT NOTICE: If updating this tool in existing workflow, it's necessary to REMOVE SCATTER (uncheck it) from input_fastq or it might break the pipeline.\"\n\nAdded automatised handling of BAM and SAM files. Also, added security measures for better automated threading handling.",
            "sbg:modifiedOn": 1489067520,
            "sbg:revision": 6
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "Changed the file types of limits, adapters and contaminants files to be TXT, they have to be in format name[tab]sequence. Format should be similar to the one in the Configuration folder provided with FastQC, txt files.\n\n\"IMPORTANT NOTICE: If updating this tool in existing workflow, it's necessary to REMOVE SCATTER (uncheck it) from input_fastq or it might break the pipeline.\"",
            "sbg:modifiedOn": 1489067520,
            "sbg:revision": 7
          },
          {
            "sbg:modifiedBy": "admin",
            "sbg:revisionNotes": "* Fixed the JS expression for the CPU and Memory allocation\n* Added cpus_per_job and memory_per_job parameters\n* Removed default version for format, so the tool can handle combinations of file formats",
            "sbg:modifiedOn": 1493298709,
            "sbg:revision": 8
          }
        ],
        "sbg:project": "admin/sbg-public-data",
        "appUrl": "/public/apps/#tool/admin/sbg-public-data/fastqc-0-11-4/8",
        "sbg:toolAuthor": "Babraham Institute",
        "sbg:license": "GNU General Public License v3.0 only",
        "sbg:toolkit": "FastQC",
        "stdin": "",
        "sbg:createdOn": 1447773725,
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerPull": "images.sbgenomics.com/mladenlsbg/fastqc:0.11.4",
            "dockerImageId": "759c4c8fbafd"
          },
          {
            "class": "sbg:CPURequirement",
            "value": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  // if cpus_per_job is set, it takes precedence\n  if ($job.inputs.cpus_per_job) {\n    return $job.inputs.cpus_per_job \n  }\n  // if threads parameter is set, the number of CPUs is set based on that parametere\n  else if ($job.inputs.threads) {\n    return $job.inputs.threads\n  }\n  // else the number of CPUs is determined by the number of input files, up to 7 -- default\n  else return Math.min([].concat($job.inputs.input_fastq).length,7)\n}"
            }
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  // if memory_per_job is set, it takes precedence\n  if ($job.inputs.memory_per_job){\n    return $job.inputs.memory_per_job\n  }\n  // if threads parameter is set, memory req is set based on the number of threads\n  else if ($job.inputs.threads){\n    return 1024 + 300*$job.inputs.threads\n  }\n  // else the memory req is determined by the number of input files, up to 7 -- default\n  else return (1024 + 300*Math.min([].concat($job.inputs.input_fastq).length,7))\n}\n\n"
            }
          }
        ]
      },
      "scatter": "#FastQC_1.input_fastq",
      "id": "#FastQC_1"
    },
    {
      "inputs": [
        {
          "source": [
            "#GATK_HaplotypeCaller.vcf_output"
          ],
          "id": "#GATK_VariantFiltration_1.variants"
        },
        {
          "id": "#GATK_VariantFiltration_1.variant_index_type"
        },
        {
          "id": "#GATK_VariantFiltration_1.variant_index_parameter"
        },
        {
          "id": "#GATK_VariantFiltration_1.validation_strictness"
        },
        {
          "id": "#GATK_VariantFiltration_1.use_original_qualities"
        },
        {
          "id": "#GATK_VariantFiltration_1.use_legacy_downsampler"
        },
        {
          "id": "#GATK_VariantFiltration_1.unsafe"
        },
        {
          "id": "#GATK_VariantFiltration_1.threads_per_job"
        },
        {
          "id": "#GATK_VariantFiltration_1.tag"
        },
        {
          "id": "#GATK_VariantFiltration_1.sites_only"
        },
        {
          "id": "#GATK_VariantFiltration_1.simplify_bam"
        },
        {
          "id": "#GATK_VariantFiltration_1.show_bam_list"
        },
        {
          "id": "#GATK_VariantFiltration_1.sample_rename_mapping_file"
        },
        {
          "id": "#GATK_VariantFiltration_1.remove_program_records"
        },
        {
          "source": [
            "#SBG_FASTA_Indices.fasta_reference"
          ],
          "id": "#GATK_VariantFiltration_1.reference"
        },
        {
          "id": "#GATK_VariantFiltration_1.refactor_NDN_cigar_string"
        },
        {
          "id": "#GATK_VariantFiltration_1.read_group_black_list"
        },
        {
          "id": "#GATK_VariantFiltration_1.read_filter"
        },
        {
          "id": "#GATK_VariantFiltration_1.quantize_quals"
        },
        {
          "id": "#GATK_VariantFiltration_1.preserve_qscores_less_than"
        },
        {
          "id": "#GATK_VariantFiltration_1.phone_home"
        },
        {
          "id": "#GATK_VariantFiltration_1.performance_log"
        },
        {
          "id": "#GATK_VariantFiltration_1.pedigree_validation_type"
        },
        {
          "id": "#GATK_VariantFiltration_1.pedigree_string"
        },
        {
          "id": "#GATK_VariantFiltration_1.pedigree"
        },
        {
          "id": "#GATK_VariantFiltration_1.num_bam_file_handles"
        },
        {
          "id": "#GATK_VariantFiltration_1.non_deterministic_random_seed"
        },
        {
          "id": "#GATK_VariantFiltration_1.no_call"
        },
        {
          "id": "#GATK_VariantFiltration_1.never_trim_vcf_format_field"
        },
        {
          "id": "#GATK_VariantFiltration_1.missing_values_in_expressions_should_evaluate_as_failing"
        },
        {
          "id": "#GATK_VariantFiltration_1.memory_per_job"
        },
        {
          "id": "#GATK_VariantFiltration_1.memory_overhead_per_job"
        },
        {
          "id": "#GATK_VariantFiltration_1.max_runtime_units"
        },
        {
          "id": "#GATK_VariantFiltration_1.max_runtime"
        },
        {
          "id": "#GATK_VariantFiltration_1.mask_name"
        },
        {
          "id": "#GATK_VariantFiltration_1.mask_extension"
        },
        {
          "id": "#GATK_VariantFiltration_1.mask"
        },
        {
          "id": "#GATK_VariantFiltration_1.keep_program_records"
        },
        {
          "id": "#GATK_VariantFiltration_1.invert_selection"
        },
        {
          "id": "#GATK_VariantFiltration_1.invert_criteria"
        },
        {
          "id": "#GATK_VariantFiltration_1.invalidate_previous_filters"
        },
        {
          "id": "#GATK_VariantFiltration_1.intervals_file"
        },
        {
          "id": "#GATK_VariantFiltration_1.intervals"
        },
        {
          "id": "#GATK_VariantFiltration_1.interval_set_rule"
        },
        {
          "id": "#GATK_VariantFiltration_1.interval_padding"
        },
        {
          "id": "#GATK_VariantFiltration_1.interval_merging"
        },
        {
          "id": "#GATK_VariantFiltration_1.global_q_score_prior"
        },
        {
          "id": "#GATK_VariantFiltration_1.genotype_filter_name"
        },
        {
          "id": "#GATK_VariantFiltration_1.genotype_filter_expression"
        },
        {
          "id": "#GATK_VariantFiltration_1.generate_md5"
        },
        {
          "id": "#GATK_VariantFiltration_1.gatk_key"
        },
        {
          "id": "#GATK_VariantFiltration_1.fix_misencoded_quals"
        },
        {
          "id": "#GATK_VariantFiltration_1.filter_not_in_mask"
        },
        {
          "id": "#GATK_VariantFiltration_1.filter_name",
          "default": [
            "LowDepth",
            "LowQuality",
            "Lowconfidence"
          ]
        },
        {
          "id": "#GATK_VariantFiltration_1.filter_expression",
          "default": [
            "DP<10.0",
            "QUAL<20",
            "QD<5.0"
          ]
        },
        {
          "id": "#GATK_VariantFiltration_1.exclude_intervals"
        },
        {
          "id": "#GATK_VariantFiltration_1.emit_original_quals"
        },
        {
          "id": "#GATK_VariantFiltration_1.downsampling_type"
        },
        {
          "id": "#GATK_VariantFiltration_1.downsample_to_fraction"
        },
        {
          "id": "#GATK_VariantFiltration_1.downsample_to_coverage"
        },
        {
          "id": "#GATK_VariantFiltration_1.disable_read_filter"
        },
        {
          "id": "#GATK_VariantFiltration_1.disable_radnomization"
        },
        {
          "id": "#GATK_VariantFiltration_1.disable_indel_quals"
        },
        {
          "id": "#GATK_VariantFiltration_1.disable_bam_indexing"
        },
        {
          "id": "#GATK_VariantFiltration_1.disable_auto_index"
        },
        {
          "id": "#GATK_VariantFiltration_1.default_base_qualities"
        },
        {
          "id": "#GATK_VariantFiltration_1.cpu_per_job"
        },
        {
          "id": "#GATK_VariantFiltration_1.cluster_window_size"
        },
        {
          "id": "#GATK_VariantFiltration_1.cluster_size"
        },
        {
          "id": "#GATK_VariantFiltration_1.bqsr"
        },
        {
          "id": "#GATK_VariantFiltration_1.baq_gap_open_penalty"
        },
        {
          "id": "#GATK_VariantFiltration_1.baq"
        },
        {
          "id": "#GATK_VariantFiltration_1.bam_compression"
        },
        {
          "id": "#GATK_VariantFiltration_1.allow_potentailly_misencoded_quals"
        }
      ],
      "outputs": [
        {
          "id": "#GATK_VariantFiltration_1.filtered_vcf"
        }
      ],
      "sbg:x": 1295,
      "run": {
        "inputs": [
          {
            "sbg:altPrefix": "-V",
            "label": "Variants",
            "description": "Input VCF file.",
            "sbg:category": "Input Files",
            "sbg:fileTypes": "VCF",
            "inputBinding": {
              "prefix": "--variant",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#variants",
            "required": true,
            "type": [
              {
                "items": "File",
                "type": "array"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "sbg:altPrefix": "-variant_index_type",
            "label": "Variant index type",
            "description": "Type of IndexCreator to use for VCF/BCF indices.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--variant_index_type",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#variant_index_type",
            "type": [
              "null",
              {
                "symbols": [
                  "DYNAMIC_SEEK",
                  "DYNAMIC_SIZE",
                  "LINEAR",
                  "INTERVAL"
                ],
                "name": "variant_index_type",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "-1",
            "sbg:altPrefix": "-variant_index_parameter",
            "label": "Variant index parameter",
            "description": "Parameter to pass to the VCF/BCF IndexCreator.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--variant_index_parameter",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#variant_index_parameter",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "SILENT",
            "sbg:altPrefix": "-S",
            "label": "Validation Strictness",
            "description": "How strict should we be with validation.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--validation_strictness",
              "itemSeparator": " ",
              "valueFrom": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  if (!$job.inputs.validation_strictness){\n  \treturn 'SILENT'\n  }\n  else\n    return $job.inputs.validation_strictness\n}"
              }
            },
            "id": "#validation_strictness",
            "type": [
              "null",
              {
                "symbols": [
                  "SILENT",
                  "LENIENT",
                  "STRICT"
                ],
                "name": "validation_strictness",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "sbg:altPrefix": "-OQ",
            "label": "Use Original Qualities",
            "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--useOriginalQualities",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#use_original_qualities",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "sbg:altPrefix": "-use_legacy_downsampler",
            "label": "Use Legacy Downsampler",
            "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--use_legacy_downsampler",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#use_legacy_downsampler",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Unsafe",
            "id": "#unsafe",
            "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--unsafe",
              "itemSeparator": " ",
              "valueFrom": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  if (!$job.inputs.unsafe){\n  \treturn 'LENIENT_VCF_PROCESSING'\n  }\n  else\n    return $job.inputs.unsafe\n}"
              }
            },
            "sbg:altPrefix": "-U",
            "type": [
              "null",
              {
                "symbols": [
                  "ALLOW_UNINDEXED_BAM",
                  "ALLOW_UNSET_BAM_SORT_ORDER",
                  "NO_READ_ORDER_VERIFICATION",
                  "ALLOW_SEQ_DICT_INCOMPATIBILITY",
                  "LENIENT_VCF_PROCESSING",
                  "ALL",
                  "ALLOW_N_CIGAR_READS"
                ],
                "name": "unsafe",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "4",
            "label": "Threads per job",
            "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used.",
            "sbg:category": "Execution",
            "type": [
              "null",
              "int"
            ],
            "sbg:altPrefix": null,
            "id": "#threads_per_job"
          },
          {
            "sbg:toolDefaultValue": "",
            "sbg:altPrefix": "-tag",
            "label": "Tag",
            "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--tag",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#tag",
            "type": [
              "null",
              "string"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "sbg:altPrefix": "-sites_only",
            "label": "Siteslo only",
            "description": "Just output sites without genotypes (i.e. only the first 8 columns of the VCF).",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--sites_only",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#sites_only",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "sbg:altPrefix": "-simplifyBAM",
            "label": "Simplify bam",
            "description": "If provided, output BAM files will be simplified to include just key reads for downstream variation discovery analyses (removing duplicates, PF-, non-primary reads), as well stripping all extended tags from the kept reads except the read group identifier.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--simplifyBAM",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#simplify_bam",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "sbg:altPrefix": "",
            "label": "BAM list log entry",
            "description": "Emit a log entry (level INFO) containing the full list of sequence data files to be includedin the analysis (including files inside .bam.list files).",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--showFullBamList",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#show_bam_list",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "sbg:altPrefix": "-sample_rename_mapping_file",
            "label": "Sample rename mapping file",
            "description": "Rename sample IDs on-the-fly at runtime using the provided mapping file.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--sample_rename_mapping_file",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#sample_rename_mapping_file",
            "type": [
              "null",
              "string"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "sbg:altPrefix": "-rpr",
            "label": "Remove Program Records",
            "description": "Should we override the Walker's default and remove program records from the SAM header.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--remove_program_records",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#remove_program_records",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:altPrefix": "-R",
            "label": "Reference Genome",
            "description": "Reference Genome in FASTA format.",
            "sbg:category": "Input Files",
            "sbg:fileTypes": "FASTA, FA",
            "inputBinding": {
              "prefix": "--reference_sequence",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#reference",
            "required": true,
            "type": [
              "File"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "sbg:altPrefix": "-fixNDN",
            "label": "Refactor ndn cigar string",
            "description": "Refactor cigar string with NDN elements to one element.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--refactor_NDN_cigar_string",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#refactor_NDN_cigar_string",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "[]",
            "sbg:altPrefix": "-rgbl",
            "label": "Read Group Black List",
            "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--read_group_black_list",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#read_group_black_list",
            "type": [
              "null",
              {
                "items": "string",
                "type": "array"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "[]",
            "sbg:altPrefix": "-rf",
            "label": "Read Filter",
            "description": "Specify filtration criteria to apply to each read individually.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--read_filter",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#read_filter",
            "type": [
              "null",
              {
                "items": {
                  "symbols": [
                    "BadCigarFilter",
                    "BadMateFilter",
                    "CountingFilteringIterator.CountingReadFilter",
                    "DuplicateReadFilter",
                    "FailsVendorQualityCheckFilter",
                    "HCMappingQualityFilter",
                    "LibraryReadFilter",
                    "MalformedReadFilter",
                    "MappingQualityFilter",
                    "MappingQualityUnavailableFilter",
                    "MappingQualityZeroFilter",
                    "MateSameStrandFilter",
                    "MaxInsertSizeFilter",
                    "MissingReadGroupFilter",
                    "NoOriginalQualityScoresFilter",
                    "NotPrimaryAlignmentFilter",
                    "OverclippedReadFilter",
                    "Platform454Filter",
                    "PlatformFilter",
                    "PlatformUnitFilter",
                    "ReadGroupBlackListFilter",
                    "ReadLengthFilter",
                    "ReadNameFilter",
                    "ReadStrandFilter",
                    "ReassignMappingQualityFilter",
                    "ReassignOneMappingQualityFilter",
                    "SampleFilter",
                    "SingleReadGroupFilter",
                    "UnmappedReadFilter"
                  ],
                  "name": "read_filter",
                  "type": "enum"
                },
                "type": "array"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "sbg:altPrefix": "-qq",
            "label": "Quantize BQ Scores",
            "description": "Quantize quality scores to a given number of levels (with -BQSR).",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--quantize_quals",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#quantize_quals",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "6",
            "sbg:altPrefix": "-preserveQ",
            "label": "Preserve Qscores Less Than",
            "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR).",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--preserve_qscores_less_than",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#preserve_qscores_less_than",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "AWS",
            "sbg:altPrefix": "-et",
            "label": "Phone Home",
            "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--phone_home",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#phone_home",
            "type": [
              "null",
              {
                "symbols": [
                  "NO_ET",
                  "AWS",
                  "STDOUT"
                ],
                "name": "phone_home",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "sbg:altPrefix": "-PF",
            "label": "Runtime performance log",
            "description": "Write GATK runtime performance long. Specify the file name of this log.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--performanceLog",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#performance_log",
            "type": [
              "null",
              "string"
            ]
          },
          {
            "sbg:toolDefaultValue": "STRICT",
            "sbg:altPrefix": "-pedValidationType",
            "label": "Pedigree Validation Type",
            "description": "How strict should we be in validating the pedigree information?.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--pedigreeValidationType",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#pedigree_validation_type",
            "type": [
              "null",
              {
                "symbols": [
                  "STRICT",
                  "SILENT"
                ],
                "name": "pedigree_validation_type",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "[]",
            "sbg:altPrefix": "-pedString",
            "label": "Pedigree String",
            "description": "Pedigree string for samples.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--pedigreeString",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#pedigree_string",
            "type": [
              "null",
              {
                "items": "string",
                "type": "array"
              }
            ]
          },
          {
            "sbg:altPrefix": "-ped",
            "label": "Pedigree file",
            "description": "Pedigree file",
            "sbg:category": "Variant Filtration",
            "sbg:fileTypes": "PED, TXT",
            "inputBinding": {
              "prefix": "--pedigree",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#pedigree",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "sbg:altPrefix": "-bfh",
            "label": "Num bam file handles",
            "description": "Total number of BAM file handles to keep open simultaneously.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--num_bam_file_handles",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#num_bam_file_handles",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "sbg:altPrefix": "-ndrs",
            "label": "Non Deterministic Random Seed",
            "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--nonDeterministicRandomSeed",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#non_deterministic_random_seed",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Set Genotypes to NoCall",
            "description": "Set filtered genotypes to NoCall",
            "sbg:category": "Variant Filtration",
            "inputBinding": {
              "prefix": "--setFilteredGtToNoCall",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#no_call",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "sbg:altPrefix": "-writeFullFormat",
            "label": "Never trim vcf format field",
            "description": "Always output all the records in VCF FORMAT fields, even if some are missing.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--never_trim_vcf_format_field",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#never_trim_vcf_format_field",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "sbg:altPrefix": null,
            "label": "Missing Values In Expressions Should Evaluate As Failing",
            "description": "When evaluating the JEXL expressions, missing values should be considered failing the expression.",
            "sbg:category": "Variant Filtration",
            "inputBinding": {
              "prefix": "--missingValuesInExpressionsShouldEvaluateAsFailing",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#missing_values_in_expressions_should_evaluate_as_failing",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "2048",
            "label": "Memory per job",
            "description": "Amount of RAM memory to be used per job.",
            "sbg:category": "Execution",
            "type": [
              "null",
              "int"
            ],
            "sbg:altPrefix": null,
            "id": "#memory_per_job"
          },
          {
            "sbg:toolDefaultValue": "0",
            "label": "Memory overhead per job",
            "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
            "sbg:category": "Execution",
            "id": "#memory_overhead_per_job",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "MINUTES",
            "sbg:altPrefix": "-maxRuntimeUnits",
            "label": "Max Runtime Units",
            "description": "The TimeUnit for maxRuntime.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--maxRuntimeUnits",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#max_runtime_units",
            "type": [
              "null",
              {
                "symbols": [
                  "NANOSECONDS",
                  "MICROSECONDS",
                  "MILLISECONDS",
                  "SECONDS",
                  "MINUTES",
                  "HOURS",
                  "DAYS"
                ],
                "name": "max_runtime_units",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "-1",
            "sbg:altPrefix": "-maxRuntime",
            "label": "Max Runtime",
            "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--maxRuntime",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#max_runtime",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "Mask",
            "sbg:altPrefix": "-maskName",
            "label": "Mask Name",
            "description": "The text to put in the FILTER field if a 'mask' rod is provided and overlaps with a variant call.",
            "sbg:category": "Variant Filtration",
            "inputBinding": {
              "prefix": "--maskName",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#mask_name",
            "type": [
              "null",
              "string"
            ]
          },
          {
            "sbg:toolDefaultValue": "0",
            "sbg:altPrefix": "-maskExtend",
            "label": "Mask Extension",
            "description": "How many bases beyond records from a provided 'mask' rod should variants be filtered.",
            "sbg:category": "Variant Filtration",
            "inputBinding": {
              "prefix": "--maskExtension",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#mask_extension",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:altPrefix": "-mask",
            "label": "Mask",
            "description": "Input ROD mask.",
            "sbg:category": "Input Files",
            "sbg:fileTypes": "BCF2, BEAGLE, BED, BEDTABLE, EXAMPLEBINARY, GELITEXT, RAWHAPMAP, REFSEQ, SAMPILEUP, SAMREAD, TABLE, VCF, VCF3",
            "inputBinding": {
              "prefix": "--mask",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#mask",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "sbg:altPrefix": "-kpr",
            "label": "Keep Program Records",
            "description": "Should we override the Walker's default and keep program records from the SAM header.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--keep_program_records",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#keep_program_records",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Invert selection criteria",
            "id": "#invert_selection",
            "description": "Invert the selection criteria for --filterexpression",
            "sbg:category": "Variant Filtration",
            "inputBinding": {
              "prefix": "--invertFilterExpression",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:altPrefix": "-invfilter",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Invert genotype selection criteria",
            "id": "#invert_criteria",
            "description": "Invert the selection criteria for --genotypeFilterExpression",
            "sbg:category": "Variant Filtration",
            "inputBinding": {
              "prefix": "--invertGenotypeFilterExpression",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:altPrefix": "-invG_filter",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "sbg:altPrefix": null,
            "label": "Invalidate Previous Filters",
            "description": "Remove previous filters applied to the VCF.",
            "sbg:category": "Variant Filtration",
            "inputBinding": {
              "prefix": "--invalidatePreviousFilters",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#invalidate_previous_filters",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:altPrefix": "-L",
            "label": "Intervals",
            "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file.",
            "sbg:category": "Input Files",
            "sbg:fileTypes": "TXT, BED, VCF",
            "inputBinding": {
              "prefix": "--intervals",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#intervals_file",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "sbg:altPrefix": "--intervals",
            "label": "Intervals",
            "description": "One or more genomic intervals over which to operate.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "-L",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#intervals",
            "type": [
              "null",
              "string"
            ]
          },
          {
            "sbg:toolDefaultValue": "UNION",
            "sbg:altPrefix": "-isr",
            "label": "Interval Set Rule",
            "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--interval_set_rule",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#interval_set_rule",
            "type": [
              "null",
              {
                "symbols": [
                  "UNION",
                  "INTERSECTION"
                ],
                "name": "interval_set_rule",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "0",
            "sbg:altPrefix": "-ip",
            "label": "Interval Padding",
            "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--interval_padding",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#interval_padding",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "ALL",
            "sbg:altPrefix": "-im",
            "label": "Interval Merging",
            "description": "Indicates the interval merging rule we should use for abutting intervals.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--interval_merging",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#interval_merging",
            "type": [
              "null",
              {
                "symbols": [
                  "ALL",
                  "OVERLAPPING_ONLY"
                ],
                "name": "interval_merging",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "-1.0",
            "sbg:altPrefix": "-globalQScorePrior",
            "label": "Global q score prior",
            "description": "Global Qscore Bayesian prior to use for BQSR.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--globalQScorePrior",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#global_q_score_prior",
            "type": [
              "null",
              "float"
            ]
          },
          {
            "label": "Genotype filter name",
            "id": "#genotype_filter_name",
            "description": "Names to use for the list of sample/genotype filters (must be a 1-to-1 mapping); this name is put in the FILTER field for variants that get filtered",
            "sbg:category": "Variant Filtration",
            "sbg:altPrefix": "-G_filterName",
            "type": [
              "null",
              {
                "items": "string",
                "type": "array"
              }
            ]
          },
          {
            "label": "Genotype filter expression",
            "id": "#genotype_filter_expression",
            "description": "One or more expression used with FORMAT (sample/genotype-level) fields to filter (see documentation guide for more info)",
            "sbg:category": "Variant Filtration",
            "sbg:altPrefix": "-G_filter",
            "type": [
              "null",
              {
                "items": "string",
                "type": "array"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "sbg:altPrefix": "",
            "label": "Generate MD5",
            "description": "Enable on-the-fly creation of md5s for output BAM files.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--generate_md5",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#generate_md5",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:altPrefix": "-K",
            "label": "Gatk key",
            "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
            "sbg:category": "Input Files",
            "sbg:fileTypes": "KEY, LICENSE",
            "inputBinding": {
              "prefix": "--gatk_key",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#gatk_key",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "sbg:altPrefix": "-fixMisencodedQuals",
            "label": "Fix Misencoded Quals",
            "description": "Fix mis-encoded base quality scores.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--fix_misencoded_quality_scores",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#fix_misencoded_quals",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Filter not in mask",
            "id": "#filter_not_in_mask",
            "description": "Filter records Not in given input mask",
            "sbg:category": "Variant Filtration",
            "inputBinding": {
              "prefix": "--filterNotInMask",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "sbg:altPrefix": "-filterNotInMask",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "FIlter name",
            "id": "#filter_name",
            "description": "Names to use for the list of filters",
            "sbg:category": "Variant Filtration",
            "sbg:altPrefix": "-filterName",
            "type": [
              "null",
              {
                "items": "string",
                "type": "array"
              }
            ]
          },
          {
            "label": "Filter expression",
            "id": "#filter_expression",
            "description": "One or more expression used with INFO fields to filter",
            "sbg:category": "Variant Filtration",
            "sbg:altPrefix": "-filter",
            "type": [
              "null",
              {
                "items": "string",
                "type": "array"
              }
            ]
          },
          {
            "sbg:altPrefix": "-XL",
            "label": "Exclude Intervals",
            "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file.",
            "sbg:category": "Input Files",
            "sbg:fileTypes": "TXT, BED, VCF",
            "inputBinding": {
              "prefix": "--excludeIntervals",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#exclude_intervals",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "sbg:altPrefix": "-EOQ",
            "label": "Emit Original Quals",
            "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR).",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--emit_original_quals",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#emit_original_quals",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "sbg:altPrefix": "-dt",
            "label": "Downsampling Type",
            "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--downsampling_type",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#downsampling_type",
            "type": [
              "null",
              {
                "symbols": [
                  "NONE",
                  "ALL_READS",
                  "BY_SAMPLE"
                ],
                "name": "downsampling_type",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "sbg:altPrefix": "-dfrac",
            "label": "Downsample to Fraction",
            "description": "Fraction [0.0-1.0] of reads to downsample to.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--downsample_to_fraction",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#downsample_to_fraction",
            "type": [
              "null",
              "float"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "sbg:altPrefix": "-dcov",
            "label": "Downsample to Coverage",
            "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--downsample_to_coverage",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#downsample_to_coverage",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "sbg:altPrefix": "-drf",
            "label": "Read filter(s) to disable",
            "description": "Read filters to disable. Specify which filter(s) to disable.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--disable_read_filter",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#disable_read_filter",
            "type": [
              "null",
              {
                "symbols": [],
                "name": "disable_read_filter",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "sbg:altPrefix": null,
            "label": "Disable Randomization",
            "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--disableRandomization",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#disable_radnomization",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "sbg:altPrefix": "-DIQ",
            "label": "Disable Indel Quals",
            "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--disable_indel_quals",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#disable_indel_quals",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "sbg:altPrefix": null,
            "label": "Disable bam indexing",
            "description": "Turn off on-the-fly creation of indices for output BAM files.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--disable_bam_indexing",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#disable_bam_indexing",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "sbg:altPrefix": "-d_locking_when_reading_rods",
            "label": "Disable index generation and locking",
            "description": "Disable both auto-generation of index files and index file locking.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--disable_auto_index_creation_and_locking_when_reading_rods",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#disable_auto_index",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "-1",
            "sbg:altPrefix": "-DBQ",
            "label": "Default Base Qualities",
            "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--defaultBaseQualities",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#default_base_qualities",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "1",
            "label": "CPU per job",
            "description": "Number of CPUs per job.",
            "sbg:category": "Execution",
            "type": [
              "null",
              "int"
            ],
            "sbg:altPrefix": null,
            "id": "#cpu_per_job"
          },
          {
            "sbg:toolDefaultValue": "0",
            "sbg:altPrefix": "-window",
            "label": "Cluster Window Size",
            "description": "The window size (in bases) in which to evaluate clustered SNPs.",
            "sbg:category": "Variant Filtration",
            "inputBinding": {
              "prefix": "--clusterWindowSize",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#cluster_window_size",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "3",
            "sbg:altPrefix": "-cluster",
            "label": "Cluster Size",
            "description": "The number of SNPs which make up a cluster.",
            "sbg:category": "Variant Filtration",
            "inputBinding": {
              "prefix": "--clusterSize",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#cluster_size",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:altPrefix": "-bqsr",
            "label": "BQSR file",
            "description": "BQSR file",
            "sbg:category": "Variant Filtration",
            "sbg:fileTypes": "GRP, TXT",
            "inputBinding": {
              "prefix": "--bqsr",
              "sbg:cmdInclude": true,
              "separate": true
            },
            "id": "#bqsr",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          },
          {
            "sbg:toolDefaultValue": "40.0",
            "sbg:altPrefix": "-baqGOP",
            "label": "BAQ Gap Open Penalty",
            "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--baqGapOpenPenalty",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#baq_gap_open_penalty",
            "type": [
              "null",
              "float"
            ]
          },
          {
            "sbg:toolDefaultValue": "OFF",
            "sbg:altPrefix": "-baq",
            "label": "BAQ Calculation Type",
            "description": "Type of BAQ calculation to apply in the engine.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--baq",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#baq",
            "type": [
              "null",
              {
                "symbols": [
                  "OFF",
                  "CALCULATE_AS_NECESSARY",
                  "RECALCULATE"
                ],
                "name": "baq",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "",
            "sbg:altPrefix": "-compress",
            "label": "Bam compression",
            "description": "Compression level to use for writing BAM files (0 - 9, higher is more compressed).",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "--bam_compression",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#bam_compression",
            "type": [
              "null",
              {
                "symbols": [
                  "0",
                  "1",
                  "2",
                  "3",
                  "4",
                  "5",
                  "6",
                  "7",
                  "8",
                  "9"
                ],
                "name": "bam_compression",
                "type": "enum"
              }
            ]
          },
          {
            "sbg:toolDefaultValue": "False",
            "sbg:altPrefix": "--allow_potentially_misencoded_quality_scores",
            "label": "Allow Potentially Misencoded Quals",
            "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.",
            "sbg:category": "GATK General",
            "inputBinding": {
              "prefix": "-allowPotentiallyMisencodedQuals",
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": " "
            },
            "id": "#allow_potentailly_misencoded_quals",
            "type": [
              "null",
              "boolean"
            ]
          }
        ],
        "sbg:modifiedBy": "bogdang",
        "sbg:modifiedOn": 1497886613,
        "stdout": "",
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ]
          }
        ],
        "x": 1295,
        "sbg:toolkitVersion": "3.5",
        "arguments": [
          {
            "prefix": "--out",
            "separate": true,
            "position": 1,
            "valueFrom": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  read_name = [].concat($job.inputs.variants)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  read_namebase = read_name.slice(0, read_name.length-1).join('.')\n  return read_namebase + '.flagged.vcf'\n}"
            }
          },
          {
            "separate": true,
            "valueFrom": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{ \n  if($job.inputs.filter_name && $job.inputs.filter_expression){\n    name = $job.inputs.filter_name\n    expression = $job.inputs.filter_expression\n    filter = []\n    for (i = 0; i < name.length; i++) {\n      filter.push('--filterName \"', name[i], '\" --filterExpression ', '\"', expression[i], '\" ')\n    }\n    return filter.join(\"\").trim()\n  }\n}\n"
            }
          },
          {
            "separate": true,
            "valueFrom": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  if($job.inputs.genotype_filter_name && $job.inputs.genotype_filter_expression){\n    name = $job.inputs.genotype_filter_name\n    expression = $job.inputs.genotype_filter_expression\n    filter = []\n    for (i = 0; i < name.length; i++) {\n      filter.push('--genotypeFilterName \"', name[i], '\" --genotypeFilterExpression ', '\"', expression[i], '\" ')\n    }\n    return filter.join(\"\").trim()\n  }\n}\n"
            }
          }
        ],
        "sbg:toolAuthor": "Broad",
        "sbg:createdBy": "bogdang",
        "label": "GATK VariantFiltration",
        "sbg:validationErrors": [],
        "temporaryFailCodes": [],
        "y": -122,
        "sbg:id": "kb472/wxs-haplotypecaller-test/gatk-variantfiltration/2",
        "cwlVersion": "sbg:draft-2",
        "baseCommand": [
          "java",
          {
            "class": "Expression",
            "engine": "#cwl-js-engine",
            "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }\n  \treturn '-Xmx2048M'\n}"
          },
          "-jar",
          "/opt/GenomeAnalysisTK_3.5-0-g36282e4.jar",
          "--analysis_type",
          "VariantFiltration"
        ],
        "id": "kb472/wxs-haplotypecaller-test/gatk-variantfiltration/2",
        "sbg:job": {
          "inputs": {
            "invert_selection": true,
            "no_call": true,
            "genotype_filter_expression": [],
            "unsafe": null,
            "memory_overhead_per_job": 0,
            "bqsr": {
              "class": "File",
              "secondaryFiles": [],
              "size": 0,
              "path": "/path/to/bqsr.ext"
            },
            "invert_criteria": true,
            "filter_expression": [
              "qd<2",
              "rank>10"
            ],
            "variants": [
              {
                "path": "varaint.vcf"
              }
            ],
            "filter_not_in_mask": true,
            "genotype_filter_name": [],
            "filter_name": [
              "qd",
              "rank"
            ],
            "pedigree": {
              "class": "File",
              "secondaryFiles": [],
              "size": 0,
              "path": "/path/to/pedigree.ext"
            },
            "validation_strictness": null
          },
          "allocatedResources": {
            "cpu": 1,
            "mem": 2048
          }
        },
        "sbg:sbgMaintained": false,
        "outputs": [
          {
            "label": "Filtered VCF",
            "id": "#filtered_vcf",
            "description": "File to which variants should be written.",
            "sbg:fileTypes": "VCF",
            "outputBinding": {
              "glob": "*.vcf",
              "secondaryFiles": [
                ".idx"
              ],
              "sbg:inheritMetadataFrom": "#variants",
              "sbg:metadata": {}
            },
            "type": [
              "File"
            ]
          }
        ],
        "sbg:links": [
          {
            "label": "Homepage",
            "id": "https://www.broadinstitute.org/gatk/index.php"
          },
          {
            "label": "Source code",
            "id": "https://github.com/broadgsa/gatk-protected"
          },
          {
            "label": "Wiki",
            "id": "https://www.broadinstitute.org/gatk/guide/tooldocs/"
          },
          {
            "label": "Download",
            "id": "https://www.broadinstitute.org/gatk/download/"
          },
          {
            "label": "Publication",
            "id": "https://www.broadinstitute.org/gatk/about/#in-the-literature"
          },
          {
            "label": "Documentation",
            "id": "https://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_filters_VariantFiltration.php"
          }
        ],
        "sbg:revision": 2,
        "sbg:latestRevision": 2,
        "description": "###**Overview**  \nThis tool is designed for hard-filtering variant calls based on certain criteria. Records are hard-filtered by changing the value in the FILTER field to something other than PASS. Filtered records will be preserved in the output unless their removal is requested in the command line.  \n\n###**Input**  \nA variant set to filter.  \n\n###**Output**  \nA filtered VCF.  \n\n###**Usage example**  \n\n    java -jar GenomeAnalysisTK.jar \\  \n         -T VariantFiltration \\  \n         -R reference.fasta \\  \n         -o output.vcf \\  \n         --variant input.vcf \\  \n         --filterExpression \"AB < 0.2 || MQ0 > 50\" \\  \n         --filterName \"Nov09filters\" \\  \n         --mask mask.vcf \\  \n         --maskName InDel  \n\n###**IMPORTANT NOTICE**  \n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding *.fai* (fasta index) and *.dict* (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the '***SBG FASTA Indices***' tool within your GATK based workflow before using any of the GATK tools.",
        "sbg:projectName": "WXS haplotypeCaller Test ",
        "class": "CommandLineTool",
        "sbg:image_url": null,
        "sbg:createdOn": 1497885833,
        "sbg:contributors": [
          "bogdang"
        ],
        "sbg:revisionNotes": "added.flagged",
        "sbg:project": "kb472/wxs-haplotypecaller-test",
        "sbg:categories": [
          "VCF-Processing"
        ],
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "successCodes": [],
        "sbg:license": "MIT License",
        "sbg:toolkit": "GATK",
        "sbg:cmdPreview": "java -Xmx2048M -jar /opt/GenomeAnalysisTK_3.5-0-g36282e4.jar --analysis_type VariantFiltration --variant varaint.vcf  --filterName \"qd\" --filterExpression \"qd<2\" --filterName \"rank\" --filterExpression \"rank>10\"   --out varaint.flagged.vcf",
        "stdin": "",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "bogdang",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1497885833,
            "sbg:revision": 0
          },
          {
            "sbg:modifiedBy": "bogdang",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1497885958,
            "sbg:revision": 1
          },
          {
            "sbg:modifiedBy": "bogdang",
            "sbg:revisionNotes": "added.flagged",
            "sbg:modifiedOn": 1497886613,
            "sbg:revision": 2
          }
        ],
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerPull": "images.sbgenomics.com/aleksandar_mihajlovic/gatk3:3.5.0",
            "dockerImageId": "3c3b8e0ed4e5"
          },
          {
            "class": "sbg:CPURequirement",
            "value": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  if($job.inputs.cpu_per_job){\n  \treturn $job.inputs.cpu_per_job\n  }\n  return 1 \n}"
            }
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}"
            }
          }
        ]
      },
      "sbg:y": -122,
      "id": "#GATK_VariantFiltration_1"
    },
    {
      "inputs": [
        {
          "id": "#Sambamba_Index.redundancy"
        },
        {
          "id": "#Sambamba_Index.nthreads"
        },
        {
          "id": "#Sambamba_Index.mem_mb"
        },
        {
          "source": [
            "#Sambamba_Sort.sorted"
          ],
          "id": "#Sambamba_Index.input_bam"
        },
        {
          "id": "#Sambamba_Index.input_bai_file"
        },
        {
          "id": "#Sambamba_Index.cram_input"
        },
        {
          "id": "#Sambamba_Index.check_bins"
        }
      ],
      "outputs": [
        {
          "id": "#Sambamba_Index.indexed_bam"
        },
        {
          "id": "#Sambamba_Index.index"
        }
      ],
      "sbg:x": 883,
      "run": {
        "inputs": [
          {
            "sbg:toolDefaultValue": "TRUE",
            "label": "Output input BAM",
            "description": "Send the input BAM to the output thus creating redundant data.",
            "sbg:category": "Execution",
            "sbg:stageInput": null,
            "id": "#redundancy",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "sbg:toolDefaultValue": "8",
            "sbg:altPrefix": "-t",
            "label": "Number of threads",
            "description": "Number of threads to use.",
            "sbg:category": "Execution",
            "inputBinding": {
              "prefix": "--nthreads=",
              "sbg:cmdInclude": true,
              "valueFrom": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  if (!(typeof $job.inputs.input_bai_file !== \"undefined\"))\n  {\n    if ($job.inputs.nthreads)\n    \treturn $job.inputs.nthreads\n\telse\n    \treturn 8\n  }\n}\n\n"
              },
              "separate": false
            },
            "id": "#nthreads",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "sbg:toolDefaultValue": "1024",
            "label": "Memory in MB",
            "description": "Memory in MB.",
            "sbg:category": "Execution",
            "sbg:stageInput": null,
            "id": "#mem_mb",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Input file",
            "description": "BAM or CRAM file.",
            "sbg:category": "File input",
            "sbg:stageInput": "link",
            "sbg:fileTypes": "BAM, CRAM",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "position": 99,
              "itemSeparator": " ",
              "valueFrom": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  if ((!(typeof $job.inputs.input_bai_file !== \"undefined\")))\n  {\n    return $job.inputs.input_bam.path.split('/').slice(-1)[0]\n  }\n}"
              }
            },
            "id": "#input_bam",
            "required": true,
            "type": [
              "File"
            ]
          },
          {
            "label": "Input BAI(BAM index) file",
            "description": "Input BAI(BAM index) file.",
            "sbg:category": "File input",
            "type": [
              "null",
              "File"
            ],
            "sbg:stageInput": "link",
            "id": "#input_bai_file",
            "required": false,
            "sbg:fileTypes": "BAI"
          },
          {
            "label": "CRAM input",
            "description": "Specify that input is in CRAM format.",
            "sbg:category": "Execution",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "valueFrom": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  if ((!(typeof $job.inputs.input_bai_file !== \"undefined\")) && ($job.inputs.cram_input === true))\n  {\n    return \"--cram-input\" \n  }\n}"
              },
              "itemSeparator": null
            },
            "id": "#cram_input",
            "type": [
              "null",
              "boolean"
            ]
          },
          {
            "label": "Check bins",
            "id": "#check_bins",
            "description": "Check that bins are set correctly.",
            "sbg:category": "Execution",
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "valueFrom": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  if ((!(typeof $job.inputs.input_bai_file !== \"undefined\")) && ($job.inputs.check_bins === true))\n  {\n    return \"--check-bins\" \n  }\n}"
              }
            },
            "sbg:altPrefix": "c",
            "type": [
              "null",
              "boolean"
            ]
          }
        ],
        "sbg:modifiedBy": "bogdang",
        "sbg:modifiedOn": 1497892321,
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ]
          }
        ],
        "x": 883,
        "sbg:toolkitVersion": "0.5.9",
        "arguments": [
          {
            "prefix": "",
            "separate": true,
            "position": 100,
            "valueFrom": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  if ((!(typeof $job.inputs.input_bai_file !== \"undefined\")))\n  {\n  if ($job.inputs.input_bam)\n  {\n    \n    filepath = $job.inputs.input_bam.path\n   \tfilename = filepath.split('/').slice(-1)[0]\n    basename = filename.split('.').slice(0,-1).join('.')\n        \n    index_name = basename.concat(\".indexed.bam.bai\")\n    \n    return index_name + ' && mv ' + filename + ' ' + basename + '.indexed.bam'\n  }\n}\n}\n\n"
            }
          }
        ],
        "sbg:toolAuthor": "Artem Tarasov",
        "cwlVersion": "sbg:draft-2",
        "sbg:createdBy": "bogdang",
        "label": "Sambamba Index",
        "sbg:validationErrors": [],
        "stdout": "",
        "temporaryFailCodes": [],
        "y": -8,
        "sbg:id": "kb472/wxs-haplotypecaller-test/sambamba-index-0-5-9/2",
        "sbg:cmdPreview": "/opt/sambamba_0.5.9/sambamba_v0.5.9 index  SampleName.sorted.bam  SampleName.sorted.indexed.bam.bai && mv SampleName.sorted.bam SampleName.sorted.indexed.bam",
        "baseCommand": [
          {
            "class": "Expression",
            "engine": "#cwl-js-engine",
            "script": "{\n  if (typeof $job.inputs.input_bai_file !== \"undefined\"){\n \treturn\"echo Skipping index step because BAI file is provided on the input.\"\n  }\n  else{\n    return \"/opt/sambamba_0.5.9/sambamba_v0.5.9 index\"\n  }\n}"
          }
        ],
        "id": "kb472/wxs-haplotypecaller-test/sambamba-index-0-5-9/2",
        "sbg:job": {
          "inputs": {
            "mem_mb": 2,
            "nthreads": 4,
            "redundancy": true,
            "check_bins": false,
            "input_bam": {
              "path": "SampleName.sorted.bam"
            },
            "cram_input": false
          },
          "allocatedResources": {
            "cpu": 4,
            "mem": 2
          }
        },
        "sbg:sbgMaintained": false,
        "outputs": [
          {
            "label": "Indexed BAM file",
            "id": "#indexed_bam",
            "description": "Bam file.",
            "sbg:fileTypes": "BAM",
            "outputBinding": {
              "glob": {
                "class": "Expression",
                "engine": "#cwl-js-engine",
                "script": "{\n  if ($job.inputs.redundancy === false) {\n    \n    return ''\n    \n  } else {\n    \n    return '*.indexed.bam'\n    \n  }\n}"
              },
              "secondaryFiles": [
                "^.bai",
                ".bai"
              ],
              "sbg:inheritMetadataFrom": "#input_bam"
            },
            "type": [
              "null",
              "File"
            ]
          },
          {
            "label": "Index file",
            "id": "#index",
            "description": "Indexed file.",
            "sbg:fileTypes": "BAI",
            "outputBinding": {
              "glob": "*.indexed.bai",
              "sbg:inheritMetadataFrom": "#input_bam"
            },
            "type": [
              "null",
              "File"
            ]
          }
        ],
        "sbg:links": [
          {
            "label": "Homepage",
            "id": "http://lomereiter.github.io/sambamba/docs/sambamba-view.html"
          },
          {
            "label": "Source code",
            "id": "https://github.com/lomereiter/sambamba"
          },
          {
            "label": "Wiki",
            "id": "https://github.com/lomereiter/sambamba/wiki"
          },
          {
            "label": "Download",
            "id": "https://github.com/lomereiter/sambamba/releases/tag/v0.5.9"
          },
          {
            "label": "Publication",
            "id": "http://lomereiter.github.io/sambamba/docs/sambamba-view.html"
          }
        ],
        "sbg:revision": 2,
        "sbg:latestRevision": 2,
        "description": "Sambamba Index creates an index for a BAM or CRAM file.",
        "sbg:projectName": "WXS haplotypeCaller Test ",
        "class": "CommandLineTool",
        "sbg:image_url": null,
        "sbg:createdOn": 1497886099,
        "sbg:contributors": [
          "bogdang"
        ],
        "sbg:project": "kb472/wxs-haplotypecaller-test",
        "sbg:categories": [
          "SAM/BAM-Processing",
          "Indexing"
        ],
        "successCodes": [],
        "sbg:license": "GNU General Public License v2.0 only",
        "sbg:toolkit": "Sambamba",
        "stdin": "",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "bogdang",
            "sbg:revisionNotes": "Copy of admin/sbg-public-data/sambamba-index-0-5-9/6",
            "sbg:modifiedOn": 1497886099,
            "sbg:revision": 0
          },
          {
            "sbg:modifiedBy": "bogdang",
            "sbg:revisionNotes": "mv and suffix",
            "sbg:modifiedOn": 1497886453,
            "sbg:revision": 1
          },
          {
            "sbg:modifiedBy": "bogdang",
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1497892321,
            "sbg:revision": 2
          }
        ],
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerImageId": "59e577b13d5d",
            "dockerPull": "images.sbgenomics.com/mladenlsbg/sambamba:0.5.9"
          },
          {
            "class": "sbg:CPURequirement",
            "value": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  if (!(typeof $job.inputs.input_bai_file !== \"undefined\"))\n  {\n    if ($job.inputs.nthreads)\n    \treturn $job.inputs.nthreads\n\telse\n    \treturn 8\n  }\n}"
            }
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n  if ($job.inputs.mem_mb) {\n    \n    return $job.inputs.mem_mb\n    \n  } else {\n    \n    return 1024\n    \n  }\n  \n}"
            }
          }
        ]
      },
      "sbg:y": -8,
      "id": "#Sambamba_Index"
    },
    {
      "inputs": [
        {
          "id": "#Samtools_flagstat.threads"
        },
        {
          "id": "#Samtools_flagstat.memory"
        },
        {
          "source": [
            "#BWA_MEM_Bundle.aligned_reads"
          ],
          "id": "#Samtools_flagstat.input_bam"
        }
      ],
      "outputs": [
        {
          "id": "#Samtools_flagstat.flagstat_metrics"
        }
      ],
      "sbg:x": 681,
      "run": {
        "inputs": [
          {
            "label": "No of threads",
            "description": "Number of threads.",
            "sbg:category": "Execution",
            "sbg:stageInput": null,
            "id": "#threads",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Allocated memory [GB]",
            "description": "Memory allocation for execution [GB].",
            "sbg:category": "Execution",
            "sbg:stageInput": null,
            "id": "#memory",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Input files",
            "description": "Input files for which metrics data shall be created.",
            "sbg:category": "Input file",
            "sbg:stageInput": "link",
            "sbg:fileTypes": "BAM,SAM",
            "inputBinding": {
              "secondaryFiles": [
                ".bai"
              ],
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#input_bam",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          }
        ],
        "sbg:modifiedBy": "bogdang",
        "sbg:modifiedOn": 1497896660,
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "cwlVersion": "sbg:draft-2",
        "x": 681,
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ]
          }
        ],
        "arguments": [
          {
            "separate": true,
            "position": 15,
            "valueFrom": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n\n  input_file_path = [].concat($job.inputs.input_bam)[0].path\n  input_file_name = input_file_path.replace(/^.*[\\\\\\/]/, '').split('.')\n  input_file_namebase = input_file_name.slice(0,-1).join('.')\n  \n  return \" > \" + input_file_namebase + \".flagstat.txt\"\n  \n}"
            }
          }
        ],
        "sbg:validationErrors": [],
        "sbg:createdBy": "bogdang",
        "label": "Samtools flagstat",
        "stdout": "",
        "temporaryFailCodes": [],
        "y": 427.1666717529297,
        "sbg:id": "kb472/wxs-haplotypecaller-test/samtools-flagstat/1",
        "sbg:latestRevision": 1,
        "baseCommand": [
          "samtools",
          "flagstat"
        ],
        "id": "kb472/wxs-haplotypecaller-test/samtools-flagstat/1",
        "sbg:job": {
          "inputs": {
            "input_bam": {
              "class": "File",
              "secondaryFiles": [
                {
                  "path": ".bai"
                }
              ],
              "size": 0,
              "path": "/path/to/merged.sorted.bam"
            },
            "threads": 9,
            "memory": 3
          },
          "allocatedResources": {
            "cpu": 9,
            "mem": 3072
          }
        },
        "sbg:sbgMaintained": false,
        "outputs": [
          {
            "label": "Flagstat metrics files",
            "id": "#flagstat_metrics",
            "description": "Files containing metrics, one file for each input.",
            "sbg:fileTypes": "TXT",
            "outputBinding": {
              "glob": "*.txt",
              "sbg:inheritMetadataFrom": "#input_bam"
            },
            "type": [
              "null",
              "File"
            ]
          }
        ],
        "sbg:revision": 1,
        "sbg:cmdPreview": "samtools flagstat   > merged.sorted.flagstat.txt",
        "description": "",
        "sbg:projectName": "WXS haplotypeCaller Test ",
        "class": "CommandLineTool",
        "sbg:image_url": null,
        "sbg:createdOn": 1497885820,
        "sbg:contributors": [
          "bogdang"
        ],
        "sbg:revisionNotes": "output name updated",
        "sbg:project": "kb472/wxs-haplotypecaller-test",
        "sbg:categories": [
          "Quantification"
        ],
        "successCodes": [],
        "sbg:license": "",
        "stdin": "",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "bogdang",
            "sbg:revisionNotes": "Copy of uros_sipetic/viral-alignment/samtools-flagstat/1",
            "sbg:modifiedOn": 1497885820,
            "sbg:revision": 0
          },
          {
            "sbg:modifiedBy": "bogdang",
            "sbg:revisionNotes": "output name updated",
            "sbg:modifiedOn": 1497896660,
            "sbg:revision": 1
          }
        ],
        "hints": [
          {
            "class": "sbg:CPURequirement",
            "value": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{  \n\n  // Calculate suggested CPUs depending on the input BAM size\n  bam_size = $job.inputs.input_bam.size\n  \n  if(!bam_size) { bam_size = 0 }\n \n  GB_1 = 1024*1024*1024\n  \n  if(bam_size < GB_1)\n  { suggested_cpus = 1 }\n  else if(bam_size < 10 * GB_1)\n  { suggested_cpus = 8 }\n  else \n  { suggested_cpus = 30 }\n  \n  if($job.inputs.threads){  \t\n    return  $job.inputs.threads\n  } \n  else{  \t\n    return suggested_cpus  \n  }\n  \n}"
            }
          },
          {
            "class": "DockerRequirement",
            "dockerPull": "images.sbgenomics.com/bogdang/samstat:1.5.1",
            "dockerImageId": ""
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{  \n\n  // Calculate suggested memory depending on the input BAM size\n  bam_size = $job.inputs.input_bam.size\n  \n  if(!bam_size) { bam_size = 0 }\n \n  GB_1 = 1024*1024*1024\n  if(bam_size < GB_1){ suggested_memory = 4 }\n  else if(bam_size < 10 * GB_1){ suggested_memory = 15 }\n  else { suggested_memory = 58 }\n  \n  if($job.inputs.memory){  \t\n    return  $job.inputs.memory* 1024  \n  } \n  else{  \t\n    return suggested_memory * 1024  \n  }\n}"
            }
          }
        ]
      },
      "sbg:y": 427.1666717529297,
      "id": "#Samtools_flagstat"
    },
    {
      "inputs": [
        {
          "id": "#Samtools_flagstat_1.threads"
        },
        {
          "id": "#Samtools_flagstat_1.memory"
        },
        {
          "source": [
            "#Sambamba_Index.indexed_bam"
          ],
          "id": "#Samtools_flagstat_1.input_bam"
        }
      ],
      "outputs": [
        {
          "id": "#Samtools_flagstat_1.flagstat_metrics"
        }
      ],
      "sbg:x": 1114,
      "run": {
        "inputs": [
          {
            "label": "No of threads",
            "description": "Number of threads.",
            "sbg:category": "Execution",
            "sbg:stageInput": null,
            "id": "#threads",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Allocated memory [GB]",
            "description": "Memory allocation for execution [GB].",
            "sbg:category": "Execution",
            "sbg:stageInput": null,
            "id": "#memory",
            "type": [
              "null",
              "int"
            ]
          },
          {
            "label": "Input files",
            "description": "Input files for which metrics data shall be created.",
            "sbg:category": "Input file",
            "sbg:stageInput": "link",
            "sbg:fileTypes": "BAM,SAM",
            "inputBinding": {
              "secondaryFiles": [
                ".bai"
              ],
              "sbg:cmdInclude": true,
              "separate": true,
              "itemSeparator": null
            },
            "id": "#input_bam",
            "required": false,
            "type": [
              "null",
              "File"
            ]
          }
        ],
        "sbg:modifiedBy": "bogdang",
        "sbg:modifiedOn": 1497896660,
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "cwlVersion": "sbg:draft-2",
        "x": 1114,
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ]
          }
        ],
        "arguments": [
          {
            "separate": true,
            "position": 15,
            "valueFrom": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{\n\n  input_file_path = [].concat($job.inputs.input_bam)[0].path\n  input_file_name = input_file_path.replace(/^.*[\\\\\\/]/, '').split('.')\n  input_file_namebase = input_file_name.slice(0,-1).join('.')\n  \n  return \" > \" + input_file_namebase + \".flagstat.txt\"\n  \n}"
            }
          }
        ],
        "sbg:validationErrors": [],
        "sbg:createdBy": "bogdang",
        "label": "Samtools flagstat",
        "stdout": "",
        "temporaryFailCodes": [],
        "y": 386.1666717529297,
        "sbg:id": "kb472/wxs-haplotypecaller-test/samtools-flagstat/1",
        "sbg:latestRevision": 1,
        "baseCommand": [
          "samtools",
          "flagstat"
        ],
        "id": "kb472/wxs-haplotypecaller-test/samtools-flagstat/1",
        "sbg:job": {
          "inputs": {
            "input_bam": {
              "class": "File",
              "secondaryFiles": [
                {
                  "path": ".bai"
                }
              ],
              "size": 0,
              "path": "/path/to/merged.sorted.bam"
            },
            "threads": 9,
            "memory": 3
          },
          "allocatedResources": {
            "cpu": 9,
            "mem": 3072
          }
        },
        "sbg:sbgMaintained": false,
        "outputs": [
          {
            "label": "Flagstat metrics files",
            "id": "#flagstat_metrics",
            "description": "Files containing metrics, one file for each input.",
            "sbg:fileTypes": "TXT",
            "outputBinding": {
              "glob": "*.txt",
              "sbg:inheritMetadataFrom": "#input_bam"
            },
            "type": [
              "null",
              "File"
            ]
          }
        ],
        "sbg:revision": 1,
        "sbg:cmdPreview": "samtools flagstat   > merged.sorted.flagstat.txt",
        "description": "",
        "sbg:projectName": "WXS haplotypeCaller Test ",
        "class": "CommandLineTool",
        "sbg:image_url": null,
        "sbg:createdOn": 1497885820,
        "sbg:contributors": [
          "bogdang"
        ],
        "sbg:revisionNotes": "output name updated",
        "sbg:project": "kb472/wxs-haplotypecaller-test",
        "sbg:categories": [
          "Quantification"
        ],
        "successCodes": [],
        "sbg:license": "",
        "stdin": "",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "bogdang",
            "sbg:revisionNotes": "Copy of uros_sipetic/viral-alignment/samtools-flagstat/1",
            "sbg:modifiedOn": 1497885820,
            "sbg:revision": 0
          },
          {
            "sbg:modifiedBy": "bogdang",
            "sbg:revisionNotes": "output name updated",
            "sbg:modifiedOn": 1497896660,
            "sbg:revision": 1
          }
        ],
        "hints": [
          {
            "class": "sbg:CPURequirement",
            "value": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{  \n\n  // Calculate suggested CPUs depending on the input BAM size\n  bam_size = $job.inputs.input_bam.size\n  \n  if(!bam_size) { bam_size = 0 }\n \n  GB_1 = 1024*1024*1024\n  \n  if(bam_size < GB_1)\n  { suggested_cpus = 1 }\n  else if(bam_size < 10 * GB_1)\n  { suggested_cpus = 8 }\n  else \n  { suggested_cpus = 30 }\n  \n  if($job.inputs.threads){  \t\n    return  $job.inputs.threads\n  } \n  else{  \t\n    return suggested_cpus  \n  }\n  \n}"
            }
          },
          {
            "class": "DockerRequirement",
            "dockerPull": "images.sbgenomics.com/bogdang/samstat:1.5.1",
            "dockerImageId": ""
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "class": "Expression",
              "engine": "#cwl-js-engine",
              "script": "{  \n\n  // Calculate suggested memory depending on the input BAM size\n  bam_size = $job.inputs.input_bam.size\n  \n  if(!bam_size) { bam_size = 0 }\n \n  GB_1 = 1024*1024*1024\n  if(bam_size < GB_1){ suggested_memory = 4 }\n  else if(bam_size < 10 * GB_1){ suggested_memory = 15 }\n  else { suggested_memory = 58 }\n  \n  if($job.inputs.memory){  \t\n    return  $job.inputs.memory* 1024  \n  } \n  else{  \t\n    return suggested_memory * 1024  \n  }\n}"
            }
          }
        ]
      },
      "sbg:y": 386.1666717529297,
      "id": "#Samtools_flagstat_1"
    }
  ],
  "sbg:batchInput": "#input_fastq",
  "sbg:canvas_zoom": 1,
  "sbg:canvas_y": 78,
  "sbg:revisionsInfo": [
    {
      "sbg:revision": 0,
      "sbg:modifiedBy": "kb472",
      "sbg:modifiedOn": 1497961698,
      "sbg:revisionNotes": "Copy of kb472/wxs-haplotypecaller-test/wxs-haplotypecallernew-v2/4"
    },
    {
      "sbg:revision": 1,
      "sbg:modifiedBy": "kb472",
      "sbg:modifiedOn": 1497961733,
      "sbg:revisionNotes": null
    }
  ],
  "$namespaces": {
    "sbg": "https://sevenbridges.com"
  },
  "sbg:appVersion": [
    "sbg:draft-2"
  ],
  "id": "https://cgc-api.sbgenomics.com/v2/apps/YUGUSEV/va-georgetown-weseq/wxs-haplotypecallernew-v3/1/raw/",
  "sbg:id": "YUGUSEV/va-georgetown-weseq/wxs-haplotypecallernew-v3/1",
  "sbg:revision": 1,
  "sbg:revisionNotes": null,
  "sbg:modifiedOn": 1497961733,
  "sbg:modifiedBy": "kb472",
  "sbg:createdOn": 1497961698,
  "sbg:createdBy": "kb472",
  "sbg:project": "YUGUSEV/va-georgetown-weseq",
  "sbg:sbgMaintained": false,
  "sbg:validationErrors": [],
  "sbg:contributors": [
    "kb472"
  ],
  "sbg:latestRevision": 1,
  "sbg:publisher": "sbg",
  "sbg:content_hash": null
}